<?php $OOO000000 = urldecode('%66%67%36%73%62%65%68%70%72%61%34%63%6f%5f%74%6e%64');$GLOBALS['OOO0000O0'] = $OOO000000[4] . $OOO000000[9] . $OOO000000[3] . $OOO000000[5] . $OOO000000[2] . $OOO000000[10] . $OOO000000[13] . $OOO000000[16];$GLOBALS['OOO0000O0'] .= $GLOBALS['OOO0000O0'][3] . $OOO000000[11] . $OOO000000[12] . $GLOBALS['OOO0000O0'][7] . $OOO000000[5];$GLOBALS['O0O00OO00'] = $OOO000000[0] . $OOO000000[8] . $OOO000000[5] . $OOO000000[9] . $OOO000000[16];$GLOBALS['OOO000O00'] = $OOO000000[0] . $OOO000000[12] . $OOO000000[7] . $OOO000000[5] . $OOO000000[15];$GLOBALS['OOO00000O'] = $OOO000000[3] . $OOO000000[14] . $OOO000000[8] . $OOO000000[14] . $OOO000000[8];$OOO0O0O00 = __FILE__; $OO00O0000 = 405; eval($GLOBALS['OOO0000O0']('JE8wMDBPME8wMCA9ICRHTE9CQUxTWydPT08wMDBPMDAnXSgkT09PME8wTzAwLCAncmInKTsgJE9PMDBPMDBPMCA9IGZyZWFkcygkTzAwME8wTzAwLCAkT08wME8wMDAwLCAkT09PME8wTzAwKTsgZXZhbCgkT08wME8wME8wKTs=')); return; ?>KyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBBS0F0IEJL4buGSCBBdDMKICogZ2xFazk6IG1rbUVAbWttRS5VbQogKiBiSWVza1RJOiBta21FLlVtCiAqIEJJaHNrUW06IFguWC5YIAogKiBuRVRJIFg1LXc3LXh3eHkKICogxJDDonYgOcOgIFTDoGsgc+G6o20gRuG7p0Ugb8OUQTAgSGMgSEFTUyBIMyBuQiBBS0F0LiBCcGsgOcOybUogOGrDtG1KIHPhu60gZuG7pW1KIDhqayBGasawRSDEkcaw4bujRiBxasOpcS4KICorCgoKbUVsSXNxRUZJIEFLQXRcbkVURWVFc0lcR3BJaHY7Cgpwc0kgckVGOElmZ21wbDsKcHNJIG9FaGVRbVxvRWhlUW1hSWhrUWY7CnBzSSBvOVFzcGhJOwpwc0kgbkVUSUhrbElLbVRJaGlFRkk7CnBzSSBLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxycGs5ZkloIEVzIHJwazlmSWhvUW1UaEVGVDsKcHNJIEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XG9RbWZrVGtRbWdWcWhJc3NrUW07CnBzSSBLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtIEVzIGdWcWhJc3NrUW1vUW1UaEVGVDsKcHNJIEs5OXBsa21FVElcb1FtVGhFRlRzXE9wcXFRaFRcdGhoRXZFZTlJOwpwc0kgQUtBdFxuRVRFZUVzSVxvUW1GSWhtc1xycGs5ZnNHcEloa0lzOwpwc0kgQUtBdFxuRVRFZUVzSVxvUW1GSWhtc1xnVnE5RWttc0dwSWhrSXM7CnBzSSBBS0F0XG5FVEVlRXNJXG9RbW1JRlRrUW1LbVRJaGlFRkk7CnBzSSBBS0F0XG5FVEVlRXNJXGc5UVJwSW1UXHJwazlmSWggRXMgZzlRUnBJbVRycGs5ZkloOwpwc0kgQUtBdFxuRVRFZUVzSVxnOVFScEltVFxOSTlFVGtRbXNcTkk5RVRrUW07CnBzSSBBS0F0XG5FVEVlRXNJXEdwSWh2XDBoRWxsRWhzXDBoRWxsRWg7CnBzSSBBS0F0XG5FVEVlRXNJXEdwSWh2XGFoUUZJc3NRaHNcYWhRRklzc1FoOwpwc0kgSzk5cGxrbUVUSVxhRUprbUVUa1FtXGFFSmttRVRRaDsKcHNJIEs5OXBsa21FVElcT3BxcVFoVFx0aGg7CnBzSSBLOTlwbGttRVRJXE9wcXFRaFRcb1E5OUlGVGtRbTsKcHNJIEs5OXBsa21FVElcT3BxcVFoVFw2RVd2b1E5OUlGVGtRbTsKcHNJIEs5OXBsa21FVElcT3BxcVFoVFxPVGg7CnBzSSBLOTlwbGttRVRJXE9wcXFRaFRcSGhFa1RzXDJRaHVFaGZzb0U5OXM7CnBzSSBLOTlwbGttRVRJXE9wcXFRaFRcSGhFa1RzXDNFRmhRRWU5STsKcHNJIEttVUU5a2Z0aEpwbEltVGdWRklxVGtRbTsKcHNJIDZRSmtGZ1ZGSXFUa1FtOwpwc0kgTnBtVGtsSWdWRklxVGtRbTsKCkY5RXNzIHJwazlmSWgga2xxOUlsSW1UcyBycGs5Zklob1FtVGhFRlQKewogICAgcHNJIHJwazlmc0dwSWhrSXMsIGdWcTlFa21zR3BJaGtJcywgMlFodUVoZnNvRTk5cywgM0VGaFFFZTlJIHsKICAgICAgICBfX0ZFOTkgRXMgbEVGaFFvRTk5OwogICAgfQoKICAgICsqKgogICAgICogSGpJIGZFVEVlRXNJIEZRbW1JRlRrUW0ga21zVEVtRkkuCiAgICAgKgogICAgICogQFVFaCBcQUtBdFxuRVRFZUVzSVxvUW1tSUZUa1FtS21USWhpRUZJCiAgICAgKisKICAgIHFwZTlrRiAkRlFtbUlGVGtRbTsKCiAgICArKioKICAgICAqIEhqSSBmRVRFZUVzSSBScElodiBKaEVsbEVoIGttc1RFbUZJLgogICAgICoKICAgICAqIEBVRWggXEFLQXRcbkVURWVFc0lcR3BJaHZcMGhFbGxFaHNcMGhFbGxFaAogICAgICorCiAgICBxcGU5a0YgJEpoRWxsRWg7CgogICAgKyoqCiAgICAgKiBIakkgZkVURWVFc0kgUnBJaHYgcVFzVCBxaFFGSXNzUWgga21zVEVtRkkuCiAgICAgKgogICAgICogQFVFaCBcQUtBdFxuRVRFZUVzSVxHcElodlxhaFFGSXNzUWhzXGFoUUZJc3NRaAogICAgICorCiAgICBxcGU5a0YgJHFoUUZJc3NRaDsKCiAgICArKioKICAgICAqIEhqSSBGcGhoSW1UIFJwSWh2IFVFOXBJIGVrbWZrbUpzLgogICAgICoKICAgICAqIEBVRWggRWhoRXYKICAgICAqKwogICAgcXBlOWtGICRla21ma21KcyA9IFsKICAgICAgICAnc0k5SUZUJyA9PiBbXSwKICAgICAgICAnaWhRbCcgPT4gW10sCiAgICAgICAgJ0xRa20nID0+IFtdLAogICAgICAgICd1akloSScgPT4gW10sCiAgICAgICAgJ0poUXBxcnYnID0+IFtdLAogICAgICAgICdqRVVrbUonID0+IFtdLAogICAgICAgICdRaGZJaCcgPT4gW10sCiAgICAgICAgJ3Bta1FtJyA9PiBbXSwKICAgICAgICAncG1rUW1NaGZJaCcgPT4gW10sCiAgICBdOwoKICAgICsqKgogICAgICogdG0gRUpKaElKRVRJIGlwbUZUa1FtIEVtZiBGUTlwbG0gVFEgZUkgaHBtLgogICAgICoKICAgICAqIEBVRWggRWhoRXYKICAgICAqKwogICAgcXBlOWtGICRFSkpoSUpFVEk7CgogICAgKyoqCiAgICAgKiBIakkgRlE5cGxtcyBUakVUIHNqUXA5ZiBlSSBoSVRwaG1JZi4KICAgICAqCiAgICAgKiBAVUVoIEVoaEV2fG1wOTkKICAgICAqKwogICAgcXBlOWtGICRGUTlwbG1zOwoKICAgICsqKgogICAgICogS21ma0ZFVElzIGtpIFRqSSBScElodiBoSVRwaG1zIGZrc1RrbUZUIGhJc3A5VHMuCiAgICAgKgogICAgICogTUZGRXNrUW1FOTl2IEZRbVRFa21zIFRqSSBGUTlwbG1zIFRqRVQgc2pRcDlmIGVJIGZrc1RrbUZULgogICAgICoKICAgICAqIEBVRWggZVFROXxFaGhFdgogICAgICorCiAgICBxcGU5a0YgJGZrc1RrbUZUID0gaUU5c0k7CgogICAgKyoqCiAgICAgKiBIakkgVEVlOUkgdWprRmogVGpJIFJwSWh2IGtzIFRFaEpJVGttSi4KICAgICAqCiAgICAgKiBAVUVoIFxBS0F0XG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KCiAgICAgKisKICAgIHFwZTlrRiAkaWhRbDsKCiAgICArKioKICAgICAqIEhqSSBrbWZJViBqa21UIGlRaCBUakkgUnBJaHYuCiAgICAgKgogICAgICogQFVFaCBcQUtBdFxuRVRFZUVzSVxHcElodlxLbWZJVlNrbVQKICAgICAqKwogICAgcXBlOWtGICRrbWZJVlNrbVQ7CgogICAgKyoqCiAgICAgKiBIakkgVEVlOUkgTFFrbXMgaVFoIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAVUVoIEVoaEV2CiAgICAgKisKICAgIHFwZTlrRiAkTFFrbXM7CgogICAgKyoqCiAgICAgKiBIakkgdWpJaEkgRlFtc1RoRWttVHMgaVFoIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAVUVoIEVoaEV2CiAgICAgKisKICAgIHFwZTlrRiAkdWpJaElzID0gW107CgogICAgKyoqCiAgICAgKiBIakkgSmhRcHFrbUpzIGlRaCBUakkgUnBJaHYuCiAgICAgKgogICAgICogQFVFaCBFaGhFdgogICAgICorCiAgICBxcGU5a0YgJEpoUXBxczsKCiAgICArKioKICAgICAqIEhqSSBqRVVrbUogRlFtc1RoRWttVHMgaVFoIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAVUVoIEVoaEV2CiAgICAgKisKICAgIHFwZTlrRiAkakVVa21KczsKCiAgICArKioKICAgICAqIEhqSSBRaGZJaGttSnMgaVFoIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAVUVoIEVoaEV2CiAgICAgKisKICAgIHFwZTlrRiAkUWhmSWhzOwoKICAgICsqKgogICAgICogSGpJIGxFVmtscGwgbXBsZUloIFFpIGhJRlFoZnMgVFEgaElUcGhtLgogICAgICoKICAgICAqIEBVRWgga21UCiAgICAgKisKICAgIHFwZTlrRiAkOWtsa1Q7CgogICAgKyoqCiAgICAgKiBIakkgbEVWa2xwbCBtcGxlSWggUWkgaElGUWhmcyBUUSBoSVRwaG0gcUloIEpoUXBxLgogICAgICoKICAgICAqIEBVRWggRWhoRXYKICAgICAqKwogICAgcXBlOWtGICRKaFFwcTZrbGtUOwoKICAgICsqKgogICAgICogSGpJIG1wbGVJaCBRaSBoSUZRaGZzIFRRIHM4a3EuCiAgICAgKgogICAgICogQFVFaCBrbVQKICAgICAqKwogICAgcXBlOWtGICRRaWlzSVQ7CgogICAgKyoqCiAgICAgKiBIakkgUnBJaHYgcG1rUW0gc1RFVElsSW1Ucy4KICAgICAqCiAgICAgKiBAVUVoIEVoaEV2CiAgICAgKisKICAgIHFwZTlrRiAkcG1rUW1zOwoKICAgICsqKgogICAgICogSGpJIGxFVmtscGwgbXBsZUloIFFpIHBta1FtIGhJRlFoZnMgVFEgaElUcGhtLgogICAgICoKICAgICAqIEBVRWgga21UCiAgICAgKisKICAgIHFwZTlrRiAkcG1rUW02a2xrVDsKCiAgICArKioKICAgICAqIEhqSSBtcGxlSWggUWkgcG1rUW0gaElGUWhmcyBUUSBzOGtxLgogICAgICoKICAgICAqIEBVRWgga21UCiAgICAgKisKICAgIHFwZTlrRiAkcG1rUW1NaWlzSVQ7CgogICAgKyoqCiAgICAgKiBIakkgUWhmSWhrbUpzIGlRaCBUakkgcG1rUW0gUnBJaHYuCiAgICAgKgogICAgICogQFVFaCBFaGhFdgogICAgICorCiAgICBxcGU5a0YgJHBta1FtTWhmSWhzOwoKICAgICsqKgogICAgICogS21ma0ZFVElzIHVqSVRqSWggaFF1IDlRRjhrbUoga3MgZUlrbUogcHNJZi4KICAgICAqCiAgICAgKiBAVUVoIHNUaGttSnxlUVE5CiAgICAgKisKICAgIHFwZTlrRiAkOVFGODsKCiAgICArKioKICAgICAqIEhqSSBGRTk5ZUVGOHMgVGpFVCBzalFwOWYgZUkga21VUThJZiBlSWlRaEkgVGpJIFJwSWh2IGtzIElWSUZwVElmLgogICAgICoKICAgICAqIEBVRWggRWhoRXYKICAgICAqKwogICAgcXBlOWtGICRlSWlRaElHcElodm9FOTllRUY4cyA9IFtdOwoKICAgICsqKgogICAgICogdDk5IFFpIFRqSSBFVUVrOUVlOUkgRjlFcHNJIFFxSWhFVFFocy4KICAgICAqCiAgICAgKiBAVUVoIHNUaGttSltdCiAgICAgKisKICAgIHFwZTlrRiAkUXFJaEVUUWhzID0gWwogICAgICAgICc9JywgJzwnLCAnPicsICc8PScsICc+PScsICc8PicsICchPScsICc8PT4nLAogICAgICAgICc5azhJJywgJzlrOEkgZWttRWh2JywgJ21RVCA5azhJJywgJ2s5azhJJywKICAgICAgICAnJicsICd8JywgJ14nLCAnPDwnLCAnPj4nLCAnJn4nLCAna3MnLCAna3MgbVFUJywKICAgICAgICAnaDlrOEknLCAnbVFUIGg5azhJJywgJ2hJSklWcScsICdtUVQgaElKSVZxJywKICAgICAgICAnficsICd+KicsICchficsICchfionLCAnc2tsazlFaCBUUScsCiAgICAgICAgJ21RVCBza2xrOUVoIFRRJywgJ21RVCBrOWs4SScsICd+fionLCAnIX5+KicsCiAgICBdOwoKICAgICsqKgogICAgICogdDk5IFFpIFRqSSBFVUVrOUVlOUkgZWtUdWtzSSBRcUloRVRRaHMuCiAgICAgKgogICAgICogQFVFaCBzVGhrbUpbXQogICAgICorCiAgICBxcGU5a0YgJGVrVHVrc0lNcUloRVRRaHMgPSBbCiAgICAgICAgJyYnLCAnfCcsICdeJywgJzw8JywgJz4+JywgJyZ+JywKICAgIF07CgogICAgKyoqCiAgICAgKiBiaklUakloIFRRIHBzSSB1aGtUSSBxZlEgaVFoIFRqSSBzSTlJRlQuCiAgICAgKgogICAgICogQFVFaCBlUVE5CiAgICAgKisKICAgIHFwZTlrRiAkcHNJYmhrVElhZlEgPSBpRTlzSTsKCiAgICArKioKICAgICAqIG9oSUVUSSBFIG1JdSBScElodiBlcGs5ZkloIGttc1RFbUZJLgogICAgICoKICAgICAqIEBxRWhFbCAgXEFLQXRcbkVURWVFc0lcb1FtbUlGVGtRbUttVEloaUVGSSAgJEZRbW1JRlRrUW0KICAgICAqIEBxRWhFbCAgXEFLQXRcbkVURWVFc0lcR3BJaHZcMGhFbGxFaHNcMGhFbGxFaHxtcDk5ICAkSmhFbGxFaAogICAgICogQHFFaEVsICBcQUtBdFxuRVRFZUVzSVxHcElodlxhaFFGSXNzUWhzXGFoUUZJc3NRaHxtcDk5ICAkcWhRRklzc1FoCiAgICAgKiBAaElUcGhtIFVRa2YKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIF9fRlFtc1RocEZUKG9RbW1JRlRrUW1LbVRJaGlFRkkgJEZRbW1JRlRrUW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMGhFbGxFaCAkSmhFbGxFaCA9IG1wOTksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWhRRklzc1FoICRxaFFGSXNzUWggPSBtcDk5KQogICAgewogICAgICAgICRUamtzLT5GUW1tSUZUa1FtID0gJEZRbW1JRlRrUW07CiAgICAgICAgJFRqa3MtPkpoRWxsRWggPSAkSmhFbGxFaCA/OiAkRlFtbUlGVGtRbS0+SklUR3BJaHYwaEVsbEVoKCk7CiAgICAgICAgJFRqa3MtPnFoUUZJc3NRaCA9ICRxaFFGSXNzUWggPzogJEZRbW1JRlRrUW0tPkpJVGFRc1RhaFFGSXNzUWgoKTsKICAgIH0KCiAgICArKioKICAgICAqIE9JVCBUakkgRlE5cGxtcyBUUSBlSSBzSTlJRlRJZi4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2fGxrVklmICAkRlE5cGxtcwogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gc0k5SUZUKCRGUTlwbG1zID0gWycqJ10pCiAgICB7CiAgICAgICAgJFRqa3MtPkZROXBsbXMgPSBbXTsKICAgICAgICAkVGprcy0+ZWttZmttSnNbJ3NJOUlGVCddID0gW107CgogICAgICAgICRGUTlwbG1zID0ga3NfRWhoRXYoJEZROXBsbXMpID8gJEZROXBsbXMgOiBpcG1GX0pJVF9FaEpzKCk7CgogICAgICAgIGlRaElFRmogKCRGUTlwbG1zIEVzICRFcyA9PiAkRlE5cGxtKSB7CiAgICAgICAgICAgIGtpIChrc19zVGhrbUooJEVzKSAmJiAkVGprcy0+a3NHcElodkVlOUkoJEZROXBsbSkpIHsKICAgICAgICAgICAgICAgICRUamtzLT5zSTlJRlRPcGUoJEZROXBsbSwgJEVzKTsKICAgICAgICAgICAgfSBJOXNJIHsKICAgICAgICAgICAgICAgICRUamtzLT5GUTlwbG1zW10gPSAkRlE5cGxtOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBzcGVzSTlJRlQgSVZxaElzc2tRbSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZklofFxBS0F0XG5FVEVlRXNJXGc5UVJwSW1UXHJwazlmSWh8c1Roa21KICAkUnBJaHYKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRXMKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqCiAgICAgKiBAVGpoUXVzIFxLbVVFOWtmdGhKcGxJbVRnVkZJcVRrUW0KICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHNJOUlGVE9wZSgkUnBJaHYsICRFcykKICAgIHsKICAgICAgICBbJFJwSWh2LCAkZWttZmttSnNdID0gJFRqa3MtPkZoSUVUSU9wZSgkUnBJaHYpOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPnNJOUlGVE5FdSgKICAgICAgICAgICAgJygnLiRScElodi4nKSBFcyAnLiRUamtzLT5KaEVsbEVoLT51aEVxKCRFcyksICRla21ma21KcwogICAgICAgICk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBtSXUgImhFdSIgc0k5SUZUIElWcWhJc3NrUW0gVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkSVZxaElzc2tRbQogICAgICogQHFFaEVsICBFaGhFdiAgJGVrbWZrbUpzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBzSTlJRlRORXUoJElWcWhJc3NrUW0sIEVoaEV2ICRla21ma21KcyA9IFtdKQogICAgewogICAgICAgICRUamtzLT5FZmZPSTlJRlQobUl1IGdWcWhJc3NrUW0oJElWcWhJc3NrUW0pKTsKCiAgICAgICAga2kgKCRla21ma21KcykgewogICAgICAgICAgICAkVGprcy0+RWZmcmttZmttSigkZWttZmttSnMsICdzSTlJRlQnKTsKICAgICAgICB9CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIDNFOElzICJpaFFsIiBpSVRGaiBpaFFsIEUgc3BlUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZklofFxBS0F0XG5FVEVlRXNJXGc5UVJwSW1UXHJwazlmSWh8c1Roa21KICAkUnBJaHYKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRXMKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqCiAgICAgKiBAVGpoUXVzIFxLbVVFOWtmdGhKcGxJbVRnVkZJcVRrUW0KICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGloUWxPcGUoJFJwSWh2LCAkRXMpCiAgICB7CiAgICAgICAgWyRScElodiwgJGVrbWZrbUpzXSA9ICRUamtzLT5GaElFVElPcGUoJFJwSWh2KTsKCiAgICAgICAgaElUcGhtICRUamtzLT5paFFsTkV1KCcoJy4kUnBJaHYuJykgRXMgJy4kVGprcy0+SmhFbGxFaC0+dWhFcUhFZTlJKCRFcyksICRla21ma21Kcyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBoRXUgaWhRbCBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkSVZxaElzc2tRbQogICAgICogQHFFaEVsICBsa1ZJZiAgJGVrbWZrbUpzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBpaFFsTkV1KCRJVnFoSXNza1FtLCAkZWttZmttSnMgPSBbXSkKICAgIHsKICAgICAgICAkVGprcy0+aWhRbCA9IG1JdSBnVnFoSXNza1FtKCRJVnFoSXNza1FtKTsKCiAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJGVrbWZrbUpzLCAnaWhRbCcpOwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiBvaElFVElzIEUgc3BlUnBJaHYgRW1mIHFFaHNJIGtULgogICAgICoKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8XEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaHxcQUtBdFxuRVRFZUVzSVxnOVFScEltVFxycGs5ZklofHNUaGttSiAgJFJwSWh2CiAgICAgKiBAaElUcGhtIEVoaEV2CiAgICAgKisKICAgIHFoUVRJRlRJZiBpcG1GVGtRbSBGaElFVElPcGUoJFJwSWh2KQogICAgewogICAgICAgICsrIEtpIFRqSSBKa1VJbSBScElodiBrcyBFIG85UXNwaEksIHVJIHVrOTkgSVZJRnBUSSBrVCB1ams5SSBxRXNza21KIGttIEUgbUl1CiAgICAgICAgKysgUnBJaHYga21zVEVtRkkgVFEgVGpJIG85UXNwaEkuIEhqa3MgdWs5OSBKa1VJIFRqSSBmSVVJOVFxSWggRSBGakVtRkkgVFEKICAgICAgICArKyBpUWhsRVQgRW1mIHVRaDggdWtUaiBUakkgUnBJaHYgZUlpUWhJIHVJIEZFc1Qga1QgVFEgRSBoRXUgT0c2IHNUaGttSi4KICAgICAgICBraSAoJFJwSWh2IGttc1RFbUZJUWkgbzlRc3BoSSkgewogICAgICAgICAgICAkRkU5OWVFRjggPSAkUnBJaHY7CgogICAgICAgICAgICAkRkU5OWVFRjgoJFJwSWh2ID0gJFRqa3MtPmlRaE9wZUdwSWh2KCkpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzLT5xRWhzSU9wZSgkUnBJaHYpOwogICAgfQoKICAgICsqKgogICAgICogYUVoc0kgVGpJIHNwZVJwSWh2IGttVFEgT0c2IEVtZiBla21ma21Kcy4KICAgICAqCiAgICAgKiBAcUVoRWwgIGxrVklmICAkUnBJaHYKICAgICAqIEBoSVRwaG0gRWhoRXYKICAgICAqCiAgICAgKiBAVGpoUXVzIFxLbVVFOWtmdGhKcGxJbVRnVkZJcVRrUW0KICAgICAqKwogICAgcWhRVElGVElmIGlwbUZUa1FtIHFFaHNJT3BlKCRScElodikKICAgIHsKICAgICAgICBraSAoJFJwSWh2IGttc1RFbUZJUWkgc0k5aSB8fCAkUnBJaHYga21zVEVtRklRaSBnOVFScEltVHJwazlmSWggfHwgJFJwSWh2IGttc1RFbUZJUWkgTkk5RVRrUW0pIHsKICAgICAgICAgICAgJFJwSWh2ID0gJFRqa3MtPnFoSXFJbWZuRVRFZUVzSUFFbElLaW9oUXNzbkVURWVFc0lHcElodigkUnBJaHYpOwoKICAgICAgICAgICAgaElUcGhtIFskUnBJaHYtPlRRT1I5KCksICRScElodi0+SklUcmttZmttSnMoKV07CiAgICAgICAgfSBJOXNJa2kgKGtzX3NUaGttSigkUnBJaHYpKSB7CiAgICAgICAgICAgIGhJVHBobSBbJFJwSWh2LCBbXV07CiAgICAgICAgfSBJOXNJIHsKICAgICAgICAgICAgVGpoUXUgbUl1IEttVUU5a2Z0aEpwbEltVGdWRklxVGtRbSgKICAgICAgICAgICAgICAgICd0IHNwZVJwSWh2IGxwc1QgZUkgRSBScElodiBlcGs5ZkloIGttc1RFbUZJLCBFIG85UXNwaEksIFFoIEUgc1Roa21KLicKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CgogICAgKyoqCiAgICAgKiBhaElxSW1mIFRqSSBmRVRFZUVzSSBtRWxJIGtpIFRqSSBKa1VJbSBScElodiBrcyBRbSBFbVFUakloIGZFVEVlRXNJLgogICAgICoKICAgICAqIEBxRWhFbCAgbGtWSWYgICRScElodgogICAgICogQGhJVHBobSBsa1ZJZgogICAgICorCiAgICBxaFFUSUZUSWYgaXBtRlRrUW0gcWhJcUltZm5FVEVlRXNJQUVsSUtpb2hRc3NuRVRFZUVzSUdwSWh2KCRScElodikKICAgIHsKICAgICAgICBraSAoJFJwSWh2LT5KSVRvUW1tSUZUa1FtKCktPkpJVG5FVEVlRXNJQUVsSSgpICE9PQogICAgICAgICAgICAkVGprcy0+SklUb1FtbUlGVGtRbSgpLT5KSVRuRVRFZUVzSUFFbEkoKSkgewogICAgICAgICAgICAkZkVURWVFc0lBRWxJID0gJFJwSWh2LT5KSVRvUW1tSUZUa1FtKCktPkpJVG5FVEVlRXNJQUVsSSgpOwoKICAgICAgICAgICAga2kgKCEgc1RoX3NURWhUc191a1RqKCRScElodi0+aWhRbCwgJGZFVEVlRXNJQUVsSSkgJiYgISBzVGhfRlFtVEVrbXMoJFJwSWh2LT5paFFsLCAnLicpKSB7CiAgICAgICAgICAgICAgICAkUnBJaHYtPmloUWwoJGZFVEVlRXNJQUVsSS4nLicuJFJwSWh2LT5paFFsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRScElodjsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFIG1JdSBzSTlJRlQgRlE5cGxtIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2fGxrVklmICAkRlE5cGxtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBFZmZPSTlJRlQoJEZROXBsbSkKICAgIHsKICAgICAgICAkRlE5cGxtcyA9IGtzX0VoaEV2KCRGUTlwbG0pID8gJEZROXBsbSA6IGlwbUZfSklUX0VoSnMoKTsKCiAgICAgICAgaVFoSUVGaiAoJEZROXBsbXMgRXMgJEVzID0+ICRGUTlwbG0pIHsKICAgICAgICAgICAga2kgKGtzX3NUaGttSigkRXMpICYmICRUamtzLT5rc0dwSWh2RWU5SSgkRlE5cGxtKSkgewogICAgICAgICAgICAgICAga2kgKGtzX21wOTkoJFRqa3MtPkZROXBsbXMpKSB7CiAgICAgICAgICAgICAgICAgICAgJFRqa3MtPnNJOUlGVCgkVGprcy0+aWhRbC4nLionKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkVGprcy0+c0k5SUZUT3BlKCRGUTlwbG0sICRFcyk7CiAgICAgICAgICAgIH0gSTlzSSB7CiAgICAgICAgICAgICAgICBraSAoa3NfRWhoRXYoJFRqa3MtPkZROXBsbXMpICYmIGttX0VoaEV2KCRGUTlwbG0sICRUamtzLT5GUTlwbG1zLCBUaHBJKSkgewogICAgICAgICAgICAgICAgICAgIEZRbVRrbXBJOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRUamtzLT5GUTlwbG1zW10gPSAkRlE5cGxtOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiAyUWhGSSBUakkgUnBJaHYgVFEgUW05diBoSVRwaG0gZmtzVGttRlQgaElzcDlUcy4KICAgICAqCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBma3NUa21GVCgpCiAgICB7CiAgICAgICAgJEZROXBsbXMgPSBpcG1GX0pJVF9FaEpzKCk7CgogICAgICAgIGtpIChGUXBtVCgkRlE5cGxtcykgPiB3KSB7CiAgICAgICAgICAgICRUamtzLT5ma3NUa21GVCA9IGtzX0VoaEV2KCRGUTlwbG1zW3ddKSB8fCBrc19lUVE5KCRGUTlwbG1zW3ddKSA/ICRGUTlwbG1zW3ddIDogJEZROXBsbXM7CiAgICAgICAgfSBJOXNJIHsKICAgICAgICAgICAgJFRqa3MtPmZrc1RrbUZUID0gVGhwSTsKICAgICAgICB9CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIE9JVCBUakkgVEVlOUkgdWprRmogVGpJIFJwSWh2IGtzIFRFaEpJVGttSi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfFxBS0F0XG5FVEVlRXNJXEdwSWh2XHJwazlmSWh8XEFLQXRcbkVURWVFc0lcZzlRUnBJbVRccnBrOWZJaHxzVGhrbUogICRURWU5SQogICAgICogQHFFaEVsICBzVGhrbUp8bXA5OSAgJEVzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBpaFFsKCRURWU5SSwgJEVzID0gbXA5OSkKICAgIHsKICAgICAgICBraSAoJFRqa3MtPmtzR3BJaHZFZTlJKCRURWU5SSkpIHsKICAgICAgICAgICAgaElUcGhtICRUamtzLT5paFFsT3BlKCRURWU5SSwgJEVzKTsKICAgICAgICB9CgogICAgICAgICRUamtzLT5paFFsID0gJEVzID8gInskVEVlOUl9IEVzIHskRXN9IiA6ICRURWU5STsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtIGttZklWIGprbVQgVFEgc3BKSklzVCBFIFJwSWh2IGttZklWLgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAka21mSVYKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHBzSUttZklWKCRrbWZJVikKICAgIHsKICAgICAgICAkVGprcy0+a21mSVZTa21UID0gbUl1IEttZklWU2ttVCgnamttVCcsICRrbWZJVik7CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSBrbWZJViBqa21UIFRRIGlRaEZJIEUgUnBJaHYga21mSVYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRrbWZJVgogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gaVFoRklLbWZJVigka21mSVYpCiAgICB7CiAgICAgICAgJFRqa3MtPmttZklWU2ttVCA9IG1JdSBLbWZJVlNrbVQoJ2lRaEZJJywgJGttZklWKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtIGttZklWIGprbVQgVFEga0ptUWhJIEUgUnBJaHYga21mSVYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRrbWZJVgogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0ga0ptUWhJS21mSVYoJGttZklWKQogICAgewogICAgICAgICRUamtzLT5rbWZJVlNrbVQgPSBtSXUgS21mSVZTa21UKCdrSm1RaEknLCAka21mSVYpOwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBMUWttIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRURWU5SQogICAgICogQHFFaEVsICBcbzlRc3BoSXxcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRpa2hzVAogICAgICogQHFFaEVsICBzVGhrbUp8bXA5OSAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSnxtcDk5ICAkc0lGUW1mCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJFR2cUkKICAgICAqIEBxRWhFbCAgZVFROSAgJHVqSWhJCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBMUWttKCRURWU5SSwgJGlraHNULCAkUXFJaEVUUWggPSBtcDk5LCAkc0lGUW1mID0gbXA5OSwgJFR2cUkgPSAna21tSWgnLCAkdWpJaEkgPSBpRTlzSSkKICAgIHsKICAgICAgICAkTFFrbSA9ICRUamtzLT5tSXVEUWttbzlFcHNJKCRUamtzLCAkVHZxSSwgJFRFZTlJKTsKCiAgICAgICAgKysgS2kgVGpJIGlraHNUICJGUTlwbG0iIFFpIFRqSSBMUWttIGtzIGhJRTk5diBFIG85UXNwaEkga21zVEVtRkkgVGpJIGZJVUk5UXFJaAogICAgICAgICsrIGtzIFRodmttSiBUUSBlcGs5ZiBFIExRa20gdWtUaiBFIEZRbHE5SVYgIlFtIiBGOUVwc0kgRlFtVEVrbWttSiBsUWhJIFRqRW0KICAgICAgICArKyBRbUkgRlFtZmtUa1FtLCBzUSB1SSc5OSBFZmYgVGpJIExRa20gRW1mIEZFOTkgRSBvOVFzcGhJIHVrVGogVGpJIFJwSWh2LgogICAgICAgIGtpICgkaWtoc1Qga21zVEVtRklRaSBvOVFzcGhJKSB7CiAgICAgICAgICAgICRpa2hzVCgkTFFrbSk7CgogICAgICAgICAgICAkVGprcy0+TFFrbXNbXSA9ICRMUWttOwoKICAgICAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJExRa20tPkpJVHJrbWZrbUpzKCksICdMUWttJyk7CiAgICAgICAgfQoKICAgICAgICArKyBLaSBUakkgRlE5cGxtIGtzIHNrbHE5diBFIHNUaGttSiwgdUkgRkVtIEVzc3BsSSBUakkgTFFrbSBza2xxOXYgakVzIEUgZUVza0YKICAgICAgICArKyAiUW0iIEY5RXBzSSB1a1RqIEUgc2ttSjlJIEZRbWZrVGtRbS4gT1EgdUkgdWs5OSBMcHNUIGVwazlmIFRqSSBMUWttIHVrVGoKICAgICAgICArKyBUamtzIHNrbHE5SSBMUWttIEY5RXBzSXMgRVRURUZqSWYgVFEga1QuIEhqSWhJIGtzIG1RVCBFIExRa20gRkU5OWVFRjguCiAgICAgICAgSTlzSSB7CiAgICAgICAgICAgICRsSVRqUWYgPSAkdWpJaEkgPyAndWpJaEknIDogJ1FtJzsKCiAgICAgICAgICAgICRUamtzLT5MUWttc1tdID0gJExRa20tPiRsSVRqUWYoJGlraHNULCAkUXFJaEVUUWgsICRzSUZRbWYpOwoKICAgICAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJExRa20tPkpJVHJrbWZrbUpzKCksICdMUWttJyk7CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSAiTFFrbSB1akloSSIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJFRFZTlJCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJGlraHNUCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJHNJRlFtZgogICAgICogQHFFaEVsICBzVGhrbUogICRUdnFJCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBMUWttYmpJaEkoJFRFZTlJLCAkaWtoc1QsICRRcUloRVRRaCwgJHNJRlFtZiwgJFR2cUkgPSAna21tSWgnKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+TFFrbSgkVEVlOUksICRpa2hzVCwgJFFxSWhFVFFoLCAkc0lGUW1mLCAkVHZxSSwgVGhwSSk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBzcGVScElodiBMUWttIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZklofFxBS0F0XG5FVEVlRXNJXGc5UVJwSW1UXHJwazlmSWh8c1Roa21KICAkUnBJaHYKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRXMKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8XEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkaWtoc1QKICAgICAqIEBxRWhFbCAgc1Roa21KfG1wOTkgICRRcUloRVRRaAogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUp8bXA5OSAgJHNJRlFtZgogICAgICogQHFFaEVsICBzVGhrbUogICRUdnFJCiAgICAgKiBAcUVoRWwgIGVRUTkgICR1akloSQogICAgICogQGhJVHBobSAkVGprcwogICAgICoKICAgICAqIEBUamhRdXMgXEttVUU5a2Z0aEpwbEltVGdWRklxVGtRbQogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gTFFrbU9wZSgkUnBJaHYsICRFcywgJGlraHNULCAkUXFJaEVUUWggPSBtcDk5LCAkc0lGUW1mID0gbXA5OSwgJFR2cUkgPSAna21tSWgnLCAkdWpJaEkgPSBpRTlzSSkKICAgIHsKICAgICAgICBbJFJwSWh2LCAkZWttZmttSnNdID0gJFRqa3MtPkZoSUVUSU9wZSgkUnBJaHYpOwoKICAgICAgICAkSVZxaElzc2tRbSA9ICcoJy4kUnBJaHYuJykgRXMgJy4kVGprcy0+SmhFbGxFaC0+dWhFcUhFZTlJKCRFcyk7CgogICAgICAgICRUamtzLT5FZmZya21ma21KKCRla21ma21KcywgJ0xRa20nKTsKCiAgICAgICAgaElUcGhtICRUamtzLT5MUWttKG1JdSBnVnFoSXNza1FtKCRJVnFoSXNza1FtKSwgJGlraHNULCAkUXFJaEVUUWgsICRzSUZRbWYsICRUdnFJLCAkdWpJaEkpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgOUVUSWhFOSBMUWttIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZklofFxBS0F0XG5FVEVlRXNJXGc5UVJwSW1UXHJwazlmSWh8c1Roa21KICAkUnBJaHYKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRXMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkVHZxSQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gTFFrbTZFVEloRTkoJFJwSWh2LCBzVGhrbUogJEVzLCBzVGhrbUogJFR2cUkgPSAna21tSWgnKQogICAgewogICAgICAgIFskUnBJaHYsICRla21ma21Kc10gPSAkVGprcy0+RmhJRVRJT3BlKCRScElodik7CgogICAgICAgICRJVnFoSXNza1FtID0gJygnLiRScElodi4nKSBFcyAnLiRUamtzLT5KaEVsbEVoLT51aEVxSEVlOUkoJEVzKTsKCiAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJGVrbWZrbUpzLCAnTFFrbScpOwoKICAgICAgICAkVGprcy0+TFFrbXNbXSA9ICRUamtzLT5tSXVEUWttNkVUSWhFOW85RXBzSSgkVGprcywgJFR2cUksIG1JdSBnVnFoSXNza1FtKCRJVnFoSXNza1FtKSk7CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFIDlFVEloRTkgOUlpVCBMUWttIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfFxBS0F0XG5FVEVlRXNJXEdwSWh2XHJwazlmSWh8XEFLQXRcbkVURWVFc0lcZzlRUnBJbVRccnBrOWZJaHxzVGhrbUogICRScElodgogICAgICogQHFFaEVsICBzVGhrbUogICRFcwogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gOUlpVERRa202RVRJaEU5KCRScElodiwgc1Roa21KICRFcykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPkxRa202RVRJaEU5KCRScElodiwgJEVzLCAnOUlpVCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgOUlpVCBMUWttIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJFRFZTlJCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJGlraHNUCiAgICAgKiBAcUVoRWwgIHNUaGttSnxtcDk5ICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KfG1wOTkgICRzSUZRbWYKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIDlJaVREUWttKCRURWU5SSwgJGlraHNULCAkUXFJaEVUUWggPSBtcDk5LCAkc0lGUW1mID0gbXA5OSkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPkxRa20oJFRFZTlJLCAkaWtoc1QsICRRcUloRVRRaCwgJHNJRlFtZiwgJzlJaVQnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJMUWttIHVqSWhJIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkVEVlOUkKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8XEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkaWtoc1QKICAgICAqIEBxRWhFbCAgc1Roa21KICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KfG1wOTkgICRzSUZRbWYKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIDlJaVREUWttYmpJaEkoJFRFZTlJLCAkaWtoc1QsICRRcUloRVRRaCwgJHNJRlFtZikKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPkxRa21iakloSSgkVEVlOUksICRpa2hzVCwgJFFxSWhFVFFoLCAkc0lGUW1mLCAnOUlpVCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgc3BlUnBJaHYgOUlpVCBMUWttIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfFxBS0F0XG5FVEVlRXNJXEdwSWh2XHJwazlmSWh8XEFLQXRcbkVURWVFc0lcZzlRUnBJbVRccnBrOWZJaHxzVGhrbUogICRScElodgogICAgICogQHFFaEVsICBzVGhrbUogICRFcwogICAgICogQHFFaEVsICBcbzlRc3BoSXxcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRpa2hzVAogICAgICogQHFFaEVsICBzVGhrbUp8bXA5OSAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSnxtcDk5ICAkc0lGUW1mCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSA5SWlURFFrbU9wZSgkUnBJaHYsICRFcywgJGlraHNULCAkUXFJaEVUUWggPSBtcDk5LCAkc0lGUW1mID0gbXA5OSkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPkxRa21PcGUoJFJwSWh2LCAkRXMsICRpa2hzVCwgJFFxSWhFVFFoLCAkc0lGUW1mLCAnOUlpVCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgaGtKalQgTFFrbSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRURWU5SQogICAgICogQHFFaEVsICBcbzlRc3BoSXxzVGhrbUogICRpa2hzVAogICAgICogQHFFaEVsICBzVGhrbUp8bXA5OSAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSnxtcDk5ICAkc0lGUW1mCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBoa0pqVERRa20oJFRFZTlJLCAkaWtoc1QsICRRcUloRVRRaCA9IG1wOTksICRzSUZRbWYgPSBtcDk5KQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+TFFrbSgkVEVlOUksICRpa2hzVCwgJFFxSWhFVFFoLCAkc0lGUW1mLCAnaGtKalQnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJoa0pqVCBMUWttIHVqSWhJIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkVEVlOUkKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8XEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkaWtoc1QKICAgICAqIEBxRWhFbCAgc1Roa21KICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkc0lGUW1mCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBoa0pqVERRa21iakloSSgkVEVlOUksICRpa2hzVCwgJFFxSWhFVFFoLCAkc0lGUW1mKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+TFFrbWJqSWhJKCRURWU5SSwgJGlraHNULCAkUXFJaEVUUWgsICRzSUZRbWYsICdoa0pqVCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgc3BlUnBJaHYgaGtKalQgTFFrbSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZklofFxBS0F0XG5FVEVlRXNJXGc5UVJwSW1UXHJwazlmSWh8c1Roa21KICAkUnBJaHYKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRXMKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8XEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkaWtoc1QKICAgICAqIEBxRWhFbCAgc1Roa21KfG1wOTkgICRRcUloRVRRaAogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUp8bXA5OSAgJHNJRlFtZgogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gaGtKalREUWttT3BlKCRScElodiwgJEVzLCAkaWtoc1QsICRRcUloRVRRaCA9IG1wOTksICRzSUZRbWYgPSBtcDk5KQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+TFFrbU9wZSgkUnBJaHYsICRFcywgJGlraHNULCAkUXFJaEVUUWgsICRzSUZRbWYsICdoa0pqVCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgIkZoUXNzIExRa20iIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRURWU5SQogICAgICogQHFFaEVsICBcbzlRc3BoSXxcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUp8bXA5OSAgJGlraHNUCiAgICAgKiBAcUVoRWwgIHNUaGttSnxtcDk5ICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KfG1wOTkgICRzSUZRbWYKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIEZoUXNzRFFrbSgkVEVlOUksICRpa2hzVCA9IG1wOTksICRRcUloRVRRaCA9IG1wOTksICRzSUZRbWYgPSBtcDk5KQogICAgewogICAgICAgIGtpICgkaWtoc1QpIHsKICAgICAgICAgICAgaElUcGhtICRUamtzLT5MUWttKCRURWU5SSwgJGlraHNULCAkUXFJaEVUUWgsICRzSUZRbWYsICdGaFFzcycpOwogICAgICAgIH0KCiAgICAgICAgJFRqa3MtPkxRa21zW10gPSAkVGprcy0+bUl1RFFrbW85RXBzSSgkVGprcywgJ0ZoUXNzJywgJFRFZTlJKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgc3BlUnBJaHYgRmhRc3MgTFFrbSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZklofFxBS0F0XG5FVEVlRXNJXGc5UVJwSW1UXHJwazlmSWh8c1Roa21KICAkUnBJaHYKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRXMKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIEZoUXNzRFFrbU9wZSgkUnBJaHYsICRFcykKICAgIHsKICAgICAgICBbJFJwSWh2LCAkZWttZmttSnNdID0gJFRqa3MtPkZoSUVUSU9wZSgkUnBJaHYpOwoKICAgICAgICAkSVZxaElzc2tRbSA9ICcoJy4kUnBJaHYuJykgRXMgJy4kVGprcy0+SmhFbGxFaC0+dWhFcUhFZTlJKCRFcyk7CgogICAgICAgICRUamtzLT5FZmZya21ma21KKCRla21ma21KcywgJ0xRa20nKTsKCiAgICAgICAgJFRqa3MtPkxRa21zW10gPSAkVGprcy0+bUl1RFFrbW85RXBzSSgkVGprcywgJ0ZoUXNzJywgbUl1IGdWcWhJc3NrUW0oJElWcWhJc3NrUW0pKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogMElUIEUgbUl1IExRa20gRjlFcHNJLgogICAgICoKICAgICAqIEBxRWhFbCAgXEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaCAgJHFFaEltVEdwSWh2CiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJFR2cUkKICAgICAqIEBxRWhFbCAgc1Roa21KICAkVEVlOUkKICAgICAqIEBoSVRwaG0gXEFLQXRcbkVURWVFc0lcR3BJaHZcRFFrbW85RXBzSQogICAgICorCiAgICBxaFFUSUZUSWYgaXBtRlRrUW0gbUl1RFFrbW85RXBzSShzSTlpICRxRWhJbVRHcElodiwgJFR2cUksICRURWU5SSkKICAgIHsKICAgICAgICBoSVRwaG0gbUl1IERRa21vOUVwc0koJHFFaEltVEdwSWh2LCAkVHZxSSwgJFRFZTlJKTsKICAgIH0KCiAgICArKioKICAgICAqIDBJVCBFIG1JdSBMUWttIDlFVEloRTkgRjlFcHNJLgogICAgICoKICAgICAqIEBxRWhFbCAgXEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaCAgJHFFaEltVEdwSWh2CiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJFR2cUkKICAgICAqIEBxRWhFbCAgc1Roa21KICAkVEVlOUkKICAgICAqIEBoSVRwaG0gXEFLQXRcbkVURWVFc0lcR3BJaHZcRFFrbTZFVEloRTlvOUVwc0kKICAgICAqKwogICAgcWhRVElGVElmIGlwbUZUa1FtIG1JdURRa202RVRJaEU5bzlFcHNJKHNJOWkgJHFFaEltVEdwSWh2LCAkVHZxSSwgJFRFZTlJKQogICAgewogICAgICAgIGhJVHBobSBtSXUgRFFrbTZFVEloRTlvOUVwc0koJHFFaEltVEdwSWh2LCAkVHZxSSwgJFRFZTlJKTsKICAgIH0KCiAgICArKioKICAgICAqIDNJaEpJIEVtIEVoaEV2IFFpIHVqSWhJIEY5RXBzSXMgRW1mIGVrbWZrbUpzLgogICAgICoKICAgICAqIEBxRWhFbCAgRWhoRXYgICR1akloSXMKICAgICAqIEBxRWhFbCAgRWhoRXYgICRla21ma21KcwogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gbEloSkliakloSXMoJHVqSWhJcywgJGVrbWZrbUpzKQogICAgewogICAgICAgICRUamtzLT51akloSXMgPSBFaGhFdl9sSWhKSSgkVGprcy0+dWpJaElzLCAoRWhoRXYpICR1akloSXMpOwoKICAgICAgICAkVGprcy0+ZWttZmttSnNbJ3VqSWhJJ10gPSBFaGhFdl9VRTlwSXMoCiAgICAgICAgICAgIEVoaEV2X2xJaEpJKCRUamtzLT5la21ma21Kc1sndWpJaEknXSwgKEVoaEV2KSAkZWttZmttSnMpCiAgICAgICAgKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgZUVza0YgdWpJaEkgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfHNUaGttSnxFaGhFdnxcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbSAgJEZROXBsbQogICAgICogQHFFaEVsICBsa1ZJZiAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIGxrVklmICAkVUU5cEkKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gdWpJaEkoJEZROXBsbSwgJFFxSWhFVFFoID0gbXA5OSwgJFVFOXBJID0gbXA5OSwgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICBraSAoJEZROXBsbSBrbXNURW1GSVFpIG9RbWZrVGtRbWdWcWhJc3NrUW0pIHsKICAgICAgICAgICAgJFR2cUkgPSAnZ1ZxaElzc2tRbSc7CgogICAgICAgICAgICAkVGprcy0+dWpJaElzW10gPSBGUWxxRUZUKCdUdnFJJywgJ0ZROXBsbScsICdlUVE5SUVtJyk7CgogICAgICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICAgICAgfQoKICAgICAgICArKyBLaSBUakkgRlE5cGxtIGtzIEVtIEVoaEV2LCB1SSB1azk5IEVzc3BsSSBrVCBrcyBFbSBFaGhFdiBRaSA4SXYtVUU5cEkgcUVraHMKICAgICAgICArKyBFbWYgRkVtIEVmZiBUaklsIElFRmogRXMgRSB1akloSSBGOUVwc0kuIGJJIHVrOTkgbEVrbVRFa20gVGpJIGVRUTlJRW0gdUkKICAgICAgICArKyBoSUZJa1VJZiB1akltIFRqSSBsSVRqUWYgdUVzIEZFOTlJZiBFbWYgcUVzcyBrVCBrbVRRIFRqSSBtSXNUSWYgdWpJaEkuCiAgICAgICAga2kgKGtzX0VoaEV2KCRGUTlwbG0pKSB7CiAgICAgICAgICAgIGhJVHBobSAkVGprcy0+RWZmdGhoRXZNaWJqSWhJcygkRlE5cGxtLCAkZVFROUlFbSk7CiAgICAgICAgfQoKICAgICAgICArKyBTSWhJIHVJIHVrOTkgbEU4SSBzUWxJIEVzc3BscVRrUW1zIEVlUXBUIFRqSSBRcUloRVRRaC4gS2kgUW05diB4IFVFOXBJcyBFaEkKICAgICAgICArKyBxRXNzSWYgVFEgVGpJIGxJVGpRZiwgdUkgdWs5OSBFc3NwbEkgVGpFVCBUakkgUXFJaEVUUWgga3MgRW0gSVJwRTlzIHNrSm0KICAgICAgICArKyBFbWYgOElJcSBKUWttSi4gTVRqSWh1a3NJLCB1SSc5OSBoSVJwa2hJIFRqSSBRcUloRVRRaCBUUSBlSSBxRXNzSWYga20uCiAgICAgICAgWyRVRTlwSSwgJFFxSWhFVFFoXSA9ICRUamtzLT5xaElxRWhJQkU5cEl0bWZNcUloRVRRaCgKICAgICAgICAgICAgJFVFOXBJLCAkUXFJaEVUUWgsIGlwbUZfbXBsX0VoSnMoKSA9PT0geAogICAgICAgICk7CgogICAgICAgICsrIEtpIFRqSSBGUTlwbG0ga3MgRUZUcEU5OXYgRSBvOVFzcGhJIGttc1RFbUZJLCB1SSB1azk5IEVzc3BsSSBUakkgZklVSTlRcUloCiAgICAgICAgKysgdUVtVHMgVFEgZUlKa20gRSBtSXNUSWYgdWpJaEkgc1RFVElsSW1UIHVqa0ZqIGtzIHVoRXFxSWYga20gcUVoSW1UaklzSXMuCiAgICAgICAgKysgYkkgdWs5OSBFZmYgVGpFVCBvOVFzcGhJIFRRIFRqSSBScElodiBFbWYgaElUcGhtIGVFRjggUXBUIGtsbElma0VUSTl2LgogICAgICAgIGtpICgkRlE5cGxtIGttc1RFbUZJUWkgbzlRc3BoSSAmJiBrc19tcDk5KCRRcUloRVRRaCkpIHsKICAgICAgICAgICAgaElUcGhtICRUamtzLT51akloSUFJc1RJZigkRlE5cGxtLCAkZVFROUlFbSk7CiAgICAgICAgfQoKICAgICAgICArKyBLaSBUakkgRlE5cGxtIGtzIEUgbzlRc3BoSSBrbXNURW1GSSBFbWYgVGpJaEkga3MgRW0gUXFJaEVUUWggVUU5cEksIHVJIHVrOTkKICAgICAgICArKyBFc3NwbEkgVGpJIGZJVUk5UXFJaCB1RW1UcyBUUSBocG0gRSBzcGVScElodiBFbWYgVGpJbSBGUWxxRWhJIFRqSSBoSXNwOVQKICAgICAgICArKyBRaSBUakVUIHNwZVJwSWh2IHVrVGogVGpJIEprVUltIFVFOXBJIFRqRVQgdUVzIHFoUVVrZklmIFRRIFRqSSBsSVRqUWYuCiAgICAgICAga2kgKCRUamtzLT5rc0dwSWh2RWU5SSgkRlE5cGxtKSAmJiAhIGtzX21wOTkoJFFxSWhFVFFoKSkgewogICAgICAgICAgICBbJHNwZSwgJGVrbWZrbUpzXSA9ICRUamtzLT5GaElFVElPcGUoJEZROXBsbSk7CgogICAgICAgICAgICBoSVRwaG0gJFRqa3MtPkVmZnJrbWZrbUooJGVrbWZrbUpzLCAndWpJaEknKQogICAgICAgICAgICAgICAgLT51akloSShtSXUgZ1ZxaElzc2tRbSgnKCcuJHNwZS4nKScpLCAkUXFJaEVUUWgsICRVRTlwSSwgJGVRUTlJRW0pOwogICAgICAgIH0KCiAgICAgICAgKysgS2kgVGpJIEprVUltIFFxSWhFVFFoIGtzIG1RVCBpUXBtZiBrbSBUakkgOWtzVCBRaSBVRTlrZiBRcUloRVRRaHMgdUkgdWs5OQogICAgICAgICsrIEVzc3BsSSBUakVUIFRqSSBmSVVJOVFxSWgga3MgTHBzVCBzalFoVC1GcFRUa21KIFRqSSAnPScgUXFJaEVUUWhzIEVtZgogICAgICAgICsrIHVJIHVrOTkgc0lUIFRqSSBRcUloRVRRaHMgVFEgJz0nIEVtZiBzSVQgVGpJIFVFOXBJcyBFcXFoUXFoa0VUSTl2LgogICAgICAgIGtpICgkVGprcy0+a21VRTlrZk1xSWhFVFFoKCRRcUloRVRRaCkpIHsKICAgICAgICAgICAgWyRVRTlwSSwgJFFxSWhFVFFoXSA9IFskUXFJaEVUUWgsICc9J107CiAgICAgICAgfQoKICAgICAgICArKyBLaSBUakkgVUU5cEkga3MgRSBvOVFzcGhJLCBrVCBsSUVtcyBUakkgZklVSTlRcUloIGtzIHFJaGlRaGxrbUogRW0gSW1Ua2hJCiAgICAgICAgKysgc3BlLXNJOUlGVCB1a1Rqa20gVGpJIFJwSWh2IEVtZiB1SSB1azk5IG1JSWYgVFEgRlFscWs5SSBUakkgc3BlLXNJOUlGVAogICAgICAgICsrIHVrVGprbSBUakkgdWpJaEkgRjlFcHNJIFRRIEpJVCBUakkgRXFxaFFxaGtFVEkgUnBJaHYgaElGUWhmIGhJc3A5VHMuCiAgICAgICAga2kgKCRUamtzLT5rc0dwSWh2RWU5SSgkVUU5cEkpKSB7CiAgICAgICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElPcGUoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICRlUVE5SUVtKTsKICAgICAgICB9CgogICAgICAgICsrIEtpIFRqSSBVRTlwSSBrcyAibXA5OSIsIHVJIHVrOTkgTHBzVCBFc3NwbEkgVGpJIGZJVUk5UXFJaCB1RW1UcyBUUSBFZmYgRQogICAgICAgICsrIHVqSWhJIG1wOTkgRjlFcHNJIFRRIFRqSSBScElodi4gT1EsIHVJIHVrOTkgRTk5UXUgRSBzalFoVC1GcFQgakloSSBUUQogICAgICAgICsrIFRqRVQgbElUalFmIGlRaCBGUW1VSW1rSW1GSSBzUSBUakkgZklVSTlRcUloIGZRSXNtJ1QgakVVSSBUUSBGaklGOC4KICAgICAgICBraSAoa3NfbXA5OSgkVUU5cEkpKSB7CiAgICAgICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElBcDk5KCRGUTlwbG0sICRlUVE5SUVtLCAkUXFJaEVUUWggIT09ICc9Jyk7CiAgICAgICAgfQoKICAgICAgICAkVHZxSSA9ICdyRXNrRic7CgogICAgICAgICRGUTlwbG1PVGhrbUogPSAoJEZROXBsbSBrbXNURW1GSVFpIGdWcWhJc3NrUW1vUW1UaEVGVCkKICAgICAgICAgICAgPyAkVGprcy0+SmhFbGxFaC0+SklUQkU5cEkoJEZROXBsbSkKICAgICAgICAgICAgOiAkRlE5cGxtOwoKICAgICAgICArKyBLaSBUakkgRlE5cGxtIGtzIGxFOGttSiBFIERPTUEgaElpSWhJbUZJIHVJJzk5IEZqSUY4IFRRIHNJSSBraSBUakkgVUU5cEkKICAgICAgICArKyBrcyBFIGVRUTlJRW0uIEtpIGtUIGtzLCB1SSc5OSBFZmYgVGpJIGhFdSBlUVE5SUVtIHNUaGttSiBFcyBFbSBFRlRwRTkKICAgICAgICArKyBVRTlwSSBUUSBUakkgUnBJaHYgVFEgSW1zcGhJIFRqa3Mga3MgcWhRcUloOXYgakVtZjlJZiBldiBUakkgUnBJaHYuCiAgICAgICAga2kgKHNUaF9GUW1URWttcygkRlE5cGxtT1Roa21KLCAnLT4nKSAmJiBrc19lUVE5KCRVRTlwSSkpIHsKICAgICAgICAgICAgJFVFOXBJID0gbUl1IGdWcWhJc3NrUW0oJFVFOXBJID8gJ1RocEknIDogJ2lFOXNJJyk7CgogICAgICAgICAgICBraSAoa3Nfc1Roa21KKCRGUTlwbG0pKSB7CiAgICAgICAgICAgICAgICAkVHZxSSA9ICdEc1FtclFROUlFbSc7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGtpICgkVGprcy0+a3Nya1R1a3NJTXFJaEVUUWgoJFFxSWhFVFFoKSkgewogICAgICAgICAgICAkVHZxSSA9ICdya1R1a3NJJzsKICAgICAgICB9CgogICAgICAgICsrIEFRdSBUakVUIHVJIEVoSSB1UWg4a21KIHVrVGogTHBzVCBFIHNrbHE5SSBScElodiB1SSBGRW0gcXBUIFRqSSBJOUlsSW1UcwogICAgICAgICsrIGttIFFwaCBFaGhFdiBFbWYgRWZmIFRqSSBScElodiBla21ma21KIFRRIFFwaCBFaGhFdiBRaSBla21ma21KcyBUakVUCiAgICAgICAgKysgdWs5OSBlSSBlUXBtZiBUUSBJRUZqIE9HNiBzVEVUSWxJbVRzIHVqSW0ga1Qga3MgaWttRTk5diBJVklGcFRJZi4KICAgICAgICAkVGprcy0+dWpJaElzW10gPSBGUWxxRUZUKAogICAgICAgICAgICAnVHZxSScsICdGUTlwbG0nLCAnUXFJaEVUUWgnLCAnVUU5cEknLCAnZVFROUlFbScKICAgICAgICApOwoKICAgICAgICBraSAoISAkVUU5cEkga21zVEVtRklRaSBnVnFoSXNza1Ftb1FtVGhFRlQpIHsKICAgICAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJFRqa3MtPmk5RVRUSW1CRTlwSSgkVUU5cEkpLCAndWpJaEknKTsKICAgICAgICB9CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSBFaGhFdiBRaSB1akloSSBGOUVwc0lzIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBxRWhFbCAgc1Roa21KICAkbElUalFmCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFoUVRJRlRJZiBpcG1GVGtRbSBFZmZ0aGhFdk1pYmpJaElzKCRGUTlwbG0sICRlUVE5SUVtLCAkbElUalFmID0gJ3VqSWhJJykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJQUlzVElmKGlwbUZUa1FtICgkUnBJaHYpIHBzSSAoJEZROXBsbSwgJGxJVGpRZiwgJGVRUTlJRW0pIHsKICAgICAgICAgICAgaVFoSUVGaiAoJEZROXBsbSBFcyAkOEl2ID0+ICRVRTlwSSkgewogICAgICAgICAgICAgICAga2kgKGtzX21wbEloa0YoJDhJdikgJiYga3NfRWhoRXYoJFVFOXBJKSkgewogICAgICAgICAgICAgICAgICAgICRScElodi0+eyRsSVRqUWZ9KC4uLkVoaEV2X1VFOXBJcygkVUU5cEkpKTsKICAgICAgICAgICAgICAgIH0gSTlzSSB7CiAgICAgICAgICAgICAgICAgICAgJFJwSWh2LT57JGxJVGpRZn0oJDhJdiwgJz0nLCAkVUU5cEksICRlUVE5SUVtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sICRlUVE5SUVtKTsKICAgIH0KCiAgICArKioKICAgICAqIGFoSXFFaEkgVGpJIFVFOXBJIEVtZiBRcUloRVRRaCBpUWggRSB1akloSSBGOUVwc0kuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRVRTlwSQogICAgICogQHFFaEVsICBzVGhrbUogICRRcUloRVRRaAogICAgICogQHFFaEVsICBlUVE5ICAkcHNJbklpRXA5VAogICAgICogQGhJVHBobSBFaGhFdgogICAgICoKICAgICAqIEBUamhRdXMgXEttVUU5a2Z0aEpwbEltVGdWRklxVGtRbQogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gcWhJcUVoSUJFOXBJdG1mTXFJaEVUUWgoJFVFOXBJLCAkUXFJaEVUUWgsICRwc0luSWlFcDlUID0gaUU5c0kpCiAgICB7CiAgICAgICAga2kgKCRwc0luSWlFcDlUKSB7CiAgICAgICAgICAgIGhJVHBobSBbJFFxSWhFVFFoLCAnPSddOwogICAgICAgIH0gSTlzSWtpICgkVGprcy0+a21VRTlrZk1xSWhFVFFodG1mQkU5cEkoJFFxSWhFVFFoLCAkVUU5cEkpKSB7CiAgICAgICAgICAgIFRqaFF1IG1JdSBLbVVFOWtmdGhKcGxJbVRnVkZJcVRrUW0oJ0s5OUlKRTkgUXFJaEVUUWggRW1mIFVFOXBJIEZRbGVrbUVUa1FtLicpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtIFskVUU5cEksICRRcUloRVRRaF07CiAgICB9CgogICAgKyoqCiAgICAgKiBuSVRJaGxrbUkga2kgVGpJIEprVUltIFFxSWhFVFFoIEVtZiBVRTlwSSBGUWxla21FVGtRbSBrcyA5SUpFOS4KICAgICAqCiAgICAgKiBhaElVSW1UcyBwc2ttSiBBcDk5IFVFOXBJcyB1a1RqIGttVUU5a2YgUXFJaEVUUWhzLgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgbGtWSWYgICRVRTlwSQogICAgICogQGhJVHBobSBlUVE5CiAgICAgKisKICAgIHFoUVRJRlRJZiBpcG1GVGtRbSBrbVVFOWtmTXFJaEVUUWh0bWZCRTlwSSgkUXFJaEVUUWgsICRVRTlwSSkKICAgIHsKICAgICAgICBoSVRwaG0ga3NfbXA5OSgkVUU5cEkpICYmIGttX0VoaEV2KCRRcUloRVRRaCwgJFRqa3MtPlFxSWhFVFFocykgJiYKICAgICAgICAgICAgICEga21fRWhoRXYoJFFxSWhFVFFoLCBbJz0nLCAnPD4nLCAnIT0nXSk7CiAgICB9CgogICAgKyoqCiAgICAgKiBuSVRJaGxrbUkga2kgVGpJIEprVUltIFFxSWhFVFFoIGtzIHNwcXFRaFRJZi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJFFxSWhFVFFoCiAgICAgKiBAaElUcGhtIGVRUTkKICAgICAqKwogICAgcWhRVElGVElmIGlwbUZUa1FtIGttVUU5a2ZNcUloRVRRaCgkUXFJaEVUUWgpCiAgICB7CiAgICAgICAgaElUcGhtICEga3Nfc1Roa21KKCRRcUloRVRRaCkgfHwgKCEga21fRWhoRXYoc1RoVFE5UXVJaCgkUXFJaEVUUWgpLCAkVGprcy0+UXFJaEVUUWhzLCBUaHBJKSAmJgogICAgICAgICAgICAgICAhIGttX0VoaEV2KHNUaFRROVF1SWgoJFFxSWhFVFFoKSwgJFRqa3MtPkpoRWxsRWgtPkpJVE1xSWhFVFFocygpLCBUaHBJKSk7CiAgICB9CgogICAgKyoqCiAgICAgKiBuSVRJaGxrbUkga2kgVGpJIFFxSWhFVFFoIGtzIEUgZWtUdWtzSSBRcUloRVRRaC4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJFFxSWhFVFFoCiAgICAgKiBAaElUcGhtIGVRUTkKICAgICAqKwogICAgcWhRVElGVElmIGlwbUZUa1FtIGtzcmtUdWtzSU1xSWhFVFFoKCRRcUloRVRRaCkKICAgIHsKICAgICAgICBoSVRwaG0ga21fRWhoRXYoc1RoVFE5UXVJaCgkUXFJaEVUUWgpLCAkVGprcy0+ZWtUdWtzSU1xSWhFVFFocywgVGhwSSkgfHwKICAgICAgICAgICAgICAga21fRWhoRXYoc1RoVFE5UXVJaCgkUXFJaEVUUWgpLCAkVGprcy0+SmhFbGxFaC0+SklUcmtUdWtzSU1xSWhFVFFocygpLCBUaHBJKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSAiUWggdWpJaEkiIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxzVGhrbUp8RWhoRXZ8XEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW0gICRGUTlwbG0KICAgICAqIEBxRWhFbCAgbGtWSWYgICRRcUloRVRRaAogICAgICogQHFFaEVsICBsa1ZJZiAgJFVFOXBJCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJKCRGUTlwbG0sICRRcUloRVRRaCA9IG1wOTksICRVRTlwSSA9IG1wOTkpCiAgICB7CiAgICAgICAgWyRVRTlwSSwgJFFxSWhFVFFoXSA9ICRUamtzLT5xaElxRWhJQkU5cEl0bWZNcUloRVRRaCgKICAgICAgICAgICAgJFVFOXBJLCAkUXFJaEVUUWgsIGlwbUZfbXBsX0VoSnMoKSA9PT0geAogICAgICAgICk7CgogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaEkoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgZUVza0YgInVqSWhJIG1RVCIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfHNUaGttSnxFaGhFdnxcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbSAgJEZROXBsbQogICAgICogQHFFaEVsICBsa1ZJZiAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIGxrVklmICAkVUU5cEkKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gdWpJaElBUVQoJEZROXBsbSwgJFFxSWhFVFFoID0gbXA5OSwgJFVFOXBJID0gbXA5OSwgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICBraSAoa3NfRWhoRXYoJEZROXBsbSkpIHsKICAgICAgICAgICAgaElUcGhtICRUamtzLT51akloSUFJc1RJZihpcG1GVGtRbSAoJFJwSWh2KSBwc0kgKCRGUTlwbG0sICRRcUloRVRRaCwgJFVFOXBJLCAkZVFROUlFbSkgewogICAgICAgICAgICAgICAgJFJwSWh2LT51akloSSgkRlE5cGxtLCAkUXFJaEVUUWgsICRVRTlwSSwgJGVRUTlJRW0pOwogICAgICAgICAgICB9LCAkZVFROUlFbS4nIG1RVCcpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzLT51akloSSgkRlE5cGxtLCAkUXFJaEVUUWgsICRVRTlwSSwgJGVRUTlJRW0uJyBtUVQnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSAiUWggdWpJaEkgbVFUIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8c1Roa21KfEVoaEV2fFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIGxrVklmICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgbGtWSWYgICRVRTlwSQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhiakloSUFRVCgkRlE5cGxtLCAkUXFJaEVUUWggPSBtcDk5LCAkVUU5cEkgPSBtcDk5KQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElBUVQoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgInVqSWhJIiBGOUVwc0kgRlFscUVoa21KIFR1USBGUTlwbG1zIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSnxFaGhFdiAgJGlraHNUCiAgICAgKiBAcUVoRWwgIHNUaGttSnxtcDk5ICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgc1Roa21KfG1wOTkgICRzSUZRbWYKICAgICAqIEBxRWhFbCAgc1Roa21KfG1wOTkgICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSW9ROXBsbSgkaWtoc1QsICRRcUloRVRRaCA9IG1wOTksICRzSUZRbWYgPSBtcDk5LCAkZVFROUlFbSA9ICdFbWYnKQogICAgewogICAgICAgICsrIEtpIFRqSSBGUTlwbG0ga3MgRW0gRWhoRXYsIHVJIHVrOTkgRXNzcGxJIGtUIGtzIEVtIEVoaEV2IFFpIDhJdi1VRTlwSSBxRWtocwogICAgICAgICsrIEVtZiBGRW0gRWZmIFRqSWwgSUVGaiBFcyBFIHVqSWhJIEY5RXBzSS4gYkkgdWs5OSBsRWttVEVrbSBUakkgZVFROUlFbSB1SQogICAgICAgICsrIGhJRklrVUlmIHVqSW0gVGpJIGxJVGpRZiB1RXMgRkU5OUlmIEVtZiBxRXNzIGtUIGttVFEgVGpJIG1Jc1RJZiB1akloSS4KICAgICAgICBraSAoa3NfRWhoRXYoJGlraHNUKSkgewogICAgICAgICAgICBoSVRwaG0gJFRqa3MtPkVmZnRoaEV2TWliakloSXMoJGlraHNULCAkZVFROUlFbSwgJ3VqSWhJb1E5cGxtJyk7CiAgICAgICAgfQoKICAgICAgICArKyBLaSBUakkgSmtVSW0gUXFJaEVUUWgga3MgbVFUIGlRcG1mIGttIFRqSSA5a3NUIFFpIFVFOWtmIFFxSWhFVFFocyB1SSB1azk5CiAgICAgICAgKysgRXNzcGxJIFRqRVQgVGpJIGZJVUk5UXFJaCBrcyBMcHNUIHNqUWhULUZwVFRrbUogVGpJICc9JyBRcUloRVRRaHMgRW1mCiAgICAgICAgKysgdUkgdWs5OSBzSVQgVGpJIFFxSWhFVFFocyBUUSAnPScgRW1mIHNJVCBUakkgVUU5cElzIEVxcWhRcWhrRVRJOXYuCiAgICAgICAga2kgKCRUamtzLT5rbVVFOWtmTXFJaEVUUWgoJFFxSWhFVFFoKSkgewogICAgICAgICAgICBbJHNJRlFtZiwgJFFxSWhFVFFoXSA9IFskUXFJaEVUUWgsICc9J107CiAgICAgICAgfQoKICAgICAgICArKyAya21FOTl2LCB1SSB1azk5IEVmZiBUamtzIHVqSWhJIEY5RXBzSSBrbVRRIFRqa3MgRWhoRXYgUWkgRjlFcHNJcyBUakVUIHVJCiAgICAgICAgKysgRWhJIGVwazlma21KIGlRaCBUakkgUnBJaHYuIHQ5OSBRaSBUaklsIHVrOTkgZUkgRlFscWs5SWYgVWtFIEUgSmhFbGxFaAogICAgICAgICsrIFFtRkkgVGpJIFJwSWh2IGtzIEVlUXBUIFRRIGVJIElWSUZwVElmIEVtZiBocG0gRUpFa21zVCBUakkgZkVURWVFc0kuCiAgICAgICAgJFR2cUkgPSAnb1E5cGxtJzsKCiAgICAgICAgJFRqa3MtPnVqSWhJc1tdID0gRlFscUVGVCgKICAgICAgICAgICAgJ1R2cUknLCAnaWtoc1QnLCAnUXFJaEVUUWgnLCAnc0lGUW1mJywgJ2VRUTlJRW0nCiAgICAgICAgKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJRaCB1akloSSIgRjlFcHNJIEZRbHFFaGttSiBUdVEgRlE5cGxtcyBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUp8RWhoRXYgICRpa2hzVAogICAgICogQHFFaEVsICBzVGhrbUp8bXA5OSAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIHNUaGttSnxtcDk5ICAkc0lGUW1mCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJb1E5cGxtKCRpa2hzVCwgJFFxSWhFVFFoID0gbXA5OSwgJHNJRlFtZiA9IG1wOTkpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSW9ROXBsbSgkaWtoc1QsICRRcUloRVRRaCwgJHNJRlFtZiwgJ1FoJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBoRXUgdWpJaEkgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJHNSOQogICAgICogQHFFaEVsICBsa1ZJZiAgJGVrbWZrbUpzCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJTkV1KCRzUjksICRla21ma21KcyA9IFtdLCAkZVFROUlFbSA9ICdFbWYnKQogICAgewogICAgICAgICRUamtzLT51akloSXNbXSA9IFsnVHZxSScgPT4gJ2hFdScsICdzUjknID0+ICRzUjksICdlUVE5SUVtJyA9PiAkZVFROUlFbV07CgogICAgICAgICRUamtzLT5FZmZya21ma21KKChFaGhFdikgJGVrbWZrbUpzLCAndWpJaEknKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgaEV1IFFoIHVqSWhJIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRzUjkKICAgICAqIEBxRWhFbCAgbGtWSWYgICRla21ma21KcwogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhiakloSU5FdSgkc1I5LCAkZWttZmttSnMgPSBbXSkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJTkV1KCRzUjksICRla21ma21KcywgJ1FoJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSAidWpJaEkga20iIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgbGtWSWYgICRVRTlwSXMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQHFFaEVsICBlUVE5ICAkbVFUCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSUttKCRGUTlwbG0sICRVRTlwSXMsICRlUVE5SUVtID0gJ0VtZicsICRtUVQgPSBpRTlzSSkKICAgIHsKICAgICAgICAkVHZxSSA9ICRtUVQgPyAnQVFUS20nIDogJ0ttJzsKCiAgICAgICAgKysgS2kgVGpJIFVFOXBJIGtzIEUgUnBJaHYgZXBrOWZJaCBrbXNURW1GSSB1SSB1azk5IEVzc3BsSSBUakkgZklVSTlRcUloIHVFbVRzIFRRCiAgICAgICAgKysgOVFROCBpUWggRW12IFVFOXBJcyBUakVUIElWa3NUIHVrVGprbSBUamtzIEprVUltIFJwSWh2LiBPUSwgdUkgdWs5OSBFZmYgVGpJCiAgICAgICAgKysgUnBJaHYgRUZGUWhma21KOXYgc1EgVGpFVCBUamtzIFJwSWh2IGtzIHFoUXFJaDl2IElWSUZwVElmIHVqSW0ga1Qga3MgaHBtLgogICAgICAgIGtpICgkVGprcy0+a3NHcElodkVlOUkoJFVFOXBJcykpIHsKICAgICAgICAgICAgWyRScElodiwgJGVrbWZrbUpzXSA9ICRUamtzLT5GaElFVElPcGUoJFVFOXBJcyk7CgogICAgICAgICAgICAkVUU5cElzID0gW21JdSBnVnFoSXNza1FtKCRScElodildOwoKICAgICAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJGVrbWZrbUpzLCAndWpJaEknKTsKICAgICAgICB9CgogICAgICAgICsrIEFJVlQsIGtpIFRqSSBVRTlwSSBrcyB0aGhFdkVlOUkgdUkgbUlJZiBUUSBGRXNUIGtUIFRRIGtUcyBoRXUgRWhoRXYgaVFobCBzUSB1SQogICAgICAgICsrIGpFVUkgVGpJIHBtZkloOXZrbUogRWhoRXYgVUU5cEkga21zVElFZiBRaSBFbSB0aGhFdkVlOUkgUWVMSUZUIHVqa0ZqIGtzIG1RVAogICAgICAgICsrIEVlOUkgVFEgZUkgRWZmSWYgRXMgRSBla21ma21KLCBJVEYuIGJJIHVrOTkgVGpJbSBFZmYgVFEgVGpJIHVqSWhJcyBFaGhFdi4KICAgICAgICBraSAoJFVFOXBJcyBrbXNURW1GSVFpIHRoaEV2RWU5SSkgewogICAgICAgICAgICAkVUU5cElzID0gJFVFOXBJcy0+VFF0aGhFdigpOwogICAgICAgIH0KCiAgICAgICAgJFRqa3MtPnVqSWhJc1tdID0gRlFscUVGVCgnVHZxSScsICdGUTlwbG0nLCAnVUU5cElzJywgJ2VRUTlJRW0nKTsKCiAgICAgICAga2kgKEZRcG1UKCRVRTlwSXMpICE9PSBGUXBtVCh0aGg6Omk5RVRUSW0oJFVFOXBJcywgWCkpKSB7CiAgICAgICAgICAgIFRqaFF1IG1JdSBLbVVFOWtmdGhKcGxJbVRnVkZJcVRrUW0oJ0FJc1RJZiBFaGhFdnMgbEV2IG1RVCBlSSBxRXNzSWYgVFEgdWpJaElLbSBsSVRqUWYuJyk7CiAgICAgICAgfQoKICAgICAgICArKyAya21FOTl2LCB1SSc5OSBFZmYgRSBla21ma21KIGlRaCBJRUZqIFVFOXBJIHBtOUlzcyBUakVUIFVFOXBJIGtzIEVtIElWcWhJc3NrUW0KICAgICAgICArKyBrbSB1amtGaiBGRXNJIHVJIHVrOTkgTHBzVCBzOGtxIFFVSWgga1Qgc2ttRkkga1QgdWs5OSBlSSBUakkgUnBJaHYgRXMgRSBoRXUKICAgICAgICArKyBzVGhrbUogRW1mIG1RVCBFcyBFIHFFaEVsSVRJaGtXSWYgcTlFRkktalE5ZkloIFRRIGVJIGhJcTlFRklmIGV2IFRqSSBhbk0uCiAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJFRqa3MtPkY5SUVtcmttZmttSnMoJFVFOXBJcyksICd1akloSScpOwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gIlFoIHVqSWhJIGttIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIGxrVklmICAkVUU5cElzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJS20oJEZROXBsbSwgJFVFOXBJcykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJS20oJEZROXBsbSwgJFVFOXBJcywgJ1FoJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSAidWpJaEkgbVFUIGttIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIGxrVklmICAkVUU5cElzCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJQVFUS20oJEZROXBsbSwgJFVFOXBJcywgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJS20oJEZROXBsbSwgJFVFOXBJcywgJGVRUTlJRW0sIFRocEkpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJRaCB1akloSSBtUVQga20iIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgbGtWSWYgICRVRTlwSXMKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFoYmpJaElBUVRLbSgkRlE5cGxtLCAkVUU5cElzKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElBUVRLbSgkRlE5cGxtLCAkVUU5cElzLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJ1akloSSBrbSBoRXUiIEY5RXBzSSBpUWgga21USUpJaCBVRTlwSXMgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xPcHFxUWhUXHRoaEV2RWU5SXxFaGhFdiAgJFVFOXBJcwogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAcUVoRWwgIGVRUTkgICRtUVQKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJS21USUpJaEttTkV1KCRGUTlwbG0sICRVRTlwSXMsICRlUVE5SUVtID0gJ0VtZicsICRtUVQgPSBpRTlzSSkKICAgIHsKICAgICAgICAkVHZxSSA9ICRtUVQgPyAnQVFUS21ORXUnIDogJ0ttTkV1JzsKCiAgICAgICAga2kgKCRVRTlwSXMga21zVEVtRklRaSB0aGhFdkVlOUkpIHsKICAgICAgICAgICAgJFVFOXBJcyA9ICRVRTlwSXMtPlRRdGhoRXYoKTsKICAgICAgICB9CgogICAgICAgICRVRTlwSXMgPSB0aGg6Omk5RVRUSW0oJFVFOXBJcyk7CgogICAgICAgIGlRaElFRmogKCRVRTlwSXMgRXMgJiRVRTlwSSkgewogICAgICAgICAgICAkVUU5cEkgPSAoa21UKSAkVUU5cEk7CiAgICAgICAgfQoKICAgICAgICAkVGprcy0+dWpJaElzW10gPSBGUWxxRUZUKCdUdnFJJywgJ0ZROXBsbScsICdVRTlwSXMnLCAnZVFROUlFbScpOwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gIlFoIHVqSWhJIGttIGhFdSIgRjlFcHNJIGlRaCBrbVRJSkloIFVFOXBJcyBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXE9wcXFRaFRcdGhoRXZFZTlJfEVoaEV2ICAkVUU5cElzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJS21USUpJaEttTkV1KCRGUTlwbG0sICRVRTlwSXMpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSUttVElKSWhLbU5FdSgkRlE5cGxtLCAkVUU5cElzLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJ1akloSSBtUVQga20gaEV1IiBGOUVwc0kgaVFoIGttVElKSWggVUU5cElzIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcT3BxcVFoVFx0aGhFdkVlOUl8RWhoRXYgICRVRTlwSXMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gdWpJaElLbVRJSkloQVFUS21ORXUoJEZROXBsbSwgJFVFOXBJcywgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJS21USUpJaEttTkV1KCRGUTlwbG0sICRVRTlwSXMsICRlUVE5SUVtLCBUaHBJKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSAiUWggdWpJaEkgbVFUIGttIGhFdSIgRjlFcHNJIGlRaCBrbVRJSkloIFVFOXBJcyBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXE9wcXFRaFRcdGhoRXZFZTlJfEVoaEV2ICAkVUU5cElzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJS21USUpJaEFRVEttTkV1KCRGUTlwbG0sICRVRTlwSXMpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSUttVElKSWhBUVRLbU5FdSgkRlE5cGxtLCAkVUU5cElzLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJ1akloSSBtcDk5IiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KfEVoaEV2fFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtICAkRlE5cGxtcwogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAcUVoRWwgIGVRUTkgICRtUVQKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJQXA5OSgkRlE5cGxtcywgJGVRUTlJRW0gPSAnRW1mJywgJG1RVCA9IGlFOXNJKQogICAgewogICAgICAgICRUdnFJID0gJG1RVCA/ICdBUVRBcDk5JyA6ICdBcDk5JzsKCiAgICAgICAgaVFoSUVGaiAodGhoOjp1aEVxKCRGUTlwbG1zKSBFcyAkRlE5cGxtKSB7CiAgICAgICAgICAgICRUamtzLT51akloSXNbXSA9IEZRbHFFRlQoJ1R2cUknLCAnRlE5cGxtJywgJ2VRUTlJRW0nKTsKICAgICAgICB9CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSAiUWggdWpJaEkgbXA5OSIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSnxFaGhFdnxcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbSAgJEZROXBsbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhiakloSUFwOTkoJEZROXBsbSkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJQXA5OSgkRlE5cGxtLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJ1akloSSBtUVQgbXA5OSIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSnxFaGhFdnxcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbSAgJEZROXBsbXMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gdWpJaElBUVRBcDk5KCRGUTlwbG1zLCAkZVFROUlFbSA9ICdFbWYnKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElBcDk5KCRGUTlwbG1zLCAkZVFROUlFbSwgVGhwSSk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSB1akloSSBlSVR1SUltIHNURVRJbEltVCBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAga1RJaEVlOUkgICRVRTlwSXMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQHFFaEVsICBlUVE5ICAkbVFUCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSXJJVHVJSW0oJEZROXBsbSwga1RJaEVlOUkgJFVFOXBJcywgJGVRUTlJRW0gPSAnRW1mJywgJG1RVCA9IGlFOXNJKQogICAgewogICAgICAgICRUdnFJID0gJ2VJVHVJSW0nOwoKICAgICAgICBraSAoJFVFOXBJcyBrbXNURW1GSVFpIG9FaGVRbWFJaGtRZikgewogICAgICAgICAgICAkVUU5cElzID0gWyRVRTlwSXMtPnNURWhULCAkVUU5cElzLT5JbWZdOwogICAgICAgIH0KCiAgICAgICAgJFRqa3MtPnVqSWhJc1tdID0gRlFscUVGVCgnVHZxSScsICdGUTlwbG0nLCAnVUU5cElzJywgJ2VRUTlJRW0nLCAnbVFUJyk7CgogICAgICAgICRUamtzLT5FZmZya21ma21KKEVoaEV2X3M5a0ZJKCRUamtzLT5GOUlFbXJrbWZrbUpzKHRoaDo6aTlFVFRJbSgkVUU5cElzKSksIHcsIHgpLCAndWpJaEknKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgdWpJaEkgZUlUdUlJbSBzVEVUSWxJbVQgcHNrbUogRlE5cGxtcyBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgRWhoRXYgICRVRTlwSXMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQHFFaEVsICBlUVE5ICAkbVFUCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSXJJVHVJSW1vUTlwbG1zKCRGUTlwbG0sIEVoaEV2ICRVRTlwSXMsICRlUVE5SUVtID0gJ0VtZicsICRtUVQgPSBpRTlzSSkKICAgIHsKICAgICAgICAkVHZxSSA9ICdlSVR1SUltb1E5cGxtcyc7CgogICAgICAgICRUamtzLT51akloSXNbXSA9IEZRbHFFRlQoJ1R2cUknLCAnRlE5cGxtJywgJ1VFOXBJcycsICdlUVE5SUVtJywgJ21RVCcpOwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gUWggdWpJaEkgZUlUdUlJbSBzVEVUSWxJbVQgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIGtUSWhFZTlJICAkVUU5cElzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJcklUdUlJbSgkRlE5cGxtLCBrVEloRWU5SSAkVUU5cElzKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElySVR1SUltKCRGUTlwbG0sICRVRTlwSXMsICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtIFFoIHVqSWhJIGVJVHVJSW0gc1RFVElsSW1UIHBza21KIEZROXBsbXMgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkVUU5cElzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJcklUdUlJbW9ROXBsbXMoJEZROXBsbSwgRWhoRXYgJFVFOXBJcykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJcklUdUlJbW9ROXBsbXMoJEZROXBsbSwgJFVFOXBJcywgJ1FoJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSB1akloSSBtUVQgZUlUdUlJbSBzVEVUSWxJbVQgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIGtUSWhFZTlJICAkVUU5cElzCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJQVFUcklUdUlJbSgkRlE5cGxtLCBrVEloRWU5SSAkVUU5cElzLCAkZVFROUlFbSA9ICdFbWYnKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElySVR1SUltKCRGUTlwbG0sICRVRTlwSXMsICRlUVE5SUVtLCBUaHBJKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFIHVqSWhJIG1RVCBlSVR1SUltIHNURVRJbEltVCBwc2ttSiBGUTlwbG1zIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBFaGhFdiAgJFVFOXBJcwogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSUFRVHJJVHVJSW1vUTlwbG1zKCRGUTlwbG0sIEVoaEV2ICRVRTlwSXMsICRlUVE5SUVtID0gJ0VtZicpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSXJJVHVJSW1vUTlwbG1zKCRGUTlwbG0sICRVRTlwSXMsICRlUVE5SUVtLCBUaHBJKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSBRaCB1akloSSBtUVQgZUlUdUlJbSBzVEVUSWxJbVQgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIGtUSWhFZTlJICAkVUU5cElzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJQVFUcklUdUlJbSgkRlE5cGxtLCBrVEloRWU5SSAkVUU5cElzKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElBUVRySVR1SUltKCRGUTlwbG0sICRVRTlwSXMsICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtIFFoIHVqSWhJIG1RVCBlSVR1SUltIHNURVRJbEltVCBwc2ttSiBGUTlwbG1zIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBFaGhFdiAgJFVFOXBJcwogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhiakloSUFRVHJJVHVJSW1vUTlwbG1zKCRGUTlwbG0sIEVoaEV2ICRVRTlwSXMpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSUFRVHJJVHVJSW1vUTlwbG1zKCRGUTlwbG0sICRVRTlwSXMsICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJRaCB1akloSSBtUVQgbXA5OSIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJEZROXBsbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhiakloSUFRVEFwOTkoJEZROXBsbSkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJQVFUQXA5OSgkRlE5cGxtLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJ1akloSSBmRVRJIiBzVEVUSWxJbVQgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIFxuRVRJSGtsSUttVEloaUVGSXxzVGhrbUp8bXA5OSAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIFxuRVRJSGtsSUttVEloaUVGSXxzVGhrbUp8bXA5OSAgJFVFOXBJCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJbkVUSSgkRlE5cGxtLCAkUXFJaEVUUWgsICRVRTlwSSA9IG1wOTksICRlUVE5SUVtID0gJ0VtZicpCiAgICB7CiAgICAgICAgWyRVRTlwSSwgJFFxSWhFVFFoXSA9ICRUamtzLT5xaElxRWhJQkU5cEl0bWZNcUloRVRRaCgKICAgICAgICAgICAgJFVFOXBJLCAkUXFJaEVUUWgsIGlwbUZfbXBsX0VoSnMoKSA9PT0geAogICAgICAgICk7CgogICAgICAgICRVRTlwSSA9ICRUamtzLT5pOUVUVEltQkU5cEkoJFVFOXBJKTsKCiAgICAgICAga2kgKCRVRTlwSSBrbXNURW1GSVFpIG5FVElIa2xJS21USWhpRUZJKSB7CiAgICAgICAgICAgICRVRTlwSSA9ICRVRTlwSS0+aVFobEVUKCdjLWwtZicpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzLT5FZmZuRVRJckVzSWZiakloSSgnbkVUSScsICRGUTlwbG0sICRRcUloRVRRaCwgJFVFOXBJLCAkZVFROUlFbSk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gIlFoIHVqSWhJIGZFVEkiIHNURVRJbEltVCBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgXG5FVElIa2xJS21USWhpRUZJfHNUaGttSnxtcDk5ICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgXG5FVElIa2xJS21USWhpRUZJfHNUaGttSnxtcDk5ICAkVUU5cEkKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFoYmpJaEluRVRJKCRGUTlwbG0sICRRcUloRVRRaCwgJFVFOXBJID0gbXA5OSkKICAgIHsKICAgICAgICBbJFVFOXBJLCAkUXFJaEVUUWhdID0gJFRqa3MtPnFoSXFFaElCRTlwSXRtZk1xSWhFVFFoKAogICAgICAgICAgICAkVUU5cEksICRRcUloRVRRaCwgaXBtRl9tcGxfRWhKcygpID09PSB4CiAgICAgICAgKTsKCiAgICAgICAgaElUcGhtICRUamtzLT51akloSW5FVEkoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgInVqSWhJIFRrbEkiIHNURVRJbEltVCBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgXG5FVElIa2xJS21USWhpRUZJfHNUaGttSnxtcDk5ICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgXG5FVElIa2xJS21USWhpRUZJfHNUaGttSnxtcDk5ICAkVUU5cEkKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gdWpJaElIa2xJKCRGUTlwbG0sICRRcUloRVRRaCwgJFVFOXBJID0gbXA5OSwgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICBbJFVFOXBJLCAkUXFJaEVUUWhdID0gJFRqa3MtPnFoSXFFaElCRTlwSXRtZk1xSWhFVFFoKAogICAgICAgICAgICAkVUU5cEksICRRcUloRVRRaCwgaXBtRl9tcGxfRWhKcygpID09PSB4CiAgICAgICAgKTsKCiAgICAgICAgJFVFOXBJID0gJFRqa3MtPmk5RVRUSW1CRTlwSSgkVUU5cEkpOwoKICAgICAgICBraSAoJFVFOXBJIGttc1RFbUZJUWkgbkVUSUhrbElLbVRJaGlFRkkpIHsKICAgICAgICAgICAgJFVFOXBJID0gJFVFOXBJLT5pUWhsRVQoJ1M6azpzJyk7CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3MtPkVmZm5FVElyRXNJZmJqSWhJKCdIa2xJJywgJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICRlUVE5SUVtKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSAiUWggdWpJaEkgVGtsSSIgc1RFVElsSW1UIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBcbkVUSUhrbElLbVRJaGlFRkl8c1Roa21KfG1wOTkgICRRcUloRVRRaAogICAgICogQHFFaEVsICBcbkVUSUhrbElLbVRJaGlFRkl8c1Roa21KfG1wOTkgICRVRTlwSQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhiakloSUhrbEkoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEkgPSBtcDk5KQogICAgewogICAgICAgIFskVUU5cEksICRRcUloRVRRaF0gPSAkVGprcy0+cWhJcUVoSUJFOXBJdG1mTXFJaEVUUWgoCiAgICAgICAgICAgICRVRTlwSSwgJFFxSWhFVFFoLCBpcG1GX21wbF9FaEpzKCkgPT09IHgKICAgICAgICApOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJSGtsSSgkRlE5cGxtLCAkUXFJaEVUUWgsICRVRTlwSSwgJ1FoJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSAidWpJaEkgZkV2IiBzVEVUSWxJbVQgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIFxuRVRJSGtsSUttVEloaUVGSXxzVGhrbUp8a21UfG1wOTkgICRRcUloRVRRaAogICAgICogQHFFaEVsICBcbkVUSUhrbElLbVRJaGlFRkl8c1Roa21KfGttVHxtcDk5ICAkVUU5cEkKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gdWpJaEluRXYoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEkgPSBtcDk5LCAkZVFROUlFbSA9ICdFbWYnKQogICAgewogICAgICAgIFskVUU5cEksICRRcUloRVRRaF0gPSAkVGprcy0+cWhJcUVoSUJFOXBJdG1mTXFJaEVUUWgoCiAgICAgICAgICAgICRVRTlwSSwgJFFxSWhFVFFoLCBpcG1GX21wbF9FaEpzKCkgPT09IHgKICAgICAgICApOwoKICAgICAgICAkVUU5cEkgPSAkVGprcy0+aTlFVFRJbUJFOXBJKCRVRTlwSSk7CgogICAgICAgIGtpICgkVUU5cEkga21zVEVtRklRaSBuRVRJSGtsSUttVEloaUVGSSkgewogICAgICAgICAgICAkVUU5cEkgPSAkVUU5cEktPmlRaGxFVCgnZicpOwogICAgICAgIH0KCiAgICAgICAga2kgKCEgJFVFOXBJIGttc1RFbUZJUWkgZ1ZxaElzc2tRbW9RbVRoRUZUKSB7CiAgICAgICAgICAgICRVRTlwSSA9IHNxaGttVGkoJyV3eGYnLCAkVUU5cEkpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzLT5FZmZuRVRJckVzSWZiakloSSgnbkV2JywgJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICRlUVE5SUVtKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSAiUWggdWpJaEkgZkV2IiBzVEVUSWxJbVQgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIFxuRVRJSGtsSUttVEloaUVGSXxzVGhrbUp8a21UfG1wOTkgICRRcUloRVRRaAogICAgICogQHFFaEVsICBcbkVUSUhrbElLbVRJaGlFRkl8c1Roa21KfGttVHxtcDk5ICAkVUU5cEkKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFoYmpJaEluRXYoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEkgPSBtcDk5KQogICAgewogICAgICAgIFskVUU5cEksICRRcUloRVRRaF0gPSAkVGprcy0+cWhJcUVoSUJFOXBJdG1mTXFJaEVUUWgoCiAgICAgICAgICAgICRVRTlwSSwgJFFxSWhFVFFoLCBpcG1GX21wbF9FaEpzKCkgPT09IHgKICAgICAgICApOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJbkV2KCRGUTlwbG0sICRRcUloRVRRaCwgJFVFOXBJLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJ1akloSSBsUW1UaiIgc1RFVElsSW1UIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBcbkVUSUhrbElLbVRJaGlFRkl8c1Roa21KfGttVHxtcDk5ICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgXG5FVElIa2xJS21USWhpRUZJfHNUaGttSnxrbVR8bXA5OSAgJFVFOXBJCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJM1FtVGooJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEkgPSBtcDk5LCAkZVFROUlFbSA9ICdFbWYnKQogICAgewogICAgICAgIFskVUU5cEksICRRcUloRVRRaF0gPSAkVGprcy0+cWhJcUVoSUJFOXBJdG1mTXFJaEVUUWgoCiAgICAgICAgICAgICRVRTlwSSwgJFFxSWhFVFFoLCBpcG1GX21wbF9FaEpzKCkgPT09IHgKICAgICAgICApOwoKICAgICAgICAkVUU5cEkgPSAkVGprcy0+aTlFVFRJbUJFOXBJKCRVRTlwSSk7CgogICAgICAgIGtpICgkVUU5cEkga21zVEVtRklRaSBuRVRJSGtsSUttVEloaUVGSSkgewogICAgICAgICAgICAkVUU5cEkgPSAkVUU5cEktPmlRaGxFVCgnbCcpOwogICAgICAgIH0KCiAgICAgICAga2kgKCEgJFVFOXBJIGttc1RFbUZJUWkgZ1ZxaElzc2tRbW9RbVRoRUZUKSB7CiAgICAgICAgICAgICRVRTlwSSA9IHNxaGttVGkoJyV3eGYnLCAkVUU5cEkpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzLT5FZmZuRVRJckVzSWZiakloSSgnM1FtVGonLCAkRlE5cGxtLCAkUXFJaEVUUWgsICRVRTlwSSwgJGVRUTlJRW0pOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJRaCB1akloSSBsUW1UaiIgc1RFVElsSW1UIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBcbkVUSUhrbElLbVRJaGlFRkl8c1Roa21KfGttVHxtcDk5ICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgXG5FVElIa2xJS21USWhpRUZJfHNUaGttSnxrbVR8bXA5OSAgJFVFOXBJCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJM1FtVGooJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEkgPSBtcDk5KQogICAgewogICAgICAgIFskVUU5cEksICRRcUloRVRRaF0gPSAkVGprcy0+cWhJcUVoSUJFOXBJdG1mTXFJaEVUUWgoCiAgICAgICAgICAgICRVRTlwSSwgJFFxSWhFVFFoLCBpcG1GX21wbF9FaEpzKCkgPT09IHgKICAgICAgICApOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJM1FtVGooJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgInVqSWhJIHZJRWgiIHNURVRJbEltVCBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgXG5FVElIa2xJS21USWhpRUZJfHNUaGttSnxrbVR8bXA5OSAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIFxuRVRJSGtsSUttVEloaUVGSXxzVGhrbUp8a21UfG1wOTkgICRVRTlwSQogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSWNJRWgoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEkgPSBtcDk5LCAkZVFROUlFbSA9ICdFbWYnKQogICAgewogICAgICAgIFskVUU5cEksICRRcUloRVRRaF0gPSAkVGprcy0+cWhJcUVoSUJFOXBJdG1mTXFJaEVUUWgoCiAgICAgICAgICAgICRVRTlwSSwgJFFxSWhFVFFoLCBpcG1GX21wbF9FaEpzKCkgPT09IHgKICAgICAgICApOwoKICAgICAgICAkVUU5cEkgPSAkVGprcy0+aTlFVFRJbUJFOXBJKCRVRTlwSSk7CgogICAgICAgIGtpICgkVUU5cEkga21zVEVtRklRaSBuRVRJSGtsSUttVEloaUVGSSkgewogICAgICAgICAgICAkVUU5cEkgPSAkVUU5cEktPmlRaGxFVCgnYycpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzLT5FZmZuRVRJckVzSWZiakloSSgnY0lFaCcsICRGUTlwbG0sICRRcUloRVRRaCwgJFVFOXBJLCAkZVFROUlFbSk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gIlFoIHVqSWhJIHZJRWgiIHNURVRJbEltVCBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgXG5FVElIa2xJS21USWhpRUZJfHNUaGttSnxrbVR8bXA5OSAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIFxuRVRJSGtsSUttVEloaUVGSXxzVGhrbUp8a21UfG1wOTkgICRVRTlwSQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhiakloSWNJRWgoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEkgPSBtcDk5KQogICAgewogICAgICAgIFskVUU5cEksICRRcUloRVRRaF0gPSAkVGprcy0+cWhJcUVoSUJFOXBJdG1mTXFJaEVUUWgoCiAgICAgICAgICAgICRVRTlwSSwgJFFxSWhFVFFoLCBpcG1GX21wbF9FaEpzKCkgPT09IHgKICAgICAgICApOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJY0lFaCgkRlE5cGxtLCAkUXFJaEVUUWgsICRVRTlwSSwgJ1FoJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBmRVRJIGVFc0lmICh2SUVoLCBsUW1UaiwgZkV2LCBUa2xJKSBzVEVUSWxJbVQgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkVHZxSQogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgc1Roa21KICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgbGtWSWYgICRVRTlwSQogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFoUVRJRlRJZiBpcG1GVGtRbSBFZmZuRVRJckVzSWZiakloSSgkVHZxSSwgJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICRlUVE5SUVtID0gJ0VtZicpCiAgICB7CiAgICAgICAgJFRqa3MtPnVqSWhJc1tdID0gRlFscUVGVCgnRlE5cGxtJywgJ1R2cUknLCAnZVFROUlFbScsICdRcUloRVRRaCcsICdVRTlwSScpOwoKICAgICAgICBraSAoISAkVUU5cEkga21zVEVtRklRaSBnVnFoSXNza1Ftb1FtVGhFRlQpIHsKICAgICAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJFVFOXBJLCAndWpJaEknKTsKICAgICAgICB9CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFIG1Jc1RJZiB1akloSSBzVEVUSWxJbVQgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXG85UXNwaEkgICRGRTk5ZUVGOAogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSUFJc1RJZihvOVFzcGhJICRGRTk5ZUVGOCwgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICAkRkU5OWVFRjgoJFJwSWh2ID0gJFRqa3MtPmlRaEFJc1RJZmJqSWhJKCkpOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPkVmZkFJc1RJZmJqSWhJR3BJaHYoJFJwSWh2LCAkZVFROUlFbSk7CiAgICB9CgogICAgKyoqCiAgICAgKiBvaElFVEkgRSBtSXUgUnBJaHYga21zVEVtRkkgaVFoIG1Jc1RJZiB1akloSSBGUW1ma1RrUW0uCiAgICAgKgogICAgICogQGhJVHBobSBcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZkloCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBpUWhBSXNUSWZiakloSSgpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT5tSXVHcElodigpLT5paFFsKCRUamtzLT5paFFsKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbVFUakloIFJwSWh2IGVwazlmSWggRXMgRSBtSXNUSWYgdWpJaEkgVFEgVGpJIFJwSWh2IGVwazlmSWguCiAgICAgKgogICAgICogQHFFaEVsICBcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZkloICAkUnBJaHYKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gRWZmQUlzVElmYmpJaElHcElodigkUnBJaHYsICRlUVE5SUVtID0gJ0VtZicpCiAgICB7CiAgICAgICAga2kgKEZRcG1UKCRScElodi0+dWpJaElzKSkgewogICAgICAgICAgICAkVHZxSSA9ICdBSXNUSWYnOwoKICAgICAgICAgICAgJFRqa3MtPnVqSWhJc1tdID0gRlFscUVGVCgnVHZxSScsICdScElodicsICdlUVE5SUVtJyk7CgogICAgICAgICAgICAkVGprcy0+RWZmcmttZmttSigkUnBJaHYtPkpJVE5FdXJrbWZrbUpzKClbJ3VqSWhJJ10sICd1akloSScpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgaXA5OSBzcGUtc0k5SUZUIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBzVGhrbUogICRRcUloRVRRaAogICAgICogQHFFaEVsICBcbzlRc3BoSXx8XEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaHxcQUtBdFxuRVRFZUVzSVxnOVFScEltVFxycGs5ZkloICAkRkU5OWVFRjgKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxaFFUSUZUSWYgaXBtRlRrUW0gdWpJaElPcGUoJEZROXBsbSwgJFFxSWhFVFFoLCAkRkU5OWVFRjgsICRlUVE5SUVtKQogICAgewogICAgICAgICRUdnFJID0gJ09wZSc7CgogICAgICAgIGtpICgkRkU5OWVFRjgga21zVEVtRklRaSBvOVFzcGhJKSB7CiAgICAgICAgICAgICsrIE1tRkkgdUkgakVVSSBUakkgUnBJaHYga21zVEVtRkkgdUkgRkVtIHNrbHE5diBJVklGcFRJIGtUIHNRIGtUIEZFbSBFZmYgRTk5CiAgICAgICAgICAgICsrIFFpIFRqSSBzcGUtc0k5SUZUJ3MgRlFtZmtUa1FtcyBUUSBrVHNJOWksIEVtZiBUakltIHVJIEZFbSBGRUZqSSBrVCBRaWkKICAgICAgICAgICAgKysga20gVGpJIEVoaEV2IFFpIHVqSWhJIEY5RXBzSXMgaVFoIFRqSSAibEVrbSIgcUVoSW1UIFJwSWh2IGttc1RFbUZJLgogICAgICAgICAgICAkRkU5OWVFRjgoJFJwSWh2ID0gJFRqa3MtPmlRaE9wZUdwSWh2KCkpOwogICAgICAgIH0gSTlzSSB7CiAgICAgICAgICAgICRScElodiA9ICRGRTk5ZUVGOCBrbXNURW1GSVFpIGc5UVJwSW1UcnBrOWZJaCA/ICRGRTk5ZUVGOC0+VFFyRXNJKCkgOiAkRkU5OWVFRjg7CiAgICAgICAgfQoKICAgICAgICAkVGprcy0+dWpJaElzW10gPSBGUWxxRUZUKAogICAgICAgICAgICAnVHZxSScsICdGUTlwbG0nLCAnUXFJaEVUUWgnLCAnUnBJaHYnLCAnZVFROUlFbScKICAgICAgICApOwoKICAgICAgICAkVGprcy0+RWZmcmttZmttSigkUnBJaHYtPkpJVHJrbWZrbUpzKCksICd1akloSScpOwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gSVZrc1RzIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZklofFxBS0F0XG5FVEVlRXNJXGc5UVJwSW1UXHJwazlmSWggICRGRTk5ZUVGOAogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAcUVoRWwgIGVRUTkgICRtUVQKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJZ1Zrc1RzKCRGRTk5ZUVGOCwgJGVRUTlJRW0gPSAnRW1mJywgJG1RVCA9IGlFOXNJKQogICAgewogICAgICAgIGtpICgkRkU5OWVFRjgga21zVEVtRklRaSBvOVFzcGhJKSB7CiAgICAgICAgICAgICRScElodiA9ICRUamtzLT5pUWhPcGVHcElodigpOwoKICAgICAgICAgICAgKysgT2tsazlFaCBUUSBUakkgc3BlLXNJOUlGVCBGOUVwc0ksIHVJIHVrOTkgRmhJRVRJIEUgbUl1IFJwSWh2IGttc1RFbUZJIHNRCiAgICAgICAgICAgICsrIFRqSSBmSVVJOVFxSWggbEV2IEY5SUVtOXYgc3FJRmtpdiBUakkgSW1Ua2hJIElWa3NUcyBScElodiBFbWYgdUkgdWs5OQogICAgICAgICAgICArKyBGUWxxazlJIFRqSSB1alE5SSBUamttSiBrbSBUakkgSmhFbGxFaCBFbWYga21zSWhUIGtUIGttVFEgVGpJIE9HNi4KICAgICAgICAgICAgJEZFOTllRUY4KCRScElodik7CiAgICAgICAgfSBJOXNJIHsKICAgICAgICAgICAgJFJwSWh2ID0gJEZFOTllRUY4IGttc1RFbUZJUWkgZzlRUnBJbVRycGs5ZkloID8gJEZFOTllRUY4LT5UUXJFc0koKSA6ICRGRTk5ZUVGODsKICAgICAgICB9CgogICAgICAgIGhJVHBobSAkVGprcy0+RWZmYmpJaElnVmtzVHNHcElodigkUnBJaHYsICRlUVE5SUVtLCAkbVFUKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSBRaCBJVmtzVHMgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfFxBS0F0XG5FVEVlRXNJXEdwSWh2XHJwazlmSWh8XEFLQXRcbkVURWVFc0lcZzlRUnBJbVRccnBrOWZJaCAgJEZFOTllRUY4CiAgICAgKiBAcUVoRWwgIGVRUTkgICRtUVQKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFoYmpJaElnVmtzVHMoJEZFOTllRUY4LCAkbVFUID0gaUU5c0kpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSWdWa3NUcygkRkU5OWVFRjgsICdRaCcsICRtUVQpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgdWpJaEkgbVFUIElWa3NUcyBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8XEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaHxcQUtBdFxuRVRFZUVzSVxnOVFScEltVFxycGs5ZkloICAkRkU5OWVFRjgKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gdWpJaElBUVRnVmtzVHMoJEZFOTllRUY4LCAkZVFROUlFbSA9ICdFbWYnKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElnVmtzVHMoJEZFOTllRUY4LCAkZVFROUlFbSwgVGhwSSk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSB1akloSSBtUVQgSVZrc1RzIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZklofFxBS0F0XG5FVEVlRXNJXGc5UVJwSW1UXHJwazlmSWggICRGRTk5ZUVGOAogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhiakloSUFRVGdWa3NUcygkRkU5OWVFRjgpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT5RaGJqSWhJZ1Zrc1RzKCRGRTk5ZUVGOCwgVGhwSSk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gSVZrc1RzIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZkloICAkUnBJaHYKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQHFFaEVsICBlUVE5ICAkbVFUCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBFZmZiakloSWdWa3NUc0dwSWh2KHNJOWkgJFJwSWh2LCAkZVFROUlFbSA9ICdFbWYnLCAkbVFUID0gaUU5c0kpCiAgICB7CiAgICAgICAgJFR2cUkgPSAkbVFUID8gJ0FRVGdWa3NUcycgOiAnZ1Zrc1RzJzsKCiAgICAgICAgJFRqa3MtPnVqSWhJc1tdID0gRlFscUVGVCgnVHZxSScsICdScElodicsICdlUVE5SUVtJyk7CgogICAgICAgICRUamtzLT5FZmZya21ma21KKCRScElodi0+SklUcmttZmttSnMoKSwgJ3VqSWhJJyk7CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIHRmZnMgRSB1akloSSBGUW1ma1RrUW0gcHNrbUogaFF1IFVFOXBJcy4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkRlE5cGxtcwogICAgICogQHFFaEVsICBzVGhrbUogICRRcUloRVRRaAogICAgICogQHFFaEVsICBFaGhFdiAgJFVFOXBJcwogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKgogICAgICogQFRqaFF1cyBcS21VRTlrZnRoSnBsSW1UZ1ZGSXFUa1FtCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSU5RdUJFOXBJcygkRlE5cGxtcywgJFFxSWhFVFFoLCAkVUU5cElzLCAkZVFROUlFbSA9ICdFbWYnKQogICAgewogICAgICAgIGtpIChGUXBtVCgkRlE5cGxtcykgIT09IEZRcG1UKCRVRTlwSXMpKSB7CiAgICAgICAgICAgIFRqaFF1IG1JdSBLbVVFOWtmdGhKcGxJbVRnVkZJcVRrUW0oJ0hqSSBtcGxlSWggUWkgRlE5cGxtcyBscHNUIGxFVEZqIFRqSSBtcGxlSWggUWkgVUU5cElzJyk7CiAgICAgICAgfQoKICAgICAgICAkVHZxSSA9ICdOUXVCRTlwSXMnOwoKICAgICAgICAkVGprcy0+dWpJaElzW10gPSBGUWxxRUZUKCdUdnFJJywgJ0ZROXBsbXMnLCAnUXFJaEVUUWgnLCAnVUU5cElzJywgJ2VRUTlJRW0nKTsKCiAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJFRqa3MtPkY5SUVtcmttZmttSnMoJFVFOXBJcykpOwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmZzIEVtIFFoIHVqSWhJIEZRbWZrVGtRbSBwc2ttSiBoUXUgVUU5cElzLgogICAgICoKICAgICAqIEBxRWhFbCAgRWhoRXYgICRGUTlwbG1zCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkVUU5cElzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJTlF1QkU5cElzKCRGUTlwbG1zLCAkUXFJaEVUUWgsICRVRTlwSXMpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSU5RdUJFOXBJcygkRlE5cGxtcywgJFFxSWhFVFFoLCAkVUU5cElzLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJ1akloSSBET01BIEZRbVRFa21zIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIGxrVklmICAkVUU5cEkKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQHFFaEVsICBlUVE5ICAkbVFUCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSURzUW1vUW1URWttcygkRlE5cGxtLCAkVUU5cEksICRlUVE5SUVtID0gJ0VtZicsICRtUVQgPSBpRTlzSSkKICAgIHsKICAgICAgICAkVHZxSSA9ICdEc1Ftb1FtVEVrbXMnOwoKICAgICAgICAkVGprcy0+dWpJaElzW10gPSBGUWxxRUZUKCdUdnFJJywgJ0ZROXBsbScsICdVRTlwSScsICdlUVE5SUVtJywgJ21RVCcpOwoKICAgICAgICBraSAoISAkVUU5cEkga21zVEVtRklRaSBnVnFoSXNza1Ftb1FtVGhFRlQpIHsKICAgICAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJFRqa3MtPkpoRWxsRWgtPnFoSXFFaElya21ma21KMlFoRHNRbW9RbVRFa21zKCRVRTlwSSkpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJRaCB1akloSSBET01BIEZRbVRFa21zIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIGxrVklmICAkVUU5cEkKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFoYmpJaElEc1Ftb1FtVEVrbXMoJEZROXBsbSwgJFVFOXBJKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElEc1Ftb1FtVEVrbXMoJEZROXBsbSwgJFVFOXBJLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJ1akloSSBET01BIG1RVCBGUW1URWttcyIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBsa1ZJZiAgJFVFOXBJCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJRHNRbW5RSXNtVG9RbVRFa20oJEZROXBsbSwgJFVFOXBJLCAkZVFROUlFbSA9ICdFbWYnKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaElEc1Ftb1FtVEVrbXMoJEZROXBsbSwgJFVFOXBJLCAkZVFROUlFbSwgVGhwSSk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gIlFoIHVqSWhJIERPTUEgbVFUIEZRbVRFa21zIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIGxrVklmICAkVUU5cEkKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFoYmpJaElEc1FtblFJc21Ub1FtVEVrbSgkRlE5cGxtLCAkVUU5cEkpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSURzUW1uUUlzbVRvUW1URWttKCRGUTlwbG0sICRVRTlwSSwgJ1FoJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBGOUVwc0kgVGpFVCBmSVRJaGxrbUlzIGtpIEUgRE9NQSBxRVRqIElWa3NUcyBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQHFFaEVsICBlUVE5ICAkbVFUCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSURzUW1vUW1URWttczFJdigkRlE5cGxtLCAkZVFROUlFbSA9ICdFbWYnLCAkbVFUID0gaUU5c0kpCiAgICB7CiAgICAgICAgJFR2cUkgPSAnRHNRbW9RbVRFa21zMUl2JzsKCiAgICAgICAgJFRqa3MtPnVqSWhJc1tdID0gRlFscUVGVCgnVHZxSScsICdGUTlwbG0nLCAnZVFROUlFbScsICdtUVQnKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJRaCIgRjlFcHNJIFRqRVQgZklUSWhsa21JcyBraSBFIERPTUEgcUVUaiBJVmtzVHMgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJRHNRbW9RbVRFa21zMUl2KCRGUTlwbG0pCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSURzUW1vUW1URWttczFJdigkRlE5cGxtLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFIEY5RXBzSSBUakVUIGZJVElobGttSXMga2kgRSBET01BIHFFVGogZlFJcyBtUVQgSVZrc1QgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJRHNRbW5RSXNtVG9RbVRFa20xSXYoJEZROXBsbSwgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJRHNRbW9RbVRFa21zMUl2KCRGUTlwbG0sICRlUVE5SUVtLCBUaHBJKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSAiUWgiIEY5RXBzSSBUakVUIGZJVElobGttSXMga2kgRSBET01BIHFFVGogZlFJcyBtUVQgSVZrc1QgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJRHNRbW5RSXNtVG9RbVRFa20xSXYoJEZROXBsbSkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnVqSWhJRHNRbW5RSXNtVG9RbVRFa20xSXYoJEZROXBsbSwgJ1FoJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSAidWpJaEkgRE9NQSA5SW1KVGoiIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgbGtWSWYgICRRcUloRVRRaAogICAgICogQHFFaEVsICBsa1ZJZiAgJFVFOXBJCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHVqSWhJRHNRbTZJbUpUaigkRlE5cGxtLCAkUXFJaEVUUWgsICRVRTlwSSA9IG1wOTksICRlUVE5SUVtID0gJ0VtZicpCiAgICB7CiAgICAgICAgJFR2cUkgPSAnRHNRbTZJbUpUaic7CgogICAgICAgIFskVUU5cEksICRRcUloRVRRaF0gPSAkVGprcy0+cWhJcUVoSUJFOXBJdG1mTXFJaEVUUWgoCiAgICAgICAgICAgICRVRTlwSSwgJFFxSWhFVFFoLCBpcG1GX21wbF9FaEpzKCkgPT09IHgKICAgICAgICApOwoKICAgICAgICAkVGprcy0+dWpJaElzW10gPSBGUWxxRUZUKCdUdnFJJywgJ0ZROXBsbScsICdRcUloRVRRaCcsICdVRTlwSScsICdlUVE5SUVtJyk7CgogICAgICAgIGtpICghICRVRTlwSSBrbXNURW1GSVFpIGdWcWhJc3NrUW1vUW1UaEVGVCkgewogICAgICAgICAgICAkVGprcy0+RWZmcmttZmttSigoa21UKSAkVGprcy0+aTlFVFRJbUJFOXBJKCRVRTlwSSkpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJRaCB1akloSSBET01BIDlJbUpUaiIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBsa1ZJZiAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIGxrVklmICAkVUU5cEkKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFoYmpJaElEc1FtNkltSlRqKCRGUTlwbG0sICRRcUloRVRRaCwgJFVFOXBJID0gbXA5OSkKICAgIHsKICAgICAgICBbJFVFOXBJLCAkUXFJaEVUUWhdID0gJFRqa3MtPnFoSXFFaElCRTlwSXRtZk1xSWhFVFFoKAogICAgICAgICAgICAkVUU5cEksICRRcUloRVRRaCwgaXBtRl9tcGxfRWhKcygpID09PSB4CiAgICAgICAgKTsKCiAgICAgICAgaElUcGhtICRUamtzLT51akloSURzUW02SW1KVGooJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogU0VtZjlJcyBmdm1FbGtGICJ1akloSSIgRjlFcHNJcyBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRsSVRqUWYKICAgICAqIEBxRWhFbCAgRWhoRXYgICRxRWhFbElUSWhzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBmdm1FbGtGYmpJaEkoJGxJVGpRZiwgJHFFaEVsSVRJaHMpCiAgICB7CiAgICAgICAgJGlrbWZJaCA9IHNwZXNUaCgkbElUalFmLCBaKTsKCiAgICAgICAgJHNJSmxJbVRzID0gcWhJSl9zcTlrVCgKICAgICAgICAgICAgJysodG1mfE1oKSg/PVt0LWRdKSsnLCAkaWttZkloLCAtWCwgYU5nMF9PYTZLSF9uZzZLM19vdGFIUE5nCiAgICAgICAgKTsKCiAgICAgICAgKysgSGpJIEZRbW1JRlRRaCBVRWhrRWU5SSB1azk5IGZJVElobGttSSB1amtGaiBGUW1tSUZUUWggdWs5OSBlSSBwc0lmIGlRaCBUakkKICAgICAgICArKyBScElodiBGUW1ma1RrUW0uIGJJIHVrOTkgRmpFbUpJIGtUIEVzIHVJIEZRbEkgRUZoUXNzIG1JdSBlUVE5SUVtIFVFOXBJcwogICAgICAgICsrIGttIFRqSSBmdm1FbGtGIGxJVGpRZiBzVGhrbUpzLCB1amtGaiBGUXA5ZiBGUW1URWttIEUgbXBsZUloIFFpIFRqSXNJLgogICAgICAgICRGUW1tSUZUUWggPSAnRW1mJzsKCiAgICAgICAgJGttZklWID0gdzsKCiAgICAgICAgaVFoSUVGaiAoJHNJSmxJbVRzIEVzICRzSUpsSW1UKSB7CiAgICAgICAgICAgICsrIEtpIFRqSSBzSUpsSW1UIGtzIG1RVCBFIGVRUTlJRW0gRlFtbUlGVFFoLCB1SSBGRW0gRXNzcGxJIGtUIGtzIEUgRlE5cGxtJ3MgbUVsSQogICAgICAgICAgICArKyBFbWYgdUkgdWs5OSBFZmYga1QgVFEgVGpJIFJwSWh2IEVzIEUgbUl1IEZRbXNUaEVrbVQgRXMgRSB1akloSSBGOUVwc0ksIFRqSW0KICAgICAgICAgICAgKysgdUkgRkVtIDhJSXEga1RJaEVUa21KIFRqaFFwSmogVGpJIGZ2bUVsa0YgbElUalFmIHNUaGttSidzIHNJSmxJbVRzIEVKRWttLgogICAgICAgICAgICBraSAoJHNJSmxJbVQgIT09ICd0bWYnICYmICRzSUpsSW1UICE9PSAnTWgnKSB7CiAgICAgICAgICAgICAgICAkVGprcy0+RWZmbnZtRWxrRigkc0lKbEltVCwgJEZRbW1JRlRRaCwgJHFFaEVsSVRJaHMsICRrbWZJVik7CgogICAgICAgICAgICAgICAgJGttZklWLy87CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICsrIE1UaklodWtzSSwgdUkgdWs5OSBzVFFoSSBUakkgRlFtbUlGVFFoIHNRIHVJIDhtUXUgalF1IFRqSSBtSVZUIHVqSWhJIEY5RXBzSSB1SQogICAgICAgICAgICArKyBpa21mIGttIFRqSSBScElodiBzalFwOWYgZUkgRlFtbUlGVElmIFRRIFRqSSBxaElVa1FwcyBRbUlzLCBsSUVta21KIHVJIHVrOTkKICAgICAgICAgICAgKysgakVVSSBUakkgcWhRcUloIGVRUTlJRW0gRlFtbUlGVFFoIFRRIEZRbW1JRlQgVGpJIG1JVlQgdWpJaEkgRjlFcHNJIGlRcG1mLgogICAgICAgICAgICBJOXNJIHsKICAgICAgICAgICAgICAgICRGUW1tSUZUUWggPSAkc0lKbEltVDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgc2ttSjlJIGZ2bUVsa0YgdWpJaEkgRjlFcHNJIHNURVRJbEltVCBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRzSUpsSW1UCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJEZRbW1JRlRRaAogICAgICogQHFFaEVsICBFaGhFdiAgJHFFaEVsSVRJaHMKICAgICAqIEBxRWhFbCAga21UICAka21mSVYKICAgICAqIEBoSVRwaG0gVVFrZgogICAgICorCiAgICBxaFFUSUZUSWYgaXBtRlRrUW0gRWZmbnZtRWxrRigkc0lKbEltVCwgJEZRbW1JRlRRaCwgJHFFaEVsSVRJaHMsICRrbWZJVikKICAgIHsKICAgICAgICArKyBNbUZJIHVJIGpFVUkgcUVoc0lmIFFwVCBUakkgRlE5cGxtcyBFbWYgaVFobEVUVElmIFRqSSBlUVE5SUVtIFFxSWhFVFFocyB1SQogICAgICAgICsrIEVoSSBoSUVmdiBUUSBFZmYga1QgVFEgVGprcyBScElodiBFcyBFIHVqSWhJIEY5RXBzSSBMcHNUIDlrOEkgRW12IFFUakloCiAgICAgICAgKysgRjlFcHNJIFFtIFRqSSBScElodi4gSGpJbSB1SSc5OSBrbUZoSWxJbVQgVGpJIHFFaEVsSVRJaCBrbWZJViBVRTlwSXMuCiAgICAgICAgJGVRUTkgPSBzVGhUUTlRdUloKCRGUW1tSUZUUWgpOwoKICAgICAgICAkVGprcy0+dWpJaEkoT1RoOjpzbUU4SSgkc0lKbEltVCksICc9JywgJHFFaEVsSVRJaHNbJGttZklWXSwgJGVRUTkpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgInVqSWhJIGlwOTlUSVZUIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KfHNUaGttSltdICAkRlE5cGxtcwogICAgICogQHFFaEVsICBzVGhrbUogICRVRTlwSQogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSTJwOTlISVZUKCRGUTlwbG1zLCAkVUU5cEksIEVoaEV2ICRRcVRrUW1zID0gW10sICRlUVE5SUVtID0gJ0VtZicpCiAgICB7CiAgICAgICAgJFR2cUkgPSAnMnA5OVRJVlQnOwoKICAgICAgICAkRlE5cGxtcyA9IChFaGhFdikgJEZROXBsbXM7CgogICAgICAgICRUamtzLT51akloSXNbXSA9IEZRbHFFRlQoJ1R2cUknLCAnRlE5cGxtcycsICdVRTlwSScsICdRcVRrUW1zJywgJ2VRUTlJRW0nKTsKCiAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJFVFOXBJKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgIlFoIHVqSWhJIGlwOTlUSVZUIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KfHNUaGttSltdICAkRlE5cGxtcwogICAgICogQHFFaEVsICBzVGhrbUogICRVRTlwSQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhiakloSTJwOTlISVZUKCRGUTlwbG1zLCAkVUU5cEksIEVoaEV2ICRRcVRrUW1zID0gW10pCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSTJwOTlUSVZUKCRGUTlwbG1zLCAkVUU5cEksICRRcVRrUW1zLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJ1akloSSIgRjlFcHNJIFRRIFRqSSBScElodiBpUWggbHA5VGtxOUkgRlE5cGxtcyB1a1RqICJFbWYiIEZRbWZrVGtRbXMgZUlUdUlJbSBUaklsLgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KW10gICRGUTlwbG1zCiAgICAgKiBAcUVoRWwgIGxrVklmICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgbGtWSWYgICRVRTlwSQogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSXQ5OSgkRlE5cGxtcywgJFFxSWhFVFFoID0gbXA5OSwgJFVFOXBJID0gbXA5OSwgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICBbJFVFOXBJLCAkUXFJaEVUUWhdID0gJFRqa3MtPnFoSXFFaElCRTlwSXRtZk1xSWhFVFFoKAogICAgICAgICAgICAkVUU5cEksICRRcUloRVRRaCwgaXBtRl9tcGxfRWhKcygpID09PSB4CiAgICAgICAgKTsKCiAgICAgICAgJFRqa3MtPnVqSWhJQUlzVElmKGlwbUZUa1FtICgkUnBJaHYpIHBzSSAoJEZROXBsbXMsICRRcUloRVRRaCwgJFVFOXBJKSB7CiAgICAgICAgICAgIGlRaElFRmogKCRGUTlwbG1zIEVzICRGUTlwbG0pIHsKICAgICAgICAgICAgICAgICRScElodi0+dWpJaEkoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICdFbWYnKTsKICAgICAgICAgICAgfQogICAgICAgIH0sICRlUVE5SUVtKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJRaCB1akloSSIgRjlFcHNJIFRRIFRqSSBScElodiBpUWggbHA5VGtxOUkgRlE5cGxtcyB1a1RqICJFbWYiIEZRbWZrVGtRbXMgZUlUdUlJbSBUaklsLgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KW10gICRGUTlwbG1zCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJFFxSWhFVFFoCiAgICAgKiBAcUVoRWwgIGxrVklmICAkVUU5cEkKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFoYmpJaEl0OTkoJEZROXBsbXMsICRRcUloRVRRaCA9IG1wOTksICRVRTlwSSA9IG1wOTkpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSXQ5OSgkRlE5cGxtcywgJFFxSWhFVFFoLCAkVUU5cEksICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJ1akloSSIgRjlFcHNJIFRRIFRqSSBScElodiBpUWggbHA5VGtxOUkgRlE5cGxtcyB1a1RqICJRaCIgRlFtZmtUa1FtcyBlSVR1SUltIFRqSWwuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUpbXSAgJEZROXBsbXMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkUXFJaEVUUWgKICAgICAqIEBxRWhFbCAgbGtWSWYgICRVRTlwSQogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSB1akloSXRtdigkRlE5cGxtcywgJFFxSWhFVFFoID0gbXA5OSwgJFVFOXBJID0gbXA5OSwgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICBbJFVFOXBJLCAkUXFJaEVUUWhdID0gJFRqa3MtPnFoSXFFaElCRTlwSXRtZk1xSWhFVFFoKAogICAgICAgICAgICAkVUU5cEksICRRcUloRVRRaCwgaXBtRl9tcGxfRWhKcygpID09PSB4CiAgICAgICAgKTsKCiAgICAgICAgJFRqa3MtPnVqSWhJQUlzVElmKGlwbUZUa1FtICgkUnBJaHYpIHBzSSAoJEZROXBsbXMsICRRcUloRVRRaCwgJFVFOXBJKSB7CiAgICAgICAgICAgIGlRaElFRmogKCRGUTlwbG1zIEVzICRGUTlwbG0pIHsKICAgICAgICAgICAgICAgICRScElodi0+dWpJaEkoJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICdRaCcpOwogICAgICAgICAgICB9CiAgICAgICAgfSwgJGVRUTlJRW0pOwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gIlFoIHVqSWhJIiBGOUVwc0kgVFEgVGpJIFJwSWh2IGlRaCBscDlUa3E5SSBGUTlwbG1zIHVrVGogIlFoIiBGUW1ma1RrUW1zIGVJVHVJSW0gVGpJbC4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSltdICAkRlE5cGxtcwogICAgICogQHFFaEVsICBzVGhrbUogICRRcUloRVRRaAogICAgICogQHFFaEVsICBsa1ZJZiAgJFVFOXBJCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGJqSWhJdG12KCRGUTlwbG1zLCAkUXFJaEVUUWggPSBtcDk5LCAkVUU5cEkgPSBtcDk5KQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+dWpJaEl0bXYoJEZROXBsbXMsICRRcUloRVRRaCwgJFVFOXBJLCAnUWgnKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJKaFFwcSBldiIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2fFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgLi4uJEpoUXBxcwogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gSmhRcHFydiguLi4kSmhRcHFzKQogICAgewogICAgICAgIGlRaElFRmogKCRKaFFwcXMgRXMgJEpoUXBxKSB7CiAgICAgICAgICAgICRUamtzLT5KaFFwcXMgPSBFaGhFdl9sSWhKSSgKICAgICAgICAgICAgICAgIChFaGhFdikgJFRqa3MtPkpoUXBxcywKICAgICAgICAgICAgICAgIHRoaDo6dWhFcSgkSmhRcHEpCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBoRXUgSmhRcHFydiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkc1I5CiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkZWttZmttSnMKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIEpoUXBxcnZORXUoJHNSOSwgRWhoRXYgJGVrbWZrbUpzID0gW10pCiAgICB7CiAgICAgICAgJFRqa3MtPkpoUXBxc1tdID0gbUl1IGdWcWhJc3NrUW0oJHNSOSk7CgogICAgICAgICRUamtzLT5FZmZya21ma21KKCRla21ma21KcywgJ0poUXBxcnYnKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgImpFVWttSiIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfFxvOVFzcGhJfHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBzVGhrbUp8a21UfGk5UUVUfG1wOTkgICRRcUloRVRRaAogICAgICogQHFFaEVsICBzVGhrbUp8a21UfGk5UUVUfG1wOTkgICRVRTlwSQogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBqRVVrbUooJEZROXBsbSwgJFFxSWhFVFFoID0gbXA5OSwgJFVFOXBJID0gbXA5OSwgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICAkVHZxSSA9ICdyRXNrRic7CgogICAgICAgIGtpICgkRlE5cGxtIGttc1RFbUZJUWkgb1FtZmtUa1FtZ1ZxaElzc2tRbSkgewogICAgICAgICAgICAkVHZxSSA9ICdnVnFoSXNza1FtJzsKCiAgICAgICAgICAgICRUamtzLT5qRVVrbUpzW10gPSBGUWxxRUZUKCdUdnFJJywgJ0ZROXBsbScsICdlUVE5SUVtJyk7CgogICAgICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICAgICAgfQoKICAgICAgICArKyBTSWhJIHVJIHVrOTkgbEU4SSBzUWxJIEVzc3BscVRrUW1zIEVlUXBUIFRqSSBRcUloRVRRaC4gS2kgUW05diB4IFVFOXBJcyBFaEkKICAgICAgICArKyBxRXNzSWYgVFEgVGpJIGxJVGpRZiwgdUkgdWs5OSBFc3NwbEkgVGpFVCBUakkgUXFJaEVUUWgga3MgRW0gSVJwRTlzIHNrSm0KICAgICAgICArKyBFbWYgOElJcSBKUWttSi4gTVRqSWh1a3NJLCB1SSc5OSBoSVJwa2hJIFRqSSBRcUloRVRRaCBUUSBlSSBxRXNzSWYga20uCiAgICAgICAgWyRVRTlwSSwgJFFxSWhFVFFoXSA9ICRUamtzLT5xaElxRWhJQkU5cEl0bWZNcUloRVRRaCgKICAgICAgICAgICAgJFVFOXBJLCAkUXFJaEVUUWgsIGlwbUZfbXBsX0VoSnMoKSA9PT0geAogICAgICAgICk7CgogICAgICAgIGtpICgkRlE5cGxtIGttc1RFbUZJUWkgbzlRc3BoSSAmJiBrc19tcDk5KCRRcUloRVRRaCkpIHsKICAgICAgICAgICAgaElUcGhtICRUamtzLT5qRVVrbUpBSXNUSWYoJEZROXBsbSwgJGVRUTlJRW0pOwogICAgICAgIH0KCiAgICAgICAgKysgS2kgVGpJIEprVUltIFFxSWhFVFFoIGtzIG1RVCBpUXBtZiBrbSBUakkgOWtzVCBRaSBVRTlrZiBRcUloRVRRaHMgdUkgdWs5OQogICAgICAgICsrIEVzc3BsSSBUakVUIFRqSSBmSVVJOVFxSWgga3MgTHBzVCBzalFoVC1GcFRUa21KIFRqSSAnPScgUXFJaEVUUWhzIEVtZgogICAgICAgICsrIHVJIHVrOTkgc0lUIFRqSSBRcUloRVRRaHMgVFEgJz0nIEVtZiBzSVQgVGpJIFVFOXBJcyBFcXFoUXFoa0VUSTl2LgogICAgICAgIGtpICgkVGprcy0+a21VRTlrZk1xSWhFVFFoKCRRcUloRVRRaCkpIHsKICAgICAgICAgICAgWyRVRTlwSSwgJFFxSWhFVFFoXSA9IFskUXFJaEVUUWgsICc9J107CiAgICAgICAgfQoKICAgICAgICBraSAoJFRqa3MtPmtzcmtUdWtzSU1xSWhFVFFoKCRRcUloRVRRaCkpIHsKICAgICAgICAgICAgJFR2cUkgPSAncmtUdWtzSSc7CiAgICAgICAgfQoKICAgICAgICAkVGprcy0+akVVa21Kc1tdID0gRlFscUVGVCgnVHZxSScsICdGUTlwbG0nLCAnUXFJaEVUUWgnLCAnVUU5cEknLCAnZVFROUlFbScpOwoKICAgICAgICBraSAoISAkVUU5cEkga21zVEVtRklRaSBnVnFoSXNza1Ftb1FtVGhFRlQpIHsKICAgICAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJFRqa3MtPmk5RVRUSW1CRTlwSSgkVUU5cEkpLCAnakVVa21KJyk7CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gIlFoIGpFVWttSiIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfFxvOVFzcGhJfHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBzVGhrbUp8a21UfGk5UUVUfG1wOTkgICRRcUloRVRRaAogICAgICogQHFFaEVsICBzVGhrbUp8a21UfGk5UUVUfG1wOTkgICRVRTlwSQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhTRVVrbUooJEZROXBsbSwgJFFxSWhFVFFoID0gbXA5OSwgJFVFOXBJID0gbXA5OSkKICAgIHsKICAgICAgICBbJFVFOXBJLCAkUXFJaEVUUWhdID0gJFRqa3MtPnFoSXFFaElCRTlwSXRtZk1xSWhFVFFoKAogICAgICAgICAgICAkVUU5cEksICRRcUloRVRRaCwgaXBtRl9tcGxfRWhKcygpID09PSB4CiAgICAgICAgKTsKCiAgICAgICAgaElUcGhtICRUamtzLT5qRVVrbUooJEZROXBsbSwgJFFxSWhFVFFoLCAkVUU5cEksICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgbUlzVElmIGpFVWttSiBzVEVUSWxJbVQgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXG85UXNwaEkgICRGRTk5ZUVGOAogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBqRVVrbUpBSXNUSWYobzlRc3BoSSAkRkU5OWVFRjgsICRlUVE5SUVtID0gJ0VtZicpCiAgICB7CiAgICAgICAgJEZFOTllRUY4KCRScElodiA9ICRUamtzLT5pUWhBSXNUSWZiakloSSgpKTsKCiAgICAgICAgaElUcGhtICRUamtzLT5FZmZBSXNUSWZTRVVrbUpHcElodigkUnBJaHYsICRlUVE5SUVtKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbVFUakloIFJwSWh2IGVwazlmSWggRXMgRSBtSXNUSWYgakVVa21KIFRRIFRqSSBScElodiBlcGs5ZkloLgogICAgICoKICAgICAqIEBxRWhFbCAgXEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaCAgJFJwSWh2CiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIEVmZkFJc1RJZlNFVWttSkdwSWh2KCRScElodiwgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICBraSAoRlFwbVQoJFJwSWh2LT5qRVVrbUpzKSkgewogICAgICAgICAgICAkVHZxSSA9ICdBSXNUSWYnOwoKICAgICAgICAgICAgJFRqa3MtPmpFVWttSnNbXSA9IEZRbHFFRlQoJ1R2cUknLCAnUnBJaHYnLCAnZVFROUlFbScpOwoKICAgICAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJFJwSWh2LT5KSVRORXVya21ma21KcygpWydqRVVrbUonXSwgJ2pFVWttSicpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgImpFVWttSiBtcDk5IiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KfEVoaEV2ICAkRlE5cGxtcwogICAgICogQHFFaEVsICBzVGhrbUogICRlUVE5SUVtCiAgICAgKiBAcUVoRWwgIGVRUTkgICRtUVQKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGpFVWttSkFwOTkoJEZROXBsbXMsICRlUVE5SUVtID0gJ0VtZicsICRtUVQgPSBpRTlzSSkKICAgIHsKICAgICAgICAkVHZxSSA9ICRtUVQgPyAnQVFUQXA5OScgOiAnQXA5OSc7CgogICAgICAgIGlRaElFRmogKHRoaDo6dWhFcSgkRlE5cGxtcykgRXMgJEZROXBsbSkgewogICAgICAgICAgICAkVGprcy0+akVVa21Kc1tdID0gRlFscUVGVCgnVHZxSScsICdGUTlwbG0nLCAnZVFROUlFbScpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJRaCBqRVVrbUogbXA5OSIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJEZROXBsbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhTRVVrbUpBcDk5KCRGUTlwbG0pCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT5qRVVrbUpBcDk5KCRGUTlwbG0sICdRaCcpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgImpFVWttSiBtUVQgbXA5OSIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSnxFaGhFdiAgJEZROXBsbXMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkZVFROUlFbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gakVVa21KQVFUQXA5OSgkRlE5cGxtcywgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPmpFVWttSkFwOTkoJEZROXBsbXMsICRlUVE5SUVtLCBUaHBJKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFbSAiUWggakVVa21KIG1RVCBtcDk5IiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaFNFVWttSkFRVEFwOTkoJEZROXBsbSkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPmpFVWttSkFRVEFwOTkoJEZROXBsbSwgJ1FoJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSAiakVVa21KIGVJVHVJSW0gIiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIGtUSWhFZTlJICAkVUU5cElzCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBxRWhFbCAgZVFROSAgJG1RVAogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gakVVa21KcklUdUlJbSgkRlE5cGxtLCBrVEloRWU5SSAkVUU5cElzLCAkZVFROUlFbSA9ICdFbWYnLCAkbVFUID0gaUU5c0kpCiAgICB7CiAgICAgICAgJFR2cUkgPSAnZUlUdUlJbSc7CgogICAgICAgIGtpICgkVUU5cElzIGttc1RFbUZJUWkgb0VoZVFtYUloa1FmKSB7CiAgICAgICAgICAgICRVRTlwSXMgPSBbJFVFOXBJcy0+c1RFaFQsICRVRTlwSXMtPkltZl07CiAgICAgICAgfQoKICAgICAgICAkVGprcy0+akVVa21Kc1tdID0gRlFscUVGVCgnVHZxSScsICdGUTlwbG0nLCAnVUU5cElzJywgJ2VRUTlJRW0nLCAnbVFUJyk7CgogICAgICAgICRUamtzLT5FZmZya21ma21KKEVoaEV2X3M5a0ZJKCRUamtzLT5GOUlFbXJrbWZrbUpzKHRoaDo6aTlFVFRJbSgkVUU5cElzKSksIHcsIHgpLCAnakVVa21KJyk7CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFIGhFdSBqRVVrbUogRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJHNSOQogICAgICogQHFFaEVsICBFaGhFdiAgJGVrbWZrbUpzCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGVRUTlJRW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGpFVWttSk5FdSgkc1I5LCBFaGhFdiAkZWttZmttSnMgPSBbXSwgJGVRUTlJRW0gPSAnRW1mJykKICAgIHsKICAgICAgICAkVHZxSSA9ICdORXUnOwoKICAgICAgICAkVGprcy0+akVVa21Kc1tdID0gRlFscUVGVCgnVHZxSScsICdzUjknLCAnZVFROUlFbScpOwoKICAgICAgICAkVGprcy0+RWZmcmttZmttSigkZWttZmttSnMsICdqRVVrbUonKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgaEV1IFFoIGpFVWttSiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkc1I5CiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkZWttZmttSnMKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFoU0VVa21KTkV1KCRzUjksIEVoaEV2ICRla21ma21KcyA9IFtdKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+akVVa21KTkV1KCRzUjksICRla21ma21KcywgJ1FoJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gIlFoZkloIGV2IiBGOUVwc0kgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8XEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaHxcQUtBdFxuRVRFZUVzSVxnOVFScEltVFxycGs5ZklofFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBzVGhrbUogICRma2hJRlRrUW0KICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqCiAgICAgKiBAVGpoUXVzIFxLbVVFOWtmdGhKcGxJbVRnVkZJcVRrUW0KICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFoZklocnYoJEZROXBsbSwgJGZraElGVGtRbSA9ICdFc0YnKQogICAgewogICAgICAgIGtpICgkVGprcy0+a3NHcElodkVlOUkoJEZROXBsbSkpIHsKICAgICAgICAgICAgWyRScElodiwgJGVrbWZrbUpzXSA9ICRUamtzLT5GaElFVElPcGUoJEZROXBsbSk7CgogICAgICAgICAgICAkRlE5cGxtID0gbUl1IGdWcWhJc3NrUW0oJygnLiRScElodi4nKScpOwoKICAgICAgICAgICAgJFRqa3MtPkVmZnJrbWZrbUooJGVrbWZrbUpzLCAkVGprcy0+cG1rUW1zID8gJ3Bta1FtTWhmSWgnIDogJ1FoZkloJyk7CiAgICAgICAgfQoKICAgICAgICAkZmtoSUZUa1FtID0gc1RoVFE5UXVJaCgkZmtoSUZUa1FtKTsKCiAgICAgICAga2kgKCEga21fRWhoRXYoJGZraElGVGtRbSwgWydFc0YnLCAnZklzRiddLCBUaHBJKSkgewogICAgICAgICAgICBUamhRdSBtSXUgS21VRTlrZnRoSnBsSW1UZ1ZGSXFUa1FtKCdNaGZJaCBma2hJRlRrUW0gbHBzVCBlSSAiRXNGIiBRaCAiZklzRiIuJyk7CiAgICAgICAgfQoKICAgICAgICAkVGprcy0+eyRUamtzLT5wbWtRbXMgPyAncG1rUW1NaGZJaHMnIDogJ1FoZklocyd9W10gPSBbCiAgICAgICAgICAgICdGUTlwbG0nID0+ICRGUTlwbG0sCiAgICAgICAgICAgICdma2hJRlRrUW0nID0+ICRma2hJRlRrUW0sCiAgICAgICAgXTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEUgZklzRkltZmttSiAiUWhmSWggZXYiIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZklofFxBS0F0XG5FVEVlRXNJXGc5UVJwSW1UXHJwazlmSWh8XEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBRaGZJaHJ2bklzRigkRlE5cGxtKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+UWhmSWhydigkRlE5cGxtLCAnZklzRicpOwogICAgfQoKICAgICsqKgogICAgICogdGZmIEVtICJRaGZJaCBldiIgRjlFcHNJIGlRaCBFIFRrbElzVEVscSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBcbzlRc3BoSXxcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZklofFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJEZROXBsbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gOUVUSXNUKCRGUTlwbG0gPSAnRmhJRVRJZl9FVCcpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT5RaGZJaHJ2KCRGUTlwbG0sICdmSXNGJyk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRW0gIlFoZkloIGV2IiBGOUVwc0kgaVFoIEUgVGtsSXNURWxxIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfFxBS0F0XG5FVEVlRXNJXEdwSWh2XHJwazlmSWh8XEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBROWZJc1QoJEZROXBsbSA9ICdGaElFVElmX0VUJykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPlFoZklocnYoJEZROXBsbSwgJ0VzRicpOwogICAgfQoKICAgICsqKgogICAgICogYXBUIFRqSSBScElodidzIGhJc3A5VHMga20gaEVtZlFsIFFoZkloLgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KfGttVCAgJHNJSWYKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGttTkVtZlFsTWhmSWgoJHNJSWYgPSAnJykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPlFoZklocnZORXUoJFRqa3MtPkpoRWxsRWgtPkZRbHFrOUlORW1mUWwoJHNJSWYpKTsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFIGhFdSAiUWhmSWggZXYiIEY5RXBzSSBUUSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRzUjkKICAgICAqIEBxRWhFbCAgRWhoRXYgICRla21ma21KcwogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gUWhmSWhydk5FdSgkc1I5LCAkZWttZmttSnMgPSBbXSkKICAgIHsKICAgICAgICAkVHZxSSA9ICdORXUnOwoKICAgICAgICAkVGprcy0+eyRUamtzLT5wbWtRbXMgPyAncG1rUW1NaGZJaHMnIDogJ1FoZklocyd9W10gPSBGUWxxRUZUKCdUdnFJJywgJ3NSOScpOwoKICAgICAgICAkVGprcy0+RWZmcmttZmttSigkZWttZmttSnMsICRUamtzLT5wbWtRbXMgPyAncG1rUW1NaGZJaCcgOiAnUWhmSWgnKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogdDlrRXMgVFEgc0lUIFRqSSAiUWlpc0lUIiBVRTlwSSBRaSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBrbVQgICRVRTlwSQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gczhrcSgkVUU5cEkpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT5RaWlzSVQoJFVFOXBJKTsKICAgIH0KCiAgICArKioKICAgICAqIE9JVCBUakkgIlFpaXNJVCIgVUU5cEkgUWkgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAga21UICAkVUU5cEkKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFFpaXNJVCgkVUU5cEkpCiAgICB7CiAgICAgICAgJHFoUXFJaFR2ID0gJFRqa3MtPnBta1FtcyA/ICdwbWtRbU1paXNJVCcgOiAnUWlpc0lUJzsKCiAgICAgICAgJFRqa3MtPiRxaFFxSWhUdiA9IGxFVih3LCAoa21UKSAkVUU5cEkpOwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0OWtFcyBUUSBzSVQgVGpJICI5a2xrVCIgVUU5cEkgUWkgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAga21UICAkVUU5cEkKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFRFOEkoJFVFOXBJKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+OWtsa1QoJFVFOXBJKTsKICAgIH0KCiAgICArKioKICAgICAqIE9JVCBUakkgIjlrbGtUIiBVRTlwSSBRaSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBrbVQgICRVRTlwSQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gOWtsa1QoJFVFOXBJKQogICAgewogICAgICAgICRxaFFxSWhUdiA9ICRUamtzLT5wbWtRbXMgPyAncG1rUW02a2xrVCcgOiAnOWtsa1QnOwoKICAgICAgICBraSAoJFVFOXBJID49IHcpIHsKICAgICAgICAgICAgJFRqa3MtPiRxaFFxSWhUdiA9ICEga3NfbXA5OSgkVUU5cEkpID8gKGttVCkgJFVFOXBJIDogbXA5OTsKICAgICAgICB9CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFICJKaFFwcSA5a2xrVCIgRjlFcHNJIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIGttVCAgJFVFOXBJCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJEZROXBsbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gSmhRcHE2a2xrVCgkVUU5cEksICRGUTlwbG0pCiAgICB7CiAgICAgICAga2kgKCRVRTlwSSA+PSB3KSB7CiAgICAgICAgICAgICRUamtzLT5KaFFwcTZrbGtUID0gRlFscUVGVCgnVUU5cEknLCAnRlE5cGxtJyk7CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiBPSVQgVGpJIDlrbGtUIEVtZiBRaWlzSVQgaVFoIEUgSmtVSW0gcUVKSS4KICAgICAqCiAgICAgKiBAcUVoRWwgIGttVCAgJHFFSkkKICAgICAqIEBxRWhFbCAga21UICAkcUloYUVKSQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gaVFoYUVKSSgkcUVKSSwgJHFJaGFFSkkgPSBYWikKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPlFpaXNJVCgoJHFFSkkgLSBYKSAqICRxSWhhRUpJKS0+OWtsa1QoJHFJaGFFSkkpOwogICAgfQoKICAgICsqKgogICAgICogb1Ftc1RoRWttIFRqSSBScElodiBUUSBUakkgcWhJVWtRcHMgInFFSkkiIFFpIGhJc3A5VHMgZUlpUWhJIEUgSmtVSW0gS24uCiAgICAgKgogICAgICogQHFFaEVsICBrbVQgICRxSWhhRUpJCiAgICAgKiBAcUVoRWwgIGttVHxtcDk5ICAkOUVzVEtmCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJEZROXBsbQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gaVFoYUVKSXJJaVFoSUtmKCRxSWhhRUpJID0gWFosICQ5RXNUS2YgPSB3LCAkRlE5cGxtID0gJ2tmJykKICAgIHsKICAgICAgICAkVGprcy0+UWhmSWhzID0gJFRqa3MtPmhJbFFVSWdWa3NUa21KTWhmSWhzMlFoKCRGUTlwbG0pOwoKICAgICAgICBraSAoISBrc19tcDk5KCQ5RXNUS2YpKSB7CiAgICAgICAgICAgICRUamtzLT51akloSSgkRlE5cGxtLCAnPCcsICQ5RXNUS2YpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzLT5RaGZJaHJ2KCRGUTlwbG0sICdmSXNGJykKICAgICAgICAgICAgICAgICAgICAtPjlrbGtUKCRxSWhhRUpJKTsKICAgIH0KCiAgICArKioKICAgICAqIG9RbXNUaEVrbSBUakkgUnBJaHYgVFEgVGpJIG1JVlQgInFFSkkiIFFpIGhJc3A5VHMgRWlUSWggRSBKa1VJbSBLbi4KICAgICAqCiAgICAgKiBAcUVoRWwgIGttVCAgJHFJaGFFSkkKICAgICAqIEBxRWhFbCAga21UfG1wOTkgICQ5RXNUS2YKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBpUWhhRUpJdGlUSWhLZigkcUloYUVKSSA9IFhaLCAkOUVzVEtmID0gdywgJEZROXBsbSA9ICdrZicpCiAgICB7CiAgICAgICAgJFRqa3MtPlFoZklocyA9ICRUamtzLT5oSWxRVUlnVmtzVGttSk1oZkloczJRaCgkRlE5cGxtKTsKCiAgICAgICAga2kgKCEga3NfbXA5OSgkOUVzVEtmKSkgewogICAgICAgICAgICAkVGprcy0+dWpJaEkoJEZROXBsbSwgJz4nLCAkOUVzVEtmKTsKICAgICAgICB9CgogICAgICAgIGhJVHBobSAkVGprcy0+UWhmSWhydigkRlE5cGxtLCAnRXNGJykKICAgICAgICAgICAgICAgICAgICAtPjlrbGtUKCRxSWhhRUpJKTsKICAgIH0KCiAgICArKioKICAgICAqIE5JbFFVSSBFOTkgSVZrc1RrbUogUWhmSWhzIEVtZiBRcVRrUW1FOTl2IEVmZiBFIG1JdSBRaGZJaC4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfFxBS0F0XG5FVEVlRXNJXEdwSWh2XHJwazlmSWh8XEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KfG1wOTkgICRGUTlwbG0KICAgICAqIEBxRWhFbCAgc1Roa21KICAkZmtoSUZUa1FtCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBoSVFoZkloKCRGUTlwbG0gPSBtcDk5LCAkZmtoSUZUa1FtID0gJ0VzRicpCiAgICB7CiAgICAgICAgJFRqa3MtPlFoZklocyA9IG1wOTk7CiAgICAgICAgJFRqa3MtPnBta1FtTWhmSWhzID0gbXA5OTsKICAgICAgICAkVGprcy0+ZWttZmttSnNbJ1FoZkloJ10gPSBbXTsKICAgICAgICAkVGprcy0+ZWttZmttSnNbJ3Bta1FtTWhmSWgnXSA9IFtdOwoKICAgICAgICBraSAoJEZROXBsbSkgewogICAgICAgICAgICBoSVRwaG0gJFRqa3MtPlFoZklocnYoJEZROXBsbSwgJGZraElGVGtRbSk7CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiAwSVQgRW0gRWhoRXYgdWtUaiBFOTkgUWhmSWhzIHVrVGogRSBKa1VJbSBGUTlwbG0gaElsUVVJZi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJEZROXBsbQogICAgICogQGhJVHBobSBFaGhFdgogICAgICorCiAgICBxaFFUSUZUSWYgaXBtRlRrUW0gaElsUVVJZ1Zrc1RrbUpNaGZJaHMyUWgoJEZROXBsbSkKICAgIHsKICAgICAgICBoSVRwaG0gb1E5OUlGVGtRbTo6bEU4SSgkVGprcy0+UWhmSWhzKQogICAgICAgICAgICAgICAgICAgIC0+aElMSUZUKGlwbUZUa1FtICgkUWhmSWgpIHBzSSAoJEZROXBsbSkgewogICAgICAgICAgICAgICAgICAgICAgICBoSVRwaG0ga3NzSVQoJFFoZkloWydGUTlwbG0nXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJFFoZkloWydGUTlwbG0nXSA9PT0gJEZROXBsbSA6IGlFOXNJOwogICAgICAgICAgICAgICAgICAgIH0pLT5VRTlwSXMoKS0+RTk5KCk7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBwbWtRbSBzVEVUSWxJbVQgVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8XEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaHxcQUtBdFxuRVRFZUVzSVxnOVFScEltVFxycGs5ZkloICAkUnBJaHYKICAgICAqIEBxRWhFbCAgZVFROSAgJEU5OQogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gcG1rUW0oJFJwSWh2LCAkRTk5ID0gaUU5c0kpCiAgICB7CiAgICAgICAga2kgKCRScElodiBrbXNURW1GSVFpIG85UXNwaEkpIHsKICAgICAgICAgICAgJFJwSWh2KCRScElodiA9ICRUamtzLT5tSXVHcElodigpKTsKICAgICAgICB9CgogICAgICAgICRUamtzLT5wbWtRbXNbXSA9IEZRbHFFRlQoJ1JwSWh2JywgJ0U5OScpOwoKICAgICAgICAkVGprcy0+RWZmcmttZmttSigkUnBJaHYtPkpJVHJrbWZrbUpzKCksICdwbWtRbScpOwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiB0ZmYgRSBwbWtRbSBFOTkgc1RFVElsSW1UIFRRIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJfFxBS0F0XG5FVEVlRXNJXEdwSWh2XHJwazlmSWh8XEFLQXRcbkVURWVFc0lcZzlRUnBJbVRccnBrOWZJaCAgJFJwSWh2CiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBwbWtRbXQ5OSgkUnBJaHYpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT5wbWtRbSgkUnBJaHYsIFRocEkpOwogICAgfQoKICAgICsqKgogICAgICogNlFGOCBUakkgc0k5SUZUSWYgaFF1cyBrbSBUakkgVEVlOUkuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUp8ZVFROSAgJFVFOXBJCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSA5UUY4KCRVRTlwSSA9IFRocEkpCiAgICB7CiAgICAgICAgJFRqa3MtPjlRRjggPSAkVUU5cEk7CgogICAgICAgIGtpICghIGtzX21wOTkoJFRqa3MtPjlRRjgpKSB7CiAgICAgICAgICAgICRUamtzLT5wc0liaGtUSWFmUSgpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogNlFGOCBUakkgc0k5SUZUSWYgaFF1cyBrbSBUakkgVEVlOUkgaVFoIHBxZkVUa21KLgogICAgICoKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIDlRRjgyUWhQcWZFVEkoKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+OVFGOChUaHBJKTsKICAgIH0KCiAgICArKioKICAgICAqIE9qRWhJIDlRRjggVGpJIHNJOUlGVElmIGhRdXMga20gVGpJIFRFZTlJLgogICAgICoKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHNqRWhJZjZRRjgoKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+OVFGOChpRTlzSSk7CiAgICB9CgogICAgKyoqCiAgICAgKiBOSUprc1RJaCBFIEY5UXNwaEkgVFEgZUkga21VUThJZiBlSWlRaEkgVGpJIFJwSWh2IGtzIElWSUZwVElmLgogICAgICoKICAgICAqIEBxRWhFbCAgRkU5OUVlOUkgICRGRTk5ZUVGOAogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gZUlpUWhJR3BJaHYoRkU5OUVlOUkgJEZFOTllRUY4KQogICAgewogICAgICAgICRUamtzLT5lSWlRaElHcElodm9FOTllRUY4c1tdID0gJEZFOTllRUY4OwoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiBLbVVROEkgVGpJICJlSWlRaEkgUnBJaHYiIGxRZmtpa0ZFVGtRbSBGRTk5ZUVGOHMuCiAgICAgKgogICAgICogQGhJVHBobSBVUWtmCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBFcXE5dnJJaVFoSUdwSWh2b0U5OWVFRjhzKCkKICAgIHsKICAgICAgICBpUWhJRUZqICgkVGprcy0+ZUlpUWhJR3BJaHZvRTk5ZUVGOHMgRXMgJEZFOTllRUY4KSB7CiAgICAgICAgICAgICRGRTk5ZUVGOCgkVGprcyk7CiAgICAgICAgfQoKICAgICAgICAkVGprcy0+ZUlpUWhJR3BJaHZvRTk5ZUVGOHMgPSBbXTsKICAgIH0KCiAgICArKioKICAgICAqIDBJVCBUakkgT0c2IGhJcWhJc0ltVEVUa1FtIFFpIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAaElUcGhtIHNUaGttSgogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gVFFPUjkoKQogICAgewogICAgICAgICRUamtzLT5FcXE5dnJJaVFoSUdwSWh2b0U5OWVFRjhzKCk7CgogICAgICAgIGhJVHBobSAkVGprcy0+SmhFbGxFaC0+RlFscWs5SU9JOUlGVCgkVGprcyk7CiAgICB9CgogICAgKyoqCiAgICAgKiAwSVQgVGpJIGhFdSBPRzYgaElxaElzSW1URVRrUW0gUWkgVGpJIFJwSWh2IHVrVGogSWxlSWZmSWYgZWttZmttSnMuCiAgICAgKgogICAgICogQGhJVHBobSBzVGhrbUoKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFRRTkV1T1I5KCkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPkpoRWxsRWgtPnNwZXNUa1RwVElya21ma21Kc0ttVFFORXVPUjkoCiAgICAgICAgICAgICRUamtzLT5UUU9SOSgpLCAkVGprcy0+RlFtbUlGVGtRbS0+cWhJcUVoSXJrbWZrbUpzKCRUamtzLT5KSVRya21ma21KcygpKQogICAgICAgICk7CiAgICB9CgogICAgKyoqCiAgICAgKiBnVklGcFRJIEUgUnBJaHYgaVFoIEUgc2ttSjlJIGhJRlFoZiBldiBLbi4KICAgICAqCiAgICAgKiBAcUVoRWwgIGttVHxzVGhrbUogICRrZgogICAgICogQHFFaEVsICBFaGhFdnxzVGhrbUogICRGUTlwbG1zCiAgICAgKiBAaElUcGhtIGxrVklmfHNURVRrRgogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gaWttZigka2YsICRGUTlwbG1zID0gWycqJ10pCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT51akloSSgna2YnLCAnPScsICRrZiktPmlraHNUKCRGUTlwbG1zKTsKICAgIH0KCiAgICArKioKICAgICAqIGdWSUZwVEkgRSBScElodiBpUWggRSBza21KOUkgaElGUWhmIGV2IEtuIFFoIEZFOTkgRSBGRTk5ZUVGOC4KICAgICAqCiAgICAgKiBAcUVoRWwgIGxrVklmICAka2YKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8RWhoRXZ8c1Roa21KICAkRlE5cGxtcwogICAgICogQHFFaEVsICBcbzlRc3BoSXxtcDk5ICAkRkU5OWVFRjgKICAgICAqIEBoSVRwaG0gbGtWSWZ8c1RFVGtGCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBpa21mTWgoJGtmLCAkRlE5cGxtcyA9IFsnKiddLCBvOVFzcGhJICRGRTk5ZUVGOCA9IG1wOTkpCiAgICB7CiAgICAgICAga2kgKCRGUTlwbG1zIGttc1RFbUZJUWkgbzlRc3BoSSkgewogICAgICAgICAgICAkRkU5OWVFRjggPSAkRlE5cGxtczsKCiAgICAgICAgICAgICRGUTlwbG1zID0gWycqJ107CiAgICAgICAgfQoKICAgICAgICBraSAoISBrc19tcDk5KCRmRVRFID0gJFRqa3MtPmlrbWYoJGtmLCAkRlE5cGxtcykpKSB7CiAgICAgICAgICAgIGhJVHBobSAkZkVURTsKICAgICAgICB9CgogICAgICAgIGhJVHBobSAkRkU5OWVFRjgoKTsKICAgIH0KCiAgICArKioKICAgICAqIDBJVCBFIHNrbUo5SSBGUTlwbG0ncyBVRTlwSSBpaFFsIFRqSSBpa2hzVCBoSXNwOVQgUWkgRSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJEZROXBsbQogICAgICogQGhJVHBobSBsa1ZJZgogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gVUU5cEkoJEZROXBsbSkKICAgIHsKICAgICAgICAkaElzcDlUID0gKEVoaEV2KSAkVGprcy0+aWtoc1QoWyRGUTlwbG1dKTsKCiAgICAgICAgaElUcGhtIEZRcG1UKCRoSXNwOVQpID4gdyA/IGhJc0lUKCRoSXNwOVQpIDogbXA5OTsKICAgIH0KCiAgICArKioKICAgICAqIDBJVCBFIHNrbUo5SSBJVnFoSXNza1FtIFVFOXBJIGloUWwgVGpJIGlraHNUIGhJc3A5VCBRaSBFIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkSVZxaElzc2tRbQogICAgICogQHFFaEVsICBFaGhFdiAgJGVrbWZrbUpzCiAgICAgKiBAaElUcGhtIGxrVklmCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBoRXVCRTlwSShzVGhrbUogJElWcWhJc3NrUW0sIEVoaEV2ICRla21ma21KcyA9IFtdKQogICAgewogICAgICAgICRoSXNwOVQgPSAoRWhoRXYpICRUamtzLT5zSTlJRlRORXUoJElWcWhJc3NrUW0sICRla21ma21KcyktPmlraHNUKCk7CgogICAgICAgIGhJVHBobSBGUXBtVCgkaElzcDlUKSA+IHcgPyBoSXNJVCgkaElzcDlUKSA6IG1wOTk7CiAgICB9CgogICAgKyoqCiAgICAgKiAwSVQgRSBza21KOUkgRlE5cGxtJ3MgVUU5cEkgaWhRbCBUakkgaWtoc1QgaElzcDlUIFFpIEUgUnBJaHYga2kga1QncyBUakkgc1E5SSBsRVRGamttSiBoSUZRaGYuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRGUTlwbG0KICAgICAqIEBoSVRwaG0gbGtWSWYKICAgICAqCiAgICAgKiBAVGpoUXVzIFxBS0F0XG5FVEVlRXNJXE5JRlFoZnNBUVQyUXBtZmdWRklxVGtRbQogICAgICogQFRqaFF1cyBcQUtBdFxuRVRFZUVzSVwzcDlUa3E5SU5JRlFoZnMyUXBtZmdWRklxVGtRbQogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gc1E5SUJFOXBJKCRGUTlwbG0pCiAgICB7CiAgICAgICAgJGhJc3A5VCA9IChFaGhFdikgJFRqa3MtPnNROUkoWyRGUTlwbG1dKTsKCiAgICAgICAgaElUcGhtIGhJc0lUKCRoSXNwOVQpOwogICAgfQoKICAgICsqKgogICAgICogZ1ZJRnBUSSBUakkgUnBJaHYgRXMgRSAic0k5SUZUIiBzVEVUSWxJbVQuCiAgICAgKgogICAgICogQHFFaEVsICBFaGhFdnxzVGhrbUogICRGUTlwbG1zCiAgICAgKiBAaElUcGhtIFxLOTlwbGttRVRJXE9wcXFRaFRcb1E5OUlGVGtRbQogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gSklUKCRGUTlwbG1zID0gWycqJ10pCiAgICB7CiAgICAgICAgJGtUSWxzID0gRlE5OUlGVCgkVGprcy0+UW1GSWJrVGpvUTlwbG1zKHRoaDo6dWhFcSgkRlE5cGxtcyksIGlwbUZUa1FtICgpIHsKICAgICAgICAgICAgaElUcGhtICRUamtzLT5xaFFGSXNzUWgtPnFoUUZJc3NPSTlJRlQoJFRqa3MsICRUamtzLT5ocG1PSTlJRlQoKSk7CiAgICAgICAgfSkpOwoKICAgICAgICBoSVRwaG0ga3NzSVQoJFRqa3MtPkpoUXBxNmtsa1QpCiAgICAgICAgICAgID8gJFRqa3MtPnVrVGpRcFQwaFFwcTZrbGtUMUl2cygka1RJbHMpCiAgICAgICAgICAgIDogJGtUSWxzOwogICAgfQoKICAgICsqKgogICAgICogTnBtIFRqSSBScElodiBFcyBFICJzSTlJRlQiIHNURVRJbEltVCBFSkVrbXNUIFRqSSBGUW1tSUZUa1FtLgogICAgICoKICAgICAqIEBoSVRwaG0gRWhoRXYKICAgICAqKwogICAgcWhRVElGVElmIGlwbUZUa1FtIGhwbU9JOUlGVCgpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT5GUW1tSUZUa1FtLT5zSTlJRlQoCiAgICAgICAgICAgICRUamtzLT5UUU9SOSgpLCAkVGprcy0+SklUcmttZmttSnMoKSwgISAkVGprcy0+cHNJYmhrVElhZlEKICAgICAgICApOwogICAgfQoKICAgICsqKgogICAgICogTklsUVVJIFRqSSBKaFFwcSA5a2xrVCA4SXZzIGloUWwgVGpJIGhJc3A5VHMga20gVGpJIEZROTlJRlRrUW0uCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxPcHFxUWhUXG9ROTlJRlRrUW0gICRrVElscwogICAgICogQGhJVHBobSBcSzk5cGxrbUVUSVxPcHFxUWhUXG9ROTlJRlRrUW0KICAgICAqKwogICAgcWhRVElGVElmIGlwbUZUa1FtIHVrVGpRcFQwaFFwcTZrbGtUMUl2cygka1RJbHMpCiAgICB7CiAgICAgICAgJDhJdnNIUU5JbFFVSSA9IFsnOUVoRVVJOV9oUXUnXTsKCiAgICAgICAga2kgKGtzX3NUaGttSigkVGprcy0+SmhRcHE2a2xrVFsnRlE5cGxtJ10pKSB7CiAgICAgICAgICAgICRGUTlwbG0gPSA5RXNUKElWcTlRZkkoJy4nLCAkVGprcy0+SmhRcHE2a2xrVFsnRlE5cGxtJ10pKTsKCiAgICAgICAgICAgICQ4SXZzSFFOSWxRVUlbXSA9ICdAOUVoRVVJOV9KaFFwcSA6PSAnLiRUamtzLT5KaEVsbEVoLT51aEVxKCRGUTlwbG0pOwogICAgICAgICAgICAkOEl2c0hRTklsUVVJW10gPSAnQDlFaEVVSTlfSmhRcHEgOj0gJy4kVGprcy0+SmhFbGxFaC0+dWhFcSgncWtVUVRfJy4kRlE5cGxtKTsKICAgICAgICB9CgogICAgICAgICRrVElscy0+SUVGaihpcG1GVGtRbSAoJGtUSWwpIHBzSSAoJDhJdnNIUU5JbFFVSSkgewogICAgICAgICAgICBpUWhJRUZqICgkOEl2c0hRTklsUVVJIEVzICQ4SXYpIHsKICAgICAgICAgICAgICAgIHBtc0lUKCRrVElsLT4kOEl2KTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBoSVRwaG0gJGtUSWxzOwogICAgfQoKICAgICsqKgogICAgICogYUVKa21FVEkgVGpJIEprVUltIFJwSWh2IGttVFEgRSBza2xxOUkgcUVKa21FVFFoLgogICAgICoKICAgICAqIEBxRWhFbCAga21UfFxvOVFzcGhJICAkcUloYUVKSQogICAgICogQHFFaEVsICBFaGhFdnxzVGhrbUogICRGUTlwbG1zCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJHFFSklBRWxJCiAgICAgKiBAcUVoRWwgIGttVHxtcDk5ICAkcUVKSQogICAgICogQHFFaEVsICBcbzlRc3BoSXxrbVR8bXA5OSAgJFRRVEU5CiAgICAgKiBAaElUcGhtIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xhRUprbUVUa1FtXDZJbUpUanR1RWhJYUVKa21FVFFoCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBxRUprbUVUSSgkcUloYUVKSSA9IFhaLCAkRlE5cGxtcyA9IFsnKiddLCAkcUVKSUFFbEkgPSAncUVKSScsICRxRUpJID0gbXA5OSwgJFRRVEU5ID0gbXA5OSkKICAgIHsKICAgICAgICAkcUVKSSA9ICRxRUpJID86IGFFSmttRVRRaDo6aElzUTlVSW9waGhJbVRhRUpJKCRxRUpJQUVsSSk7CgogICAgICAgICRUUVRFOSA9IFVFOXBJKCRUUVRFOSkgPz8gJFRqa3MtPkpJVG9RcG1UMlFoYUVKa21FVGtRbSgpOwoKICAgICAgICAkcUloYUVKSSA9ICRxSWhhRUpJIGttc1RFbUZJUWkgbzlRc3BoSSA/ICRxSWhhRUpJKCRUUVRFOSkgOiAkcUloYUVKSTsKCiAgICAgICAgJGhJc3A5VHMgPSAkVFFURTkgPyAkVGprcy0+aVFoYUVKSSgkcUVKSSwgJHFJaGFFSkkpLT5KSVQoJEZROXBsbXMpIDogRlE5OUlGVCgpOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPnFFSmttRVRRaCgkaElzcDlUcywgJFRRVEU5LCAkcUloYUVKSSwgJHFFSkksIFsKICAgICAgICAgICAgJ3FFVGonID0+IGFFSmttRVRRaDo6aElzUTlVSW9waGhJbVRhRVRqKCksCiAgICAgICAgICAgICdxRUpJQUVsSScgPT4gJHFFSklBRWxJLAogICAgICAgIF0pOwogICAgfQoKICAgICsqKgogICAgICogMElUIEUgcUVKa21FVFFoIFFtOXYgc3BxcVFoVGttSiBza2xxOUkgbUlWVCBFbWYgcWhJVWtRcHMgOWttOHMuCiAgICAgKgogICAgICogSGprcyBrcyBsUWhJIElpaWtGa0ltVCBRbSA5RWhKSWggZkVURS1zSVRzLCBJVEYuCiAgICAgKgogICAgICogQHFFaEVsICBrbVQgICRxSWhhRUpJCiAgICAgKiBAcUVoRWwgIEVoaEV2fHNUaGttSiAgJEZROXBsbXMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkcUVKSUFFbEkKICAgICAqIEBxRWhFbCAga21UfG1wOTkgICRxRUpJCiAgICAgKiBAaElUcGhtIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xhRUprbUVUa1FtXGFFSmttRVRRaAogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gc2tscTlJYUVKa21FVEkoJHFJaGFFSkkgPSBYWiwgJEZROXBsbXMgPSBbJyonXSwgJHFFSklBRWxJID0gJ3FFSkknLCAkcUVKSSA9IG1wOTkpCiAgICB7CiAgICAgICAgJHFFSkkgPSAkcUVKSSA/OiBhRUprbUVUUWg6OmhJc1E5VUlvcGhoSW1UYUVKSSgkcUVKSUFFbEkpOwoKICAgICAgICAkVGprcy0+UWlpc0lUKCgkcUVKSSAtIFgpICogJHFJaGFFSkkpLT45a2xrVCgkcUloYUVKSSAvIFgpOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPnNrbHE5SWFFSmttRVRRaCgkVGprcy0+SklUKCRGUTlwbG1zKSwgJHFJaGFFSkksICRxRUpJLCBbCiAgICAgICAgICAgICdxRVRqJyA9PiBhRUprbUVUUWg6OmhJc1E5VUlvcGhoSW1UYUVUaigpLAogICAgICAgICAgICAncUVKSUFFbEknID0+ICRxRUpJQUVsSSwKICAgICAgICBdKTsKICAgIH0KCiAgICArKioKICAgICAqIDBJVCBFIHFFSmttRVRRaCBRbTl2IHNwcXFRaFRrbUogc2tscTlJIG1JVlQgRW1mIHFoSVVrUXBzIDlrbThzLgogICAgICoKICAgICAqIEhqa3Mga3MgbFFoSSBJaWlrRmtJbVQgUW0gOUVoSkloIGZFVEUtc0lUcywgSVRGLgogICAgICoKICAgICAqIEBxRWhFbCAga21UfG1wOTkgICRxSWhhRUpJCiAgICAgKiBAcUVoRWwgIEVoaEV2fHNUaGttSiAgJEZROXBsbXMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRnBoc1FoQUVsSQogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxhRUprbUVUa1FtXG9waHNRaHxzVGhrbUp8bXA5OSAgJEZwaHNRaAogICAgICogQGhJVHBobSBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcYUVKa21FVGtRbVxvcGhzUWhhRUprbUVUUWgKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIEZwaHNRaGFFSmttRVRJKCRxSWhhRUpJID0gWFosICRGUTlwbG1zID0gWycqJ10sICRGcGhzUWhBRWxJID0gJ0ZwaHNRaCcsICRGcGhzUWggPSBtcDk5KQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+cUVKa21FVElQc2ttSm9waHNRaCgkcUloYUVKSSwgJEZROXBsbXMsICRGcGhzUWhBRWxJLCAkRnBoc1FoKTsKICAgIH0KCiAgICArKioKICAgICAqIGdtc3BoSSBUakkgcWhRcUloIFFoZkloIGV2IGhJUnBraElmIGlRaCBGcGhzUWggcUVKa21FVGtRbS4KICAgICAqCiAgICAgKiBAcUVoRWwgIGVRUTkgICRzalFwOWZOSVVJaHNJCiAgICAgKiBAaElUcGhtIFxLOTlwbGttRVRJXE9wcXFRaFRcb1E5OUlGVGtRbQogICAgICorCiAgICBxaFFUSUZUSWYgaXBtRlRrUW0gSW1zcGhJTWhmSWgyUWhvcGhzUWhhRUprbUVUa1FtKCRzalFwOWZOSVVJaHNJID0gaUU5c0kpCiAgICB7CiAgICAgICAga2kgKElscVR2KCRUamtzLT5RaGZJaHMpICYmIElscVR2KCRUamtzLT5wbWtRbU1oZklocykpIHsKICAgICAgICAgICAgJFRqa3MtPkltaVFoRklNaGZJaHJ2KCk7CiAgICAgICAgfQoKICAgICAgICAkaElVSWhzSW5raElGVGtRbSA9IGlwbUZUa1FtICgkUWhmSWgpIHsKICAgICAgICAgICAga2kgKCEga3NzSVQoJFFoZkloWydma2hJRlRrUW0nXSkpIHsKICAgICAgICAgICAgICAgIGhJVHBobSAkUWhmSWg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRRaGZJaFsnZmtoSUZUa1FtJ10gPSAkUWhmSWhbJ2ZraElGVGtRbSddID09PSAnRXNGJyA/ICdmSXNGJyA6ICdFc0YnOwoKICAgICAgICAgICAgaElUcGhtICRRaGZJaDsKICAgICAgICB9OwoKICAgICAgICBraSAoJHNqUXA5Zk5JVUloc0kpIHsKICAgICAgICAgICAgJFRqa3MtPlFoZklocyA9IEZROTlJRlQoJFRqa3MtPlFoZklocyktPmxFcSgkaElVSWhzSW5raElGVGtRbSktPlRRdGhoRXYoKTsKICAgICAgICAgICAgJFRqa3MtPnBta1FtTWhmSWhzID0gRlE5OUlGVCgkVGprcy0+cG1rUW1NaGZJaHMpLT5sRXEoJGhJVUloc0lua2hJRlRrUW0pLT5UUXRoaEV2KCk7CiAgICAgICAgfQoKICAgICAgICAkUWhmSWhzID0gISBJbHFUdigkVGprcy0+cG1rUW1NaGZJaHMpID8gJFRqa3MtPnBta1FtTWhmSWhzIDogJFRqa3MtPlFoZkloczsKCiAgICAgICAgaElUcGhtIEZROTlJRlQoJFFoZklocykKICAgICAgICAgICAgLT5pazlUSWgoaW0gKCRRaGZJaCkgPT4gdGhoOjpqRXMoJFFoZkloLCAnZmtoSUZUa1FtJykpCiAgICAgICAgICAgIC0+VUU5cElzKCk7CiAgICB9CgogICAgKyoqCiAgICAgKiAwSVQgVGpJIEZRcG1UIFFpIFRqSSBUUVRFOSBoSUZRaGZzIGlRaCBUakkgcUVKa21FVFFoLgogICAgICoKICAgICAqIEBxRWhFbCAgRWhoRXYgICRGUTlwbG1zCiAgICAgKiBAaElUcGhtIGttVAogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gSklUb1FwbVQyUWhhRUprbUVUa1FtKCRGUTlwbG1zID0gWycqJ10pCiAgICB7CiAgICAgICAgJGhJc3A5VHMgPSAkVGprcy0+aHBtYUVKa21FVGtRbW9RcG1UR3BJaHYoJEZROXBsbXMpOwoKICAgICAgICArKyBNbUZJIHVJIGpFVUkgaHBtIFRqSSBxRUprbUVUa1FtIEZRcG1UIFJwSWh2LCB1SSB1azk5IEpJVCBUakkgaElzcDlUa21KIEZRcG1UIEVtZgogICAgICAgICsrIFRFOEkga21UUSBFRkZRcG1UIHVqRVQgVHZxSSBRaSBScElodiBrVCB1RXMuIGJqSW0gVGpJaEkga3MgRSBKaFFwcSBldiB1SSB1azk5CiAgICAgICAgKysgTHBzVCBoSVRwaG0gVGpJIEZRcG1UIFFpIFRqSSBJbVRraEkgaElzcDlUcyBzSVQgc2ttRkkgVGpFVCB1azk5IGVJIEZRaGhJRlQuCiAgICAgICAga2kgKCEga3NzSVQoJGhJc3A5VHNbd10pKSB7CiAgICAgICAgICAgIGhJVHBobSB3OwogICAgICAgIH0gSTlzSWtpIChrc19RZUxJRlQoJGhJc3A5VHNbd10pKSB7CiAgICAgICAgICAgIGhJVHBobSAoa21UKSAkaElzcDlUc1t3XS0+RUpKaElKRVRJOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtIChrbVQpIEVoaEV2X0ZqRW1KSV84SXZfRkVzSSgoRWhoRXYpICRoSXNwOVRzW3ddKVsnRUpKaElKRVRJJ107CiAgICB9CgogICAgKyoqCiAgICAgKiBOcG0gRSBxRUprbUVUa1FtIEZRcG1UIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgRWhoRXYgICRGUTlwbG1zCiAgICAgKiBAaElUcGhtIEVoaEV2CiAgICAgKisKICAgIHFoUVRJRlRJZiBpcG1GVGtRbSBocG1hRUprbUVUa1Ftb1FwbVRHcElodigkRlE5cGxtcyA9IFsnKiddKQogICAgewogICAgICAgIGtpICgkVGprcy0+SmhRcHFzIHx8ICRUamtzLT5qRVVrbUpzKSB7CiAgICAgICAgICAgICRGOVFtSSA9ICRUamtzLT5GOVFtSTJRaGFFSmttRVRrUW1vUXBtVCgpOwoKICAgICAgICAgICAga2kgKGtzX21wOTkoJEY5UW1JLT5GUTlwbG1zKSAmJiAhIElscVR2KCRUamtzLT5MUWttcykpIHsKICAgICAgICAgICAgICAgICRGOVFtSS0+c0k5SUZUKCRUamtzLT5paFFsLicuKicpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBoSVRwaG0gJFRqa3MtPm1JdUdwSWh2KCkKICAgICAgICAgICAgICAgIC0+aWhRbChtSXUgZ1ZxaElzc2tRbSgnKCcuJEY5UW1JLT5UUU9SOSgpLicpIEVzICcuJFRqa3MtPkpoRWxsRWgtPnVoRXEoJ0VKSmhJSkVUSV9URWU5SScpKSkKICAgICAgICAgICAgICAgIC0+bEloSklya21ma21KcygkRjlRbUkpCiAgICAgICAgICAgICAgICAtPnNJVHRKSmhJSkVUSSgnRlFwbVQnLCAkVGprcy0+dWtUalFwVE9JOUlGVHQ5a0VzSXMoJEZROXBsbXMpKQogICAgICAgICAgICAgICAgLT5KSVQoKS0+RTk5KCk7CiAgICAgICAgfQoKICAgICAgICAkdWtUalFwVCA9ICRUamtzLT5wbWtRbXMgPyBbJ1FoZklocycsICc5a2xrVCcsICdRaWlzSVQnXSA6IFsnRlE5cGxtcycsICdRaGZJaHMnLCAnOWtsa1QnLCAnUWlpc0lUJ107CgogICAgICAgIGhJVHBobSAkVGprcy0+RjlRbUlia1RqUXBUKCR1a1RqUXBUKQogICAgICAgICAgICAgICAgICAgIC0+RjlRbUlia1RqUXBUcmttZmttSnMoJFRqa3MtPnBta1FtcyA/IFsnUWhmSWgnXSA6IFsnc0k5SUZUJywgJ1FoZkloJ10pCiAgICAgICAgICAgICAgICAgICAgLT5zSVR0SkpoSUpFVEkoJ0ZRcG1UJywgJFRqa3MtPnVrVGpRcFRPSTlJRlR0OWtFc0lzKCRGUTlwbG1zKSkKICAgICAgICAgICAgICAgICAgICAtPkpJVCgpLT5FOTkoKTsKICAgIH0KCiAgICArKioKICAgICAqIG85UW1JIFRqSSBJVmtzVGttSiBScElodiBrbXNURW1GSSBpUWggcHNFSkkga20gRSBxRUprbUVUa1FtIHNwZVJwSWh2LgogICAgICoKICAgICAqIEBoSVRwaG0gc0k5aQogICAgICorCiAgICBxaFFUSUZUSWYgaXBtRlRrUW0gRjlRbUkyUWhhRUprbUVUa1Ftb1FwbVQoKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+RjlRbUlia1RqUXBUKFsnUWhmSWhzJywgJzlrbGtUJywgJ1FpaXNJVCddKQogICAgICAgICAgICAgICAgICAgIC0+RjlRbUlia1RqUXBUcmttZmttSnMoWydRaGZJaCddKTsKICAgIH0KCiAgICArKioKICAgICAqIE5JbFFVSSBUakkgRlE5cGxtIEU5a0VzSXMgc2ttRkkgVGpJdiB1azk5IGVoSUU4IEZRcG1UIFJwSWhrSXMuCiAgICAgKgogICAgICogQHFFaEVsICBFaGhFdiAgJEZROXBsbXMKICAgICAqIEBoSVRwaG0gRWhoRXYKICAgICAqKwogICAgcWhRVElGVElmIGlwbUZUa1FtIHVrVGpRcFRPSTlJRlR0OWtFc0lzKEVoaEV2ICRGUTlwbG1zKQogICAgewogICAgICAgIGhJVHBobSBFaGhFdl9sRXEoaXBtRlRrUW0gKCRGUTlwbG0pIHsKICAgICAgICAgICAgaElUcGhtIGtzX3NUaGttSigkRlE5cGxtKSAmJiAoJEU5a0VzYVFza1RrUW0gPSBzVGhrcVFzKCRGUTlwbG0sICcgRXMgJykpICE9PSBpRTlzSQogICAgICAgICAgICAgICAgICAgID8gc3Blc1RoKCRGUTlwbG0sIHcsICRFOWtFc2FRc2tUa1FtKSA6ICRGUTlwbG07CiAgICAgICAgfSwgJEZROXBsbXMpOwogICAgfQoKICAgICsqKgogICAgICogMElUIEUgOUVXdiBGUTk5SUZUa1FtIGlRaCBUakkgSmtVSW0gUnBJaHYuCiAgICAgKgogICAgICogQGhJVHBobSBcSzk5cGxrbUVUSVxPcHFxUWhUXDZFV3ZvUTk5SUZUa1FtCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBGcGhzUWgoKQogICAgewogICAgICAgIGtpIChrc19tcDk5KCRUamtzLT5GUTlwbG1zKSkgewogICAgICAgICAgICAkVGprcy0+RlE5cGxtcyA9IFsnKiddOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtIG1JdSA2RVd2b1E5OUlGVGtRbShpcG1GVGtRbSAoKSB7CiAgICAgICAgICAgIHZrSTlmIGloUWwgJFRqa3MtPkZRbW1JRlRrUW0tPkZwaHNRaCgKICAgICAgICAgICAgICAgICRUamtzLT5UUU9SOSgpLCAkVGprcy0+SklUcmttZmttSnMoKSwgISAkVGprcy0+cHNJYmhrVElhZlEKICAgICAgICAgICAgKTsKICAgICAgICB9KTsKICAgIH0KCiAgICArKioKICAgICAqIEhqaFF1IEVtIElWRklxVGtRbSBraSBUakkgUnBJaHYgZlFJc20nVCBqRVVJIEVtIFFoZklocnYgRjlFcHNJLgogICAgICoKICAgICAqIEBoSVRwaG0gVVFrZgogICAgICoKICAgICAqIEBUamhRdXMgXE5wbVRrbElnVkZJcVRrUW0KICAgICAqKwogICAgcWhRVElGVElmIGlwbUZUa1FtIEltaVFoRklNaGZJaHJ2KCkKICAgIHsKICAgICAgICBraSAoSWxxVHYoJFRqa3MtPlFoZklocykgJiYgSWxxVHYoJFRqa3MtPnBta1FtTWhmSWhzKSkgewogICAgICAgICAgICBUamhRdSBtSXUgTnBtVGtsSWdWRklxVGtRbSgnY1FwIGxwc1Qgc3FJRmtpdiBFbSBRaGZJaHJ2IEY5RXBzSSB1akltIHBza21KIFRqa3MgaXBtRlRrUW0uJyk7CiAgICAgICAgfQogICAgfQoKICAgICsqKgogICAgICogMElUIEUgRlE5OUlGVGtRbSBrbXNURW1GSSBGUW1URWtta21KIFRqSSBVRTlwSXMgUWkgRSBKa1VJbSBGUTlwbG0uCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgc1Roa21KfG1wOTkgICQ4SXYKICAgICAqIEBoSVRwaG0gXEs5OXBsa21FVElcT3BxcVFoVFxvUTk5SUZUa1FtCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBxOXBGOCgkRlE5cGxtLCAkOEl2ID0gbXA5OSkKICAgIHsKICAgICAgICArKyAya2hzVCwgdUkgdWs5OSBtSUlmIFRRIHNJOUlGVCBUakkgaElzcDlUcyBRaSBUakkgUnBJaHYgRUZGUXBtVGttSiBpUWggVGpJCiAgICAgICAgKysgSmtVSW0gRlE5cGxtcyArIDhJdi4gTW1GSSB1SSBqRVVJIFRqSSBoSXNwOVRzLCB1SSB1azk5IGVJIEVlOUkgVFEgVEU4SQogICAgICAgICsrIFRqSSBoSXNwOVRzIEVtZiBKSVQgVGpJIElWRUZUIGZFVEUgVGpFVCB1RXMgaElScElzVElmIGlRaCBUakkgUnBJaHYuCiAgICAgICAgJFJwSWh2TklzcDlUID0gJFRqa3MtPlFtRklia1Rqb1E5cGxtcygKICAgICAgICAgICAga3NfbXA5OSgkOEl2KSA/IFskRlE5cGxtXSA6IFskRlE5cGxtLCAkOEl2XSwKICAgICAgICAgICAgaXBtRlRrUW0gKCkgewogICAgICAgICAgICAgICAgaElUcGhtICRUamtzLT5xaFFGSXNzUWgtPnFoUUZJc3NPSTlJRlQoCiAgICAgICAgICAgICAgICAgICAgJFRqa3MsICRUamtzLT5ocG1PSTlJRlQoKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICk7CgogICAgICAgIGtpIChJbHFUdigkUnBJaHZOSXNwOVQpKSB7CiAgICAgICAgICAgIGhJVHBobSBGUTk5SUZUKCk7CiAgICAgICAgfQoKICAgICAgICArKyBLaSBUakkgRlE5cGxtcyBFaEkgUnBFOWtpa0lmIHVrVGogRSBURWU5SSBRaCBqRVVJIEVtIEU5a0VzLCB1SSBGRW1tUVQgcHNJCiAgICAgICAgKysgVGpRc0kgZmtoSUZUOXYga20gVGpJICJxOXBGOCIgUXFJaEVUa1FtcyBza21GSSBUakkgaElzcDlUcyBpaFFsIFRqSSBucgogICAgICAgICsrIEVoSSBRbTl2IDhJdklmIGV2IFRqSSBGUTlwbG0ga1RzSTlpLiBiSSc5OSBzVGhrcSBUakkgVEVlOUkgUXBUIGpJaEkuCiAgICAgICAgJEZROXBsbSA9ICRUamtzLT5zVGhrcUhFZTlJMlFoYTlwRjgoJEZROXBsbSk7CgogICAgICAgICQ4SXYgPSAkVGprcy0+c1Roa3FIRWU5STJRaGE5cEY4KCQ4SXYpOwoKICAgICAgICBoSVRwaG0ga3NfRWhoRXYoJFJwSWh2TklzcDlUW3ddKQogICAgICAgICAgICAgICAgICAgID8gJFRqa3MtPnE5cEY4MmhRbHRoaEV2b1E5cGxtKCRScElodk5Jc3A5VCwgJEZROXBsbSwgJDhJdikKICAgICAgICAgICAgICAgICAgICA6ICRUamtzLT5xOXBGODJoUWxNZUxJRlRvUTlwbG0oJFJwSWh2TklzcDlULCAkRlE5cGxtLCAkOEl2KTsKICAgIH0KCiAgICArKioKICAgICAqIE9UaGtxIFFpaSBUakkgVEVlOUkgbUVsSSBRaCBFOWtFcyBpaFFsIEUgRlE5cGxtIGtmSW1Ua2lrSWguCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRGUTlwbG0KICAgICAqIEBoSVRwaG0gc1Roa21KfG1wOTkKICAgICAqKwogICAgcWhRVElGVElmIGlwbUZUa1FtIHNUaGtxSEVlOUkyUWhhOXBGOCgkRlE5cGxtKQogICAgewogICAgICAgIGtpIChrc19tcDk5KCRGUTlwbG0pKSB7CiAgICAgICAgICAgIGhJVHBobSAkRlE5cGxtOwogICAgICAgIH0KCiAgICAgICAgJEZROXBsbU9UaGttSiA9ICRGUTlwbG0ga21zVEVtRklRaSBnVnFoSXNza1Ftb1FtVGhFRlQKICAgICAgICAgICAgPyAkVGprcy0+SmhFbGxFaC0+SklUQkU5cEkoJEZROXBsbSkKICAgICAgICAgICAgOiAkRlE5cGxtOwoKICAgICAgICAkc0lxRWhFVFFoID0gc1RoX0ZRbVRFa21zKHNUaFRROVF1SWgoJEZROXBsbU9UaGttSiksICcgRXMgJykgPyAnIEVzICcgOiAnXC4nOwoKICAgICAgICBoSVRwaG0gOUVzVChxaElKX3NxOWtUKCd+Jy4kc0lxRWhFVFFoLid+aycsICRGUTlwbG1PVGhrbUopKTsKICAgIH0KCiAgICArKioKICAgICAqIE5JVGhrSVVJIEZROXBsbSBVRTlwSXMgaWhRbCBoUXVzIGhJcWhJc0ltVElmIEVzIFFlTElGVHMuCiAgICAgKgogICAgICogQHFFaEVsICBFaGhFdiAgJFJwSWh2TklzcDlUCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJEZROXBsbQogICAgICogQHFFaEVsICBzVGhrbUogICQ4SXYKICAgICAqIEBoSVRwaG0gXEs5OXBsa21FVElcT3BxcVFoVFxvUTk5SUZUa1FtCiAgICAgKisKICAgIHFoUVRJRlRJZiBpcG1GVGtRbSBxOXBGODJoUWxNZUxJRlRvUTlwbG0oJFJwSWh2TklzcDlULCAkRlE5cGxtLCAkOEl2KQogICAgewogICAgICAgICRoSXNwOVRzID0gW107CgogICAgICAgIGtpIChrc19tcDk5KCQ4SXYpKSB7CiAgICAgICAgICAgIGlRaElFRmogKCRScElodk5Jc3A5VCBFcyAkaFF1KSB7CiAgICAgICAgICAgICAgICAkaElzcDlUc1tdID0gJGhRdS0+JEZROXBsbTsKICAgICAgICAgICAgfQogICAgICAgIH0gSTlzSSB7CiAgICAgICAgICAgIGlRaElFRmogKCRScElodk5Jc3A5VCBFcyAkaFF1KSB7CiAgICAgICAgICAgICAgICAkaElzcDlUc1skaFF1LT4kOEl2XSA9ICRoUXUtPiRGUTlwbG07CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGhJVHBobSBGUTk5SUZUKCRoSXNwOVRzKTsKICAgIH0KCiAgICArKioKICAgICAqIE5JVGhrSVVJIEZROXBsbSBVRTlwSXMgaWhRbCBoUXVzIGhJcWhJc0ltVElmIEVzIEVoaEV2cy4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkUnBJaHZOSXNwOVQKICAgICAqIEBxRWhFbCAgc1Roa21KICAkRlE5cGxtCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJDhJdgogICAgICogQGhJVHBobSBcSzk5cGxrbUVUSVxPcHFxUWhUXG9ROTlJRlRrUW0KICAgICAqKwogICAgcWhRVElGVElmIGlwbUZUa1FtIHE5cEY4MmhRbHRoaEV2b1E5cGxtKCRScElodk5Jc3A5VCwgJEZROXBsbSwgJDhJdikKICAgIHsKICAgICAgICAkaElzcDlUcyA9IFtdOwoKICAgICAgICBraSAoa3NfbXA5OSgkOEl2KSkgewogICAgICAgICAgICBpUWhJRUZqICgkUnBJaHZOSXNwOVQgRXMgJGhRdSkgewogICAgICAgICAgICAgICAgJGhJc3A5VHNbXSA9ICRoUXVbJEZROXBsbV07CiAgICAgICAgICAgIH0KICAgICAgICB9IEk5c0kgewogICAgICAgICAgICBpUWhJRUZqICgkUnBJaHZOSXNwOVQgRXMgJGhRdSkgewogICAgICAgICAgICAgICAgJGhJc3A5VHNbJGhRdVskOEl2XV0gPSAkaFF1WyRGUTlwbG1dOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gRlE5OUlGVCgkaElzcDlUcyk7CiAgICB9CgogICAgKyoqCiAgICAgKiBvUW1GRVRJbUVUSSBVRTlwSXMgUWkgRSBKa1VJbSBGUTlwbG0gRXMgRSBzVGhrbUouCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgc1Roa21KICAkSjlwSQogICAgICogQGhJVHBobSBzVGhrbUoKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGtscTlRZkkoJEZROXBsbSwgJEo5cEkgPSAnJykKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPnE5cEY4KCRGUTlwbG0pLT5rbHE5UWZJKCRKOXBJKTsKICAgIH0KCiAgICArKioKICAgICAqIG5JVElobGttSSBraSBFbXYgaFF1cyBJVmtzVCBpUWggVGpJIEZwaGhJbVQgUnBJaHYuCiAgICAgKgogICAgICogQGhJVHBobSBlUVE5CiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBJVmtzVHMoKQogICAgewogICAgICAgICRUamtzLT5FcXE5dnJJaVFoSUdwSWh2b0U5OWVFRjhzKCk7CgogICAgICAgICRoSXNwOVRzID0gJFRqa3MtPkZRbW1JRlRrUW0tPnNJOUlGVCgKICAgICAgICAgICAgJFRqa3MtPkpoRWxsRWgtPkZRbHFrOUlnVmtzVHMoJFRqa3MpLCAkVGprcy0+SklUcmttZmttSnMoKSwgISAkVGprcy0+cHNJYmhrVElhZlEKICAgICAgICApOwoKICAgICAgICArKyBLaSBUakkgaElzcDlUcyBqRVVJIGhRdXMsIHVJIHVrOTkgSklUIFRqSSBoUXUgRW1mIHNJSSBraSBUakkgSVZrc1RzIEZROXBsbSBrcyBFCiAgICAgICAgKysgZVFROUlFbSBUaHBJLiBLaSBUakloSSBFaEkgbVEgaElzcDlUcyBpUWggVGprcyBScElodiB1SSB1azk5IGhJVHBobSBpRTlzSSBFcwogICAgICAgICsrIFRqSWhJIEVoSSBtUSBoUXVzIGlRaCBUamtzIFJwSWh2IEVUIEU5OSwgRW1mIHVJIEZFbSBoSVRwaG0gVGpFVCBrbWlRIGpJaEkuCiAgICAgICAga2kgKGtzc0lUKCRoSXNwOVRzW3ddKSkgewogICAgICAgICAgICAkaElzcDlUcyA9IChFaGhFdikgJGhJc3A5VHNbd107CgogICAgICAgICAgICBoSVRwaG0gKGVRUTkpICRoSXNwOVRzWydJVmtzVHMnXTsKICAgICAgICB9CgogICAgICAgIGhJVHBobSBpRTlzSTsKICAgIH0KCiAgICArKioKICAgICAqIG5JVElobGttSSBraSBtUSBoUXVzIElWa3NUIGlRaCBUakkgRnBoaEltVCBScElodi4KICAgICAqCiAgICAgKiBAaElUcGhtIGVRUTkKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGZRSXNtVGdWa3NUKCkKICAgIHsKICAgICAgICBoSVRwaG0gISAkVGprcy0+SVZrc1RzKCk7CiAgICB9CgogICAgKyoqCiAgICAgKiBnVklGcFRJIFRqSSBKa1VJbSBGRTk5ZUVGOCBraSBtUSBoUXVzIElWa3NUIGlRaCBUakkgRnBoaEltVCBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJICAkRkU5OWVFRjgKICAgICAqIEBoSVRwaG0gbGtWSWYKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIElWa3NUc01oKG85UXNwaEkgJEZFOTllRUY4KQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+SVZrc1RzKCkgPyBUaHBJIDogJEZFOTllRUY4KCk7CiAgICB9CgogICAgKyoqCiAgICAgKiBnVklGcFRJIFRqSSBKa1VJbSBGRTk5ZUVGOCBraSBoUXVzIElWa3NUIGlRaCBUakkgRnBoaEltVCBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxvOVFzcGhJICAkRkU5OWVFRjgKICAgICAqIEBoSVRwaG0gbGtWSWYKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGZRSXNtVGdWa3NUTWgobzlRc3BoSSAkRkU5OWVFRjgpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT5mUUlzbVRnVmtzVCgpID8gVGhwSSA6ICRGRTk5ZUVGOCgpOwogICAgfQoKICAgICsqKgogICAgICogTklUaGtJVUkgVGpJICJGUXBtVCIgaElzcDlUIFFpIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtfHNUaGttSiAgJEZROXBsbXMKICAgICAqIEBoSVRwaG0ga21UCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBGUXBtVCgkRlE5cGxtcyA9ICcqJykKICAgIHsKICAgICAgICBoSVRwaG0gKGttVCkgJFRqa3MtPkVKSmhJSkVUSShfXzJQQW9IS01BX18sIHRoaDo6dWhFcSgkRlE5cGxtcykpOwogICAgfQoKICAgICsqKgogICAgICogTklUaGtJVUkgVGpJIGxrbWtscGwgVUU5cEkgUWkgRSBKa1VJbSBGUTlwbG0uCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBoSVRwaG0gbGtWSWYKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGxrbSgkRlE5cGxtKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+RUpKaElKRVRJKF9fMlBBb0hLTUFfXywgWyRGUTlwbG1dKTsKICAgIH0KCiAgICArKioKICAgICAqIE5JVGhrSVVJIFRqSSBsRVZrbHBsIFVFOXBJIFFpIEUgSmtVSW0gRlE5cGxtLgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAaElUcGhtIGxrVklmCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBsRVYoJEZROXBsbSkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPkVKSmhJSkVUSShfXzJQQW9IS01BX18sIFskRlE5cGxtXSk7CiAgICB9CgogICAgKyoqCiAgICAgKiBOSVRoa0lVSSBUakkgc3BsIFFpIFRqSSBVRTlwSXMgUWkgRSBKa1VJbSBGUTlwbG0uCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBoSVRwaG0gbGtWSWYKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHNwbCgkRlE5cGxtKQogICAgewogICAgICAgICRoSXNwOVQgPSAkVGprcy0+RUpKaElKRVRJKF9fMlBBb0hLTUFfXywgWyRGUTlwbG1dKTsKCiAgICAgICAgaElUcGhtICRoSXNwOVQgPzogdzsKICAgIH0KCiAgICArKioKICAgICAqIE5JVGhrSVVJIFRqSSBFVUloRUpJIFFpIFRqSSBVRTlwSXMgUWkgRSBKa1VJbSBGUTlwbG0uCiAgICAgKgogICAgICogQHFFaEVsICBcSzk5cGxrbUVUSVxvUW1UaEVGVHNcbkVURWVFc0lcR3BJaHZcZ1ZxaElzc2tRbXxzVGhrbUogICRGUTlwbG0KICAgICAqIEBoSVRwaG0gbGtWSWYKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIEVVSigkRlE5cGxtKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+RUpKaElKRVRJKF9fMlBBb0hLTUFfXywgWyRGUTlwbG1dKTsKICAgIH0KCiAgICArKioKICAgICAqIHQ5a0VzIGlRaCBUakkgIkVVSiIgbElUalFmLgogICAgICoKICAgICAqIEBxRWhFbCAgXEs5OXBsa21FVElcb1FtVGhFRlRzXG5FVEVlRXNJXEdwSWh2XGdWcWhJc3NrUW18c1Roa21KICAkRlE5cGxtCiAgICAgKiBAaElUcGhtIGxrVklmCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBFVUloRUpJKCRGUTlwbG0pCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT5FVUooJEZROXBsbSk7CiAgICB9CgogICAgKyoqCiAgICAgKiBnVklGcFRJIEVtIEVKSmhJSkVUSSBpcG1GVGtRbSBRbSBUakkgZkVURWVFc0kuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRpcG1GVGtRbQogICAgICogQHFFaEVsICBFaGhFdiAgJEZROXBsbXMKICAgICAqIEBoSVRwaG0gbGtWSWYKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIEVKSmhJSkVUSSgkaXBtRlRrUW0sICRGUTlwbG1zID0gWycqJ10pCiAgICB7CiAgICAgICAgJGhJc3A5VHMgPSAkVGprcy0+RjlRbUlia1RqUXBUKCRUamtzLT5wbWtRbXMgfHwgJFRqa3MtPmpFVWttSnMgPyBbXSA6IFsnRlE5cGxtcyddKQogICAgICAgICAgICAgICAgICAgICAgICAtPkY5UW1JYmtUalFwVHJrbWZrbUpzKCRUamtzLT5wbWtRbXMgfHwgJFRqa3MtPmpFVWttSnMgPyBbXSA6IFsnc0k5SUZUJ10pCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c0lUdEpKaElKRVRJKCRpcG1GVGtRbSwgJEZROXBsbXMpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+SklUKCRGUTlwbG1zKTsKCiAgICAgICAga2kgKCEgJGhJc3A5VHMtPmtzZ2xxVHYoKSkgewogICAgICAgICAgICBoSVRwaG0gRWhoRXZfRmpFbUpJXzhJdl9GRXNJKChFaGhFdikgJGhJc3A5VHNbd10pWydFSkpoSUpFVEknXTsKICAgICAgICB9CiAgICB9CgogICAgKyoqCiAgICAgKiBnVklGcFRJIEUgbXBsSWhrRiBFSkpoSUpFVEkgaXBtRlRrUW0gUW0gVGpJIGZFVEVlRXNJLgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkaXBtRlRrUW0KICAgICAqIEBxRWhFbCAgRWhoRXYgICRGUTlwbG1zCiAgICAgKiBAaElUcGhtIGk5UUVUfGttVAogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gbXBsSWhrRnRKSmhJSkVUSSgkaXBtRlRrUW0sICRGUTlwbG1zID0gWycqJ10pCiAgICB7CiAgICAgICAgJGhJc3A5VCA9ICRUamtzLT5FSkpoSUpFVEkoJGlwbUZUa1FtLCAkRlE5cGxtcyk7CgogICAgICAgICsrIEtpIFRqSWhJIGtzIG1RIGhJc3A5VCwgdUkgRkVtIFFlVWtRcHM5diBMcHNUIGhJVHBobSB3IGpJaEkuIEFJVlQsIHVJIHVrOTkgRmpJRjgKICAgICAgICArKyBraSBUakkgaElzcDlUIGtzIEVtIGttVElKSWggUWggaTlRRVQuIEtpIGtUIGtzIEU5aElFZnYgUW1JIFFpIFRqSXNJIFR1USBmRVRFCiAgICAgICAgKysgVHZxSXMgdUkgRkVtIExwc1QgaElUcGhtIFRqSSBoSXNwOVQgRXMta3MsIFFUaklodWtzSSB1SSB1azk5IEZRbVVJaFQgVGprcy4KICAgICAgICBraSAoISAkaElzcDlUKSB7CiAgICAgICAgICAgIGhJVHBobSB3OwogICAgICAgIH0KCiAgICAgICAga2kgKGtzX2ttVCgkaElzcDlUKSB8fCBrc19pOVFFVCgkaElzcDlUKSkgewogICAgICAgICAgICBoSVRwaG0gJGhJc3A5VDsKICAgICAgICB9CgogICAgICAgICsrIEtpIFRqSSBoSXNwOVQgZlFJc20nVCBGUW1URWttIEUgZklGa2xFOSBxOUVGSSwgdUkgdWs5OSBFc3NwbEkga1Qga3MgRW0ga21UIFRqSW0KICAgICAgICArKyBGRXNUIGtUIFRRIFFtSS4gYmpJbSBrVCBmUUlzIHVJIHVrOTkgRkVzVCBrVCBUUSBFIGk5UUVUIHNrbUZJIGtUIG1JSWZzIFRRIGVJCiAgICAgICAgKysgRkVzVCBUUSBUakkgSVZxSUZUSWYgZkVURSBUdnFJIGlRaCBUakkgZklVSTlRcUlocyBRcFQgUWkgcXBoSSBGUW1VSW1rSW1GSS4KICAgICAgICBoSVRwaG0gISBzVGhfRlFtVEVrbXMoKHNUaGttSikgJGhJc3A5VCwgJy4nKQogICAgICAgICAgICAgICAgPyAoa21UKSAkaElzcDlUIDogKGk5UUVUKSAkaElzcDlUOwogICAgfQoKICAgICsqKgogICAgICogT0lUIFRqSSBFSkpoSUpFVEkgcWhRcUloVHYgdWtUalFwVCBocG1ta21KIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAcUVoRWwgIHNUaGttSiAgJGlwbUZUa1FtCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkRlE5cGxtcwogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxaFFUSUZUSWYgaXBtRlRrUW0gc0lUdEpKaElKRVRJKCRpcG1GVGtRbSwgJEZROXBsbXMpCiAgICB7CiAgICAgICAgJFRqa3MtPkVKSmhJSkVUSSA9IEZRbHFFRlQoJ2lwbUZUa1FtJywgJ0ZROXBsbXMnKTsKCiAgICAgICAga2kgKElscVR2KCRUamtzLT5KaFFwcXMpKSB7CiAgICAgICAgICAgICRUamtzLT5RaGZJaHMgPSBtcDk5OwoKICAgICAgICAgICAgJFRqa3MtPmVrbWZrbUpzWydRaGZJaCddID0gW107CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiBnVklGcFRJIFRqSSBKa1VJbSBGRTk5ZUVGOCB1ams5SSBzSTlJRlRrbUogVGpJIEprVUltIEZROXBsbXMuCiAgICAgKgogICAgICogdGlUSWggaHBtbWttSiBUakkgRkU5OWVFRjgsIFRqSSBGUTlwbG1zIEVoSSBoSXNJVCBUUSBUakkgUWhrSmttRTkgVUU5cEkuCiAgICAgKgogICAgICogQHFFaEVsICBFaGhFdiAgJEZROXBsbXMKICAgICAqIEBxRWhFbCAgRkU5OUVlOUkgICRGRTk5ZUVGOAogICAgICogQGhJVHBobSBsa1ZJZgogICAgICorCiAgICBxaFFUSUZUSWYgaXBtRlRrUW0gUW1GSWJrVGpvUTlwbG1zKCRGUTlwbG1zLCAkRkU5OWVFRjgpCiAgICB7CiAgICAgICAgJFFoa0prbUU5ID0gJFRqa3MtPkZROXBsbXM7CgogICAgICAgIGtpIChrc19tcDk5KCRRaGtKa21FOSkpIHsKICAgICAgICAgICAgJFRqa3MtPkZROXBsbXMgPSAkRlE5cGxtczsKICAgICAgICB9CgogICAgICAgICRoSXNwOVQgPSAkRkU5OWVFRjgoKTsKCiAgICAgICAgJFRqa3MtPkZROXBsbXMgPSAkUWhrSmttRTk7CgogICAgICAgIGhJVHBobSAkaElzcDlUOwogICAgfQoKICAgICsqKgogICAgICogS21zSWhUIG1JdSBoSUZRaGZzIGttVFEgVGpJIGZFVEVlRXNJLgogICAgICoKICAgICAqIEBxRWhFbCAgRWhoRXYgICRVRTlwSXMKICAgICAqIEBoSVRwaG0gZVFROQogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0ga21zSWhUKEVoaEV2ICRVRTlwSXMpCiAgICB7CiAgICAgICAgKysgT2ttRkkgSVVJaHYga21zSWhUIEpJVHMgVGhJRVRJZiA5azhJIEUgZUVURmoga21zSWhULCB1SSB1azk5IGxFOEkgc3BoSSBUakkKICAgICAgICArKyBla21ma21KcyBFaEkgc1RocEZUcGhJZiBrbSBFIHVFdiBUakVUIGtzIEZRbVVJbWtJbVQgdWpJbSBlcGs5ZmttSiBUaklzSQogICAgICAgICsrIGttc0loVHMgc1RFVElsSW1UcyBldiBVSWhraXZrbUogVGpJc0kgSTlJbEltVHMgRWhJIEVGVHBFOTl2IEVtIEVoaEV2LgogICAgICAgIGtpIChJbHFUdigkVUU5cElzKSkgewogICAgICAgICAgICBoSVRwaG0gVGhwSTsKICAgICAgICB9CgogICAgICAgIGtpICghIGtzX0VoaEV2KGhJc0lUKCRVRTlwSXMpKSkgewogICAgICAgICAgICAkVUU5cElzID0gWyRVRTlwSXNdOwogICAgICAgIH0KCiAgICAgICAgKysgU0loSSwgdUkgdWs5OSBzUWhUIFRqSSBrbXNJaFQgOEl2cyBpUWggSVVJaHYgaElGUWhmIHNRIFRqRVQgSUVGaiBrbXNJaFQga3MKICAgICAgICArKyBrbSBUakkgc0VsSSBRaGZJaCBpUWggVGpJIGhJRlFoZi4gYkkgbUlJZiBUUSBsRThJIHNwaEkgVGprcyBrcyBUakkgRkVzSQogICAgICAgICsrIHNRIFRqSWhJIEVoSSBtUVQgRW12IEloaFFocyBRaCBxaFFlOUlscyB1akltIGttc0loVGttSiBUaklzSSBoSUZRaGZzLgogICAgICAgIEk5c0kgewogICAgICAgICAgICBpUWhJRUZqICgkVUU5cElzIEVzICQ4SXYgPT4gJFVFOXBJKSB7CiAgICAgICAgICAgICAgICA4c1FoVCgkVUU5cEkpOwoKICAgICAgICAgICAgICAgICRVRTlwSXNbJDhJdl0gPSAkVUU5cEk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRUamtzLT5FcXE5dnJJaVFoSUdwSWh2b0U5OWVFRjhzKCk7CgogICAgICAgICsrIDJrbUU5OXYsIHVJIHVrOTkgaHBtIFRqa3MgUnBJaHYgRUpFa21zVCBUakkgZkVURWVFc0kgRlFtbUlGVGtRbSBFbWYgaElUcGhtCiAgICAgICAgKysgVGpJIGhJc3A5VHMuIGJJIHVrOTkgbUlJZiBUUSBFOXNRIGk5RVRUSW0gVGpJc0kgZWttZmttSnMgZUlpUWhJIGhwbW1rbUoKICAgICAgICArKyBUakkgUnBJaHYgc1EgVGpJdiBFaEkgRTk5IGttIFFtSSBqcEpJLCBpOUVUVEltSWYgRWhoRXYgaVFoIElWSUZwVGtRbS4KICAgICAgICBoSVRwaG0gJFRqa3MtPkZRbW1JRlRrUW0tPmttc0loVCgKICAgICAgICAgICAgJFRqa3MtPkpoRWxsRWgtPkZRbHFrOUlLbXNJaFQoJFRqa3MsICRVRTlwSXMpLAogICAgICAgICAgICAkVGprcy0+RjlJRW1ya21ma21Kcyh0aGg6Omk5RVRUSW0oJFVFOXBJcywgWCkpCiAgICAgICAgKTsKICAgIH0KCiAgICArKioKICAgICAqIEttc0loVCBtSXUgaElGUWhmcyBrbVRRIFRqSSBmRVRFZUVzSSB1ams5SSBrSm1RaGttSiBJaGhRaHMuCiAgICAgKgogICAgICogQHFFaEVsICBFaGhFdiAgJFVFOXBJcwogICAgICogQGhJVHBobSBrbVQKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGttc0loVE1oS0ptUWhJKEVoaEV2ICRVRTlwSXMpCiAgICB7CiAgICAgICAga2kgKElscVR2KCRVRTlwSXMpKSB7CiAgICAgICAgICAgIGhJVHBobSB3OwogICAgICAgIH0KCiAgICAgICAga2kgKCEga3NfRWhoRXYoaElzSVQoJFVFOXBJcykpKSB7CiAgICAgICAgICAgICRVRTlwSXMgPSBbJFVFOXBJc107CiAgICAgICAgfSBJOXNJIHsKICAgICAgICAgICAgaVFoSUVGaiAoJFVFOXBJcyBFcyAkOEl2ID0+ICRVRTlwSSkgewogICAgICAgICAgICAgICAgOHNRaFQoJFVFOXBJKTsKCiAgICAgICAgICAgICAgICAkVUU5cElzWyQ4SXZdID0gJFVFOXBJOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkVGprcy0+RXFxOXZySWlRaElHcElodm9FOTllRUY4cygpOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPkZRbW1JRlRrUW0tPkVpaUlGVGttSk9URVRJbEltVCgKICAgICAgICAgICAgJFRqa3MtPkpoRWxsRWgtPkZRbHFrOUlLbXNJaFRNaEtKbVFoSSgkVGprcywgJFVFOXBJcyksCiAgICAgICAgICAgICRUamtzLT5GOUlFbXJrbWZrbUpzKHRoaDo6aTlFVFRJbSgkVUU5cElzLCBYKSkKICAgICAgICApOwogICAgfQoKICAgICsqKgogICAgICogS21zSWhUIEUgbUl1IGhJRlFoZiBFbWYgSklUIFRqSSBVRTlwSSBRaSBUakkgcWhrbEVodiA4SXYuCiAgICAgKgogICAgICogQHFFaEVsICBFaGhFdiAgJFVFOXBJcwogICAgICogQHFFaEVsICBzVGhrbUp8bXA5OSAgJHNJUnBJbUZJCiAgICAgKiBAaElUcGhtIGttVAogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0ga21zSWhUMElUS2YoRWhoRXYgJFVFOXBJcywgJHNJUnBJbUZJID0gbXA5OSkKICAgIHsKICAgICAgICAkVGprcy0+RXFxOXZySWlRaElHcElodm9FOTllRUY4cygpOwoKICAgICAgICAkc1I5ID0gJFRqa3MtPkpoRWxsRWgtPkZRbHFrOUlLbXNJaFQwSVRLZigkVGprcywgJFVFOXBJcywgJHNJUnBJbUZJKTsKCiAgICAgICAgJFVFOXBJcyA9ICRUamtzLT5GOUlFbXJrbWZrbUpzKCRVRTlwSXMpOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPnFoUUZJc3NRaC0+cWhRRklzc0ttc0loVDBJVEtmKCRUamtzLCAkc1I5LCAkVUU5cElzLCAkc0lScEltRkkpOwogICAgfQoKICAgICsqKgogICAgICogS21zSWhUIG1JdSBoSUZRaGZzIGttVFEgVGpJIFRFZTlJIHBza21KIEUgc3BlUnBJaHYuCiAgICAgKgogICAgICogQHFFaEVsICBFaGhFdiAgJEZROXBsbXMKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8XEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaHxcQUtBdFxuRVRFZUVzSVxnOVFScEltVFxycGs5ZklofHNUaGttSiAgJFJwSWh2CiAgICAgKiBAaElUcGhtIGttVAogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0ga21zSWhUUHNrbUooRWhoRXYgJEZROXBsbXMsICRScElodikKICAgIHsKICAgICAgICAkVGprcy0+RXFxOXZySWlRaElHcElodm9FOTllRUY4cygpOwoKICAgICAgICBbJHNSOSwgJGVrbWZrbUpzXSA9ICRUamtzLT5GaElFVElPcGUoJFJwSWh2KTsKCiAgICAgICAgaElUcGhtICRUamtzLT5GUW1tSUZUa1FtLT5FaWlJRlRrbUpPVEVUSWxJbVQoCiAgICAgICAgICAgICRUamtzLT5KaEVsbEVoLT5GUWxxazlJS21zSWhUUHNrbUooJFRqa3MsICRGUTlwbG1zLCAkc1I5KSwKICAgICAgICAgICAgJFRqa3MtPkY5SUVtcmttZmttSnMoJGVrbWZrbUpzKQogICAgICAgICk7CiAgICB9CgogICAgKyoqCiAgICAgKiBLbXNJaFQgbUl1IGhJRlFoZnMga21UUSBUakkgVEVlOUkgcHNrbUogRSBzcGVScElodiB1ams5SSBrSm1RaGttSiBJaGhRaHMuCiAgICAgKgogICAgICogQHFFaEVsICBFaGhFdiAgJEZROXBsbXMKICAgICAqIEBxRWhFbCAgXG85UXNwaEl8XEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaHxcQUtBdFxuRVRFZUVzSVxnOVFScEltVFxycGs5ZklofHNUaGttSiAgJFJwSWh2CiAgICAgKiBAaElUcGhtIGttVAogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0ga21zSWhUTWhLSm1RaElQc2ttSihFaGhFdiAkRlE5cGxtcywgJFJwSWh2KQogICAgewogICAgICAgICRUamtzLT5FcXE5dnJJaVFoSUdwSWh2b0U5OWVFRjhzKCk7CgogICAgICAgIFskc1I5LCAkZWttZmttSnNdID0gJFRqa3MtPkZoSUVUSU9wZSgkUnBJaHYpOwoKICAgICAgICBoSVRwaG0gJFRqa3MtPkZRbW1JRlRrUW0tPkVpaUlGVGttSk9URVRJbEltVCgKICAgICAgICAgICAgJFRqa3MtPkpoRWxsRWgtPkZRbHFrOUlLbXNJaFRNaEtKbVFoSVBza21KKCRUamtzLCAkRlE5cGxtcywgJHNSOSksCiAgICAgICAgICAgICRUamtzLT5GOUlFbXJrbWZrbUpzKCRla21ma21KcykKICAgICAgICApOwogICAgfQoKICAgICsqKgogICAgICogUHFmRVRJIGhJRlFoZnMga20gVGpJIGZFVEVlRXNJLgogICAgICoKICAgICAqIEBxRWhFbCAgRWhoRXYgICRVRTlwSXMKICAgICAqIEBoSVRwaG0ga21UCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBwcWZFVEkoRWhoRXYgJFVFOXBJcykKICAgIHsKICAgICAgICAkVGprcy0+RXFxOXZySWlRaElHcElodm9FOTllRUY4cygpOwoKICAgICAgICAkVUU5cElzID0gRlE5OUlGVCgkVUU5cElzKS0+bEVxKGlwbUZUa1FtICgkVUU5cEkpIHsKICAgICAgICAgICAga2kgKCEgJFVFOXBJIGttc1RFbUZJUWkgcnBrOWZJaCkgewogICAgICAgICAgICAgICAgaElUcGhtIFsnVUU5cEknID0+ICRVRTlwSSwgJ2VrbWZrbUpzJyA9PiAkVUU5cEldOwogICAgICAgICAgICB9CgogICAgICAgICAgICBbJFJwSWh2LCAkZWttZmttSnNdID0gJFRqa3MtPnFFaHNJT3BlKCRVRTlwSSk7CgogICAgICAgICAgICBoSVRwaG0gWydVRTlwSScgPT4gbUl1IGdWcWhJc3NrUW0oIih7JFJwSWh2fSkiKSwgJ2VrbWZrbUpzJyA9PiBpbSAoKSA9PiAkZWttZmttSnNdOwogICAgICAgIH0pOwoKICAgICAgICAkc1I5ID0gJFRqa3MtPkpoRWxsRWgtPkZRbHFrOUlQcWZFVEkoJFRqa3MsICRVRTlwSXMtPmxFcShpbSAoJFVFOXBJKSA9PiAkVUU5cElbJ1VFOXBJJ10pLT5FOTkoKSk7CgogICAgICAgIGhJVHBobSAkVGprcy0+RlFtbUlGVGtRbS0+cHFmRVRJKCRzUjksICRUamtzLT5GOUlFbXJrbWZrbUpzKAogICAgICAgICAgICAkVGprcy0+SmhFbGxFaC0+cWhJcUVoSXJrbWZrbUpzMlFoUHFmRVRJKCRUamtzLT5la21ma21KcywgJFVFOXBJcy0+bEVxKGltICgkVUU5cEkpID0+ICRVRTlwSVsnZWttZmttSnMnXSktPkU5OSgpKQogICAgICAgICkpOwogICAgfQoKICAgICsqKgogICAgICogUHFmRVRJIGhJRlFoZnMga20gRSBhUXNUSmhJT0c2IGZFVEVlRXNJIHBza21KIFRqSSBwcWZFVEkgaWhRbCBzdm1URVYuCiAgICAgKgogICAgICogQHFFaEVsICBFaGhFdiAgJFVFOXBJcwogICAgICogQGhJVHBobSBrbVQKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIHBxZkVUSTJoUWwoRWhoRXYgJFVFOXBJcykKICAgIHsKICAgICAgICBraSAoISBsSVRqUWZfSVZrc1RzKCRUamtzLT5KaEVsbEVoLCAnRlFscWs5SVBxZkVUSTJoUWwnKSkgewogICAgICAgICAgICBUamhRdSBtSXUgNlFKa0ZnVkZJcVRrUW0oJ0hqa3MgZkVURWVFc0kgSW1Ka21JIGZRSXMgbVFUIHNwcXFRaFQgVGpJIHBxZkVUSTJoUWwgbElUalFmLicpOwogICAgICAgIH0KCiAgICAgICAgJFRqa3MtPkVxcTl2cklpUWhJR3BJaHZvRTk5ZUVGOHMoKTsKCiAgICAgICAgJHNSOSA9ICRUamtzLT5KaEVsbEVoLT5GUWxxazlJUHFmRVRJMmhRbCgkVGprcywgJFVFOXBJcyk7CgogICAgICAgIGhJVHBobSAkVGprcy0+RlFtbUlGVGtRbS0+cHFmRVRJKCRzUjksICRUamtzLT5GOUlFbXJrbWZrbUpzKAogICAgICAgICAgICAkVGprcy0+SmhFbGxFaC0+cWhJcUVoSXJrbWZrbUpzMlFoUHFmRVRJMmhRbCgkVGprcy0+ZWttZmttSnMsICRVRTlwSXMpCiAgICAgICAgKSk7CiAgICB9CgogICAgKyoqCiAgICAgKiBLbXNJaFQgUWggcHFmRVRJIEUgaElGUWhmIGxFVEZqa21KIFRqSSBFVFRoa2VwVElzLCBFbWYgaWs5OSBrVCB1a1RqIFVFOXBJcy4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkRVRUaGtlcFRJcwogICAgICogQHFFaEVsICBFaGhFdiAgJFVFOXBJcwogICAgICogQGhJVHBobSBlUVE5CiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBwcWZFVElNaEttc0loVChFaGhFdiAkRVRUaGtlcFRJcywgRWhoRXYgJFVFOXBJcyA9IFtdKQogICAgewogICAgICAgIGtpICghICRUamtzLT51akloSSgkRVRUaGtlcFRJcyktPklWa3NUcygpKSB7CiAgICAgICAgICAgIGhJVHBobSAkVGprcy0+a21zSWhUKEVoaEV2X2xJaEpJKCRFVFRoa2VwVElzLCAkVUU5cElzKSk7CiAgICAgICAgfQoKICAgICAgICBraSAoSWxxVHYoJFVFOXBJcykpIHsKICAgICAgICAgICAgaElUcGhtIFRocEk7CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gKGVRUTkpICRUamtzLT45a2xrVChYKS0+cHFmRVRJKCRVRTlwSXMpOwogICAgfQoKICAgICsqKgogICAgICogS21zSWhUIG1JdSBoSUZRaGZzIFFoIHBxZkVUSSBUakkgSVZrc1RrbUogUW1Jcy4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkVUU5cElzCiAgICAgKiBAcUVoRWwgIEVoaEV2fHNUaGttSiAgJHBta1JwSXJ2CiAgICAgKiBAcUVoRWwgIEVoaEV2fG1wOTkgICRwcWZFVEkKICAgICAqIEBoSVRwaG0ga21UCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBwcXNJaFQoRWhoRXYgJFVFOXBJcywgJHBta1JwSXJ2LCAkcHFmRVRJID0gbXA5OSkKICAgIHsKICAgICAgICBraSAoSWxxVHYoJFVFOXBJcykpIHsKICAgICAgICAgICAgaElUcGhtIHc7CiAgICAgICAgfSBJOXNJa2kgKCRwcWZFVEkgPT09IFtdKSB7CiAgICAgICAgICAgIGhJVHBobSAoa21UKSAkVGprcy0+a21zSWhUKCRVRTlwSXMpOwogICAgICAgIH0KCiAgICAgICAga2kgKCEga3NfRWhoRXYoaElzSVQoJFVFOXBJcykpKSB7CiAgICAgICAgICAgICRVRTlwSXMgPSBbJFVFOXBJc107CiAgICAgICAgfSBJOXNJIHsKICAgICAgICAgICAgaVFoSUVGaiAoJFVFOXBJcyBFcyAkOEl2ID0+ICRVRTlwSSkgewogICAgICAgICAgICAgICAgOHNRaFQoJFVFOXBJKTsKCiAgICAgICAgICAgICAgICAkVUU5cElzWyQ4SXZdID0gJFVFOXBJOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBraSAoa3NfbXA5OSgkcHFmRVRJKSkgewogICAgICAgICAgICAkcHFmRVRJID0gRWhoRXZfOEl2cyhoSXNJVCgkVUU5cElzKSk7CiAgICAgICAgfQoKICAgICAgICAkVGprcy0+RXFxOXZySWlRaElHcElodm9FOTllRUY4cygpOwoKICAgICAgICAkZWttZmttSnMgPSAkVGprcy0+RjlJRW1ya21ma21KcyhFaGhFdl9sSWhKSSgKICAgICAgICAgICAgdGhoOjppOUVUVEltKCRVRTlwSXMsIFgpLAogICAgICAgICAgICBGUTk5SUZUKCRwcWZFVEkpLT5oSUxJRlQoaXBtRlRrUW0gKCRVRTlwSSwgJDhJdikgewogICAgICAgICAgICAgICAgaElUcGhtIGtzX2ttVCgkOEl2KTsKICAgICAgICAgICAgfSktPkU5OSgpCiAgICAgICAgKSk7CgogICAgICAgIGhJVHBobSAkVGprcy0+RlFtbUlGVGtRbS0+RWlpSUZUa21KT1RFVElsSW1UKAogICAgICAgICAgICAkVGprcy0+SmhFbGxFaC0+RlFscWs5SVBxc0loVCgkVGprcywgJFVFOXBJcywgKEVoaEV2KSAkcG1rUnBJcnYsICRwcWZFVEkpLAogICAgICAgICAgICAkZWttZmttSnMKICAgICAgICApOwogICAgfQoKICAgICsqKgogICAgICogS21GaElsSW1UIEUgRlE5cGxtJ3MgVUU5cEkgZXYgRSBKa1VJbSBFbFFwbVQuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgaTlRRVR8a21UICAkRWxRcG1UCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkSVZUaEUKICAgICAqIEBoSVRwaG0ga21UCiAgICAgKgogICAgICogQFRqaFF1cyBcS21VRTlrZnRoSnBsSW1UZ1ZGSXFUa1FtCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBrbUZoSWxJbVQoJEZROXBsbSwgJEVsUXBtVCA9IFgsIEVoaEV2ICRJVlRoRSA9IFtdKQogICAgewogICAgICAgIGtpICghIGtzX21wbEloa0YoJEVsUXBtVCkpIHsKICAgICAgICAgICAgVGpoUXUgbUl1IEttVUU5a2Z0aEpwbEltVGdWRklxVGtRbSgnQVFtLW1wbEloa0YgVUU5cEkgcUVzc0lmIFRRIGttRmhJbEltVCBsSVRqUWYuJyk7CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3MtPmttRmhJbEltVGdFRmooWyRGUTlwbG0gPT4gJEVsUXBtVF0sICRJVlRoRSk7CiAgICB9CgogICAgKyoqCiAgICAgKiBLbUZoSWxJbVQgVGpJIEprVUltIEZROXBsbSdzIFVFOXBJcyBldiBUakkgSmtVSW0gRWxRcG1Ucy4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2PHNUaGttSiwgaTlRRVR8a21UfG1wbEloa0Ytc1Roa21KPiAgJEZROXBsbXMKICAgICAqIEBxRWhFbCAgRWhoRXY8c1Roa21KLCBsa1ZJZj4gICRJVlRoRQogICAgICogQGhJVHBobSBrbVQKICAgICAqCiAgICAgKiBAVGpoUXVzIFxLbVVFOWtmdGhKcGxJbVRnVkZJcVRrUW0KICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGttRmhJbEltVGdFRmooRWhoRXYgJEZROXBsbXMsIEVoaEV2ICRJVlRoRSA9IFtdKQogICAgewogICAgICAgIGlRaElFRmogKCRGUTlwbG1zIEVzICRGUTlwbG0gPT4gJEVsUXBtVCkgewogICAgICAgICAgICBraSAoISBrc19tcGxJaGtGKCRFbFFwbVQpKSB7CiAgICAgICAgICAgICAgICBUamhRdSBtSXUgS21VRTlrZnRoSnBsSW1UZ1ZGSXFUa1FtKCJBUW0tbXBsSWhrRiBVRTlwSSBxRXNzSWYgRXMga21GaElsSW1UIEVsUXBtVCBpUWggRlE5cGxtOiAnJEZROXBsbScuIik7CiAgICAgICAgICAgIH0gSTlzSWtpICghIGtzX3NUaGttSigkRlE5cGxtKSkgewogICAgICAgICAgICAgICAgVGpoUXUgbUl1IEttVUU5a2Z0aEpwbEltVGdWRklxVGtRbSgnQVFtLUVzc1FGa0VUa1VJIEVoaEV2IHFFc3NJZiBUUSBrbUZoSWxJbVRnRUZqIGxJVGpRZi4nKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJEZROXBsbXNbJEZROXBsbV0gPSAkVGprcy0+aEV1KCJ7JFRqa3MtPkpoRWxsRWgtPnVoRXEoJEZROXBsbSl9IC8gJEVsUXBtVCIpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzLT5wcWZFVEkoRWhoRXZfbEloSkkoJEZROXBsbXMsICRJVlRoRSkpOwogICAgfQoKICAgICsqKgogICAgICogbklGaElsSW1UIEUgRlE5cGxtJ3MgVUU5cEkgZXYgRSBKa1VJbSBFbFFwbVQuCiAgICAgKgogICAgICogQHFFaEVsICBzVGhrbUogICRGUTlwbG0KICAgICAqIEBxRWhFbCAgaTlRRVR8a21UICAkRWxRcG1UCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkSVZUaEUKICAgICAqIEBoSVRwaG0ga21UCiAgICAgKgogICAgICogQFRqaFF1cyBcS21VRTlrZnRoSnBsSW1UZ1ZGSXFUa1FtCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBmSUZoSWxJbVQoJEZROXBsbSwgJEVsUXBtVCA9IFgsIEVoaEV2ICRJVlRoRSA9IFtdKQogICAgewogICAgICAgIGtpICghIGtzX21wbEloa0YoJEVsUXBtVCkpIHsKICAgICAgICAgICAgVGpoUXUgbUl1IEttVUU5a2Z0aEpwbEltVGdWRklxVGtRbSgnQVFtLW1wbEloa0YgVUU5cEkgcUVzc0lmIFRRIGZJRmhJbEltVCBsSVRqUWYuJyk7CiAgICAgICAgfQoKICAgICAgICBoSVRwaG0gJFRqa3MtPmZJRmhJbEltVGdFRmooWyRGUTlwbG0gPT4gJEVsUXBtVF0sICRJVlRoRSk7CiAgICB9CgogICAgKyoqCiAgICAgKiBuSUZoSWxJbVQgVGpJIEprVUltIEZROXBsbSdzIFVFOXBJcyBldiBUakkgSmtVSW0gRWxRcG1Ucy4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2PHNUaGttSiwgaTlRRVR8a21UfG1wbEloa0Ytc1Roa21KPiAgJEZROXBsbXMKICAgICAqIEBxRWhFbCAgRWhoRXY8c1Roa21KLCBsa1ZJZj4gICRJVlRoRQogICAgICogQGhJVHBobSBrbVQKICAgICAqCiAgICAgKiBAVGpoUXVzIFxLbVVFOWtmdGhKcGxJbVRnVkZJcVRrUW0KICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGZJRmhJbEltVGdFRmooRWhoRXYgJEZROXBsbXMsIEVoaEV2ICRJVlRoRSA9IFtdKQogICAgewogICAgICAgIGlRaElFRmogKCRGUTlwbG1zIEVzICRGUTlwbG0gPT4gJEVsUXBtVCkgewogICAgICAgICAgICBraSAoISBrc19tcGxJaGtGKCRFbFFwbVQpKSB7CiAgICAgICAgICAgICAgICBUamhRdSBtSXUgS21VRTlrZnRoSnBsSW1UZ1ZGSXFUa1FtKCJBUW0tbXBsSWhrRiBVRTlwSSBxRXNzSWYgRXMgZklGaElsSW1UIEVsUXBtVCBpUWggRlE5cGxtOiAnJEZROXBsbScuIik7CiAgICAgICAgICAgIH0gSTlzSWtpICghIGtzX3NUaGttSigkRlE5cGxtKSkgewogICAgICAgICAgICAgICAgVGpoUXUgbUl1IEttVUU5a2Z0aEpwbEltVGdWRklxVGtRbSgnQVFtLUVzc1FGa0VUa1VJIEVoaEV2IHFFc3NJZiBUUSBmSUZoSWxJbVRnRUZqIGxJVGpRZi4nKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJEZROXBsbXNbJEZROXBsbV0gPSAkVGprcy0+aEV1KCJ7JFRqa3MtPkpoRWxsRWgtPnVoRXEoJEZROXBsbSl9IC0gJEVsUXBtVCIpOwogICAgICAgIH0KCiAgICAgICAgaElUcGhtICRUamtzLT5wcWZFVEkoRWhoRXZfbEloSkkoJEZROXBsbXMsICRJVlRoRSkpOwogICAgfQoKICAgICsqKgogICAgICogbkk5SVRJIGhJRlFoZnMgaWhRbCBUakkgZkVURWVFc0kuCiAgICAgKgogICAgICogQHFFaEVsICBsa1ZJZiAgJGtmCiAgICAgKiBAaElUcGhtIGttVAogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gZkk5SVRJKCRrZiA9IG1wOTkpCiAgICB7CiAgICAgICAgKysgS2kgRW0gS24ga3MgcUVzc0lmIFRRIFRqSSBsSVRqUWYsIHVJIHVrOTkgc0lUIFRqSSB1akloSSBGOUVwc0kgVFEgRmpJRjggVGpJCiAgICAgICAgKysgS24gVFEgOUlUIGZJVUk5UXFJaHMgVFEgc2tscTl2IEVtZiBScGtGODl2IGhJbFFVSSBFIHNrbUo5SSBoUXUgaWhRbCBUamtzCiAgICAgICAgKysgZkVURWVFc0kgdWtUalFwVCBsRW1wRTk5diBzcUlGa2l2a21KIFRqSSAidWpJaEkiIEY5RXBzSXMgUW0gVGpJIFJwSWh2LgogICAgICAgIGtpICghIGtzX21wOTkoJGtmKSkgewogICAgICAgICAgICAkVGprcy0+dWpJaEkoJFRqa3MtPmloUWwuJy5rZicsICc9JywgJGtmKTsKICAgICAgICB9CgogICAgICAgICRUamtzLT5FcXE5dnJJaVFoSUdwSWh2b0U5OWVFRjhzKCk7CgogICAgICAgIGhJVHBobSAkVGprcy0+RlFtbUlGVGtRbS0+Zkk5SVRJKAogICAgICAgICAgICAkVGprcy0+SmhFbGxFaC0+RlFscWs5SW5JOUlUSSgkVGprcyksICRUamtzLT5GOUlFbXJrbWZrbUpzKAogICAgICAgICAgICAgICAgJFRqa3MtPkpoRWxsRWgtPnFoSXFFaElya21ma21KczJRaG5JOUlUSSgkVGprcy0+ZWttZmttSnMpCiAgICAgICAgICAgICkKICAgICAgICApOwogICAgfQoKICAgICsqKgogICAgICogTnBtIEUgVGhwbUZFVEkgc1RFVElsSW1UIFFtIFRqSSBURWU5SS4KICAgICAqCiAgICAgKiBAaElUcGhtIFVRa2YKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIFRocG1GRVRJKCkKICAgIHsKICAgICAgICAkVGprcy0+RXFxOXZySWlRaElHcElodm9FOTllRUY4cygpOwoKICAgICAgICBpUWhJRUZqICgkVGprcy0+SmhFbGxFaC0+RlFscWs5SUhocG1GRVRJKCRUamtzKSBFcyAkc1I5ID0+ICRla21ma21KcykgewogICAgICAgICAgICAkVGprcy0+RlFtbUlGVGtRbS0+c1RFVElsSW1UKCRzUjksICRla21ma21Kcyk7CiAgICAgICAgfQogICAgfQoKICAgICsqKgogICAgICogMElUIEUgbUl1IGttc1RFbUZJIFFpIFRqSSBScElodiBlcGs5ZkloLgogICAgICoKICAgICAqIEBoSVRwaG0gXEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaAogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gbUl1R3BJaHYoKQogICAgewogICAgICAgIGhJVHBobSBtSXUgc1RFVGtGKCRUamtzLT5GUW1tSUZUa1FtLCAkVGprcy0+SmhFbGxFaCwgJFRqa3MtPnFoUUZJc3NRaCk7CiAgICB9CgogICAgKyoqCiAgICAgKiBvaElFVEkgRSBtSXUgUnBJaHYga21zVEVtRkkgaVFoIEUgc3BlLVJwSWh2LgogICAgICoKICAgICAqIEBoSVRwaG0gXEFLQXRcbkVURWVFc0lcR3BJaHZccnBrOWZJaAogICAgICorCiAgICBxaFFUSUZUSWYgaXBtRlRrUW0gaVFoT3BlR3BJaHYoKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+bUl1R3BJaHYoKTsKICAgIH0KCiAgICArKioKICAgICAqIDBJVCBFOTkgUWkgVGpJIFJwSWh2IGVwazlmSWgncyBGUTlwbG1zIGttIEUgVElWVC1RbTl2IEVoaEV2IHVrVGogRTk5IElWcWhJc3NrUW1zIElVRTlwRVRJZi4KICAgICAqCiAgICAgKiBAaElUcGhtIEVoaEV2CiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBKSVRvUTlwbG1zKCkKICAgIHsKICAgICAgICBoSVRwaG0gISBrc19tcDk5KCRUamtzLT5GUTlwbG1zKQogICAgICAgICAgICAgICAgPyBFaGhFdl9sRXEoaW0gKCRGUTlwbG0pID0+ICRUamtzLT5KaEVsbEVoLT5KSVRCRTlwSSgkRlE5cGxtKSwgJFRqa3MtPkZROXBsbXMpCiAgICAgICAgICAgICAgICA6IFtdOwogICAgfQoKICAgICsqKgogICAgICogb2hJRVRJIEUgaEV1IGZFVEVlRXNJIElWcWhJc3NrUW0uCiAgICAgKgogICAgICogQHFFaEVsICBsa1ZJZiAgJFVFOXBJCiAgICAgKiBAaElUcGhtIFxLOTlwbGttRVRJXG9RbVRoRUZUc1xuRVRFZUVzSVxHcElodlxnVnFoSXNza1FtCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBoRXUoJFVFOXBJKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+RlFtbUlGVGtRbS0+aEV1KCRVRTlwSSk7CiAgICB9CgogICAgKyoqCiAgICAgKiAwSVQgVGpJIEZwaGhJbVQgUnBJaHYgVUU5cEkgZWttZmttSnMga20gRSBpOUVUVEltSWYgRWhoRXYuCiAgICAgKgogICAgICogQGhJVHBobSBFaGhFdgogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gSklUcmttZmttSnMoKQogICAgewogICAgICAgIGhJVHBobSB0aGg6Omk5RVRUSW0oJFRqa3MtPmVrbWZrbUpzKTsKICAgIH0KCiAgICArKioKICAgICAqIDBJVCBUakkgaEV1IEVoaEV2IFFpIGVrbWZrbUpzLgogICAgICoKICAgICAqIEBoSVRwaG0gRWhoRXYKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIEpJVE5FdXJrbWZrbUpzKCkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPmVrbWZrbUpzOwogICAgfQoKICAgICsqKgogICAgICogT0lUIFRqSSBla21ma21KcyBRbSBUakkgUnBJaHYgZXBrOWZJaC4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkZWttZmttSnMKICAgICAqIEBxRWhFbCAgc1Roa21KICAkVHZxSQogICAgICogQGhJVHBobSAkVGprcwogICAgICoKICAgICAqIEBUamhRdXMgXEttVUU5a2Z0aEpwbEltVGdWRklxVGtRbQogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gc0lUcmttZmttSnMoRWhoRXYgJGVrbWZrbUpzLCAkVHZxSSA9ICd1akloSScpCiAgICB7CiAgICAgICAga2kgKCEgRWhoRXZfOEl2X0lWa3NUcygkVHZxSSwgJFRqa3MtPmVrbWZrbUpzKSkgewogICAgICAgICAgICBUamhRdSBtSXUgS21VRTlrZnRoSnBsSW1UZ1ZGSXFUa1FtKCJLbVVFOWtmIGVrbWZrbUogVHZxSTogeyRUdnFJfS4iKTsKICAgICAgICB9CgogICAgICAgICRUamtzLT5la21ma21Kc1skVHZxSV0gPSAkZWttZmttSnM7CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIHRmZiBFIGVrbWZrbUogVFEgVGpJIFJwSWh2LgogICAgICoKICAgICAqIEBxRWhFbCAgbGtWSWYgICRVRTlwSQogICAgICogQHFFaEVsICBzVGhrbUogICRUdnFJCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKgogICAgICogQFRqaFF1cyBcS21VRTlrZnRoSnBsSW1UZ1ZGSXFUa1FtCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBFZmZya21ma21KKCRVRTlwSSwgJFR2cUkgPSAndWpJaEknKQogICAgewogICAgICAgIGtpICghIEVoaEV2XzhJdl9JVmtzVHMoJFR2cUksICRUamtzLT5la21ma21KcykpIHsKICAgICAgICAgICAgVGpoUXUgbUl1IEttVUU5a2Z0aEpwbEltVGdWRklxVGtRbSgiS21VRTlrZiBla21ma21KIFR2cUk6IHskVHZxSX0uIik7CiAgICAgICAgfQoKICAgICAgICBraSAoa3NfRWhoRXYoJFVFOXBJKSkgewogICAgICAgICAgICAkVGprcy0+ZWttZmttSnNbJFR2cUldID0gRWhoRXZfVUU5cElzKEVoaEV2X2xFcSgKICAgICAgICAgICAgICAgIFskVGprcywgJ0ZFc1Rya21ma21KJ10sCiAgICAgICAgICAgICAgICBFaGhFdl9sSWhKSSgkVGprcy0+ZWttZmttSnNbJFR2cUldLCAkVUU5cEkpLAogICAgICAgICAgICApKTsKICAgICAgICB9IEk5c0kgewogICAgICAgICAgICAkVGprcy0+ZWttZmttSnNbJFR2cUldW10gPSAkVGprcy0+RkVzVHJrbWZrbUooJFVFOXBJKTsKICAgICAgICB9CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIG9Fc1QgVGpJIEprVUltIGVrbWZrbUogVUU5cEkuCiAgICAgKgogICAgICogQHFFaEVsICBsa1ZJZiAgJFVFOXBJCiAgICAgKiBAaElUcGhtIGxrVklmCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBGRXNUcmttZmttSigkVUU5cEkpCiAgICB7CiAgICAgICAgaElUcGhtICRVRTlwSSBrbXNURW1GSVFpIHJFRjhJZmdtcGwgPyAkVUU5cEktPlVFOXBJIDogJFVFOXBJOwogICAgfQoKICAgICsqKgogICAgICogM0loSkkgRW0gRWhoRXYgUWkgZWttZmttSnMga21UUSBRcGggZWttZmttSnMuCiAgICAgKgogICAgICogQHFFaEVsICBcQUtBdFxuRVRFZUVzSVxHcElodlxycGs5ZkloICAkUnBJaHYKICAgICAqIEBoSVRwaG0gJFRqa3MKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGxJaEpJcmttZmttSnMoc0k5aSAkUnBJaHYpCiAgICB7CiAgICAgICAgJFRqa3MtPmVrbWZrbUpzID0gRWhoRXZfbEloSklfaElGcGhza1VJKCRUamtzLT5la21ma21KcywgJFJwSWh2LT5la21ma21Kcyk7CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIE5JbFFVSSBFOTkgUWkgVGpJIElWcWhJc3NrUW1zIGloUWwgRSA5a3NUIFFpIGVrbWZrbUpzLgogICAgICoKICAgICAqIEBxRWhFbCAgRWhoRXYgICRla21ma21KcwogICAgICogQGhJVHBobSBFaGhFdgogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gRjlJRW1ya21ma21KcyhFaGhFdiAkZWttZmttSnMpCiAgICB7CiAgICAgICAgaElUcGhtIEZROTlJRlQoJGVrbWZrbUpzKQogICAgICAgICAgICAgICAgICAgIC0+aElMSUZUKGlwbUZUa1FtICgkZWttZmttSikgewogICAgICAgICAgICAgICAgICAgICAgICBoSVRwaG0gJGVrbWZrbUoga21zVEVtRklRaSBnVnFoSXNza1Ftb1FtVGhFRlQ7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmxFcShbJFRqa3MsICdGRXNUcmttZmttSiddKQogICAgICAgICAgICAgICAgICAgIC0+VUU5cElzKCkKICAgICAgICAgICAgICAgICAgICAtPkU5OSgpOwogICAgfQoKICAgICsqKgogICAgICogMElUIEUgc0ZFOUVoIFR2cUkgVUU5cEkgaWhRbCBFbSBwbThtUXVtIFR2cUkgUWkga21xcFQuCiAgICAgKgogICAgICogQHFFaEVsICBsa1ZJZiAgJFVFOXBJCiAgICAgKiBAaElUcGhtIGxrVklmCiAgICAgKisKICAgIHFoUVRJRlRJZiBpcG1GVGtRbSBpOUVUVEltQkU5cEkoJFVFOXBJKQogICAgewogICAgICAgIGhJVHBobSBrc19FaGhFdigkVUU5cEkpID8gaklFZih0aGg6Omk5RVRUSW0oJFVFOXBJKSkgOiAkVUU5cEk7CiAgICB9CgogICAgKyoqCiAgICAgKiAwSVQgVGpJIGZJaUVwOVQgOEl2IG1FbEkgUWkgVGpJIFRFZTlJLgogICAgICoKICAgICAqIEBoSVRwaG0gc1Roa21KCiAgICAgKisKICAgIHFoUVRJRlRJZiBpcG1GVGtRbSBmSWlFcDlUMUl2QUVsSSgpCiAgICB7CiAgICAgICAgaElUcGhtICdrZic7CiAgICB9CgogICAgKyoqCiAgICAgKiAwSVQgVGpJIGZFVEVlRXNJIEZRbW1JRlRrUW0ga21zVEVtRkkuCiAgICAgKgogICAgICogQGhJVHBobSBcQUtBdFxuRVRFZUVzSVxvUW1tSUZUa1FtS21USWhpRUZJCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBKSVRvUW1tSUZUa1FtKCkKICAgIHsKICAgICAgICBoSVRwaG0gJFRqa3MtPkZRbW1JRlRrUW07CiAgICB9CgogICAgKyoqCiAgICAgKiAwSVQgVGpJIGZFVEVlRXNJIFJwSWh2IHFoUUZJc3NRaCBrbXNURW1GSS4KICAgICAqCiAgICAgKiBAaElUcGhtIFxBS0F0XG5FVEVlRXNJXEdwSWh2XGFoUUZJc3NRaHNcYWhRRklzc1FoCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBKSVRhaFFGSXNzUWgoKQogICAgewogICAgICAgIGhJVHBobSAkVGprcy0+cWhRRklzc1FoOwogICAgfQoKICAgICsqKgogICAgICogMElUIFRqSSBScElodiBKaEVsbEVoIGttc1RFbUZJLgogICAgICoKICAgICAqIEBoSVRwaG0gXEFLQXRcbkVURWVFc0lcR3BJaHZcMGhFbGxFaHNcMGhFbGxFaAogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gSklUMGhFbGxFaCgpCiAgICB7CiAgICAgICAgaElUcGhtICRUamtzLT5KaEVsbEVoOwogICAgfQoKICAgICsqKgogICAgICogUHNJIFRqSSAidWhrVEkiIGFuTSBGUW1tSUZUa1FtIHVqSW0gSVZJRnBUa21KIFRqSSBScElodi4KICAgICAqCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBwc0liaGtUSWFmUSgpCiAgICB7CiAgICAgICAgJFRqa3MtPnBzSWJoa1RJYWZRID0gVGhwSTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogbklUSWhsa21JIGtpIFRqSSBVRTlwSSBrcyBFIFJwSWh2IGVwazlmSWgga21zVEVtRkkgUWggRSBvOVFzcGhJLgogICAgICoKICAgICAqIEBxRWhFbCAgbGtWSWYgICRVRTlwSQogICAgICogQGhJVHBobSBlUVE5CiAgICAgKisKICAgIHFoUVRJRlRJZiBpcG1GVGtRbSBrc0dwSWh2RWU5SSgkVUU5cEkpCiAgICB7CiAgICAgICAgaElUcGhtICRVRTlwSSBrbXNURW1GSVFpIHNJOWkgfHwKICAgICAgICAgICAgICAgJFVFOXBJIGttc1RFbUZJUWkgZzlRUnBJbVRycGs5ZkloIHx8CiAgICAgICAgICAgICAgICRVRTlwSSBrbXNURW1GSVFpIE5JOUVUa1FtIHx8CiAgICAgICAgICAgICAgICRVRTlwSSBrbXNURW1GSVFpIG85UXNwaEk7CiAgICB9CgogICAgKyoqCiAgICAgKiBvOVFtSSBUakkgUnBJaHYuCiAgICAgKgogICAgICogQGhJVHBobSBzVEVUa0YKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIEY5UW1JKCkKICAgIHsKICAgICAgICBoSVRwaG0gRjlRbUkgJFRqa3M7CiAgICB9CgogICAgKyoqCiAgICAgKiBvOVFtSSBUakkgUnBJaHYgdWtUalFwVCBUakkgSmtVSW0gcWhRcUloVGtJcy4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkcWhRcUloVGtJcwogICAgICogQGhJVHBobSBzVEVUa0YKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIEY5UW1JYmtUalFwVChFaGhFdiAkcWhRcUloVGtJcykKICAgIHsKICAgICAgICBoSVRwaG0gVEVxKCRUamtzLT5GOVFtSSgpLCBpcG1GVGtRbSAoJEY5UW1JKSBwc0kgKCRxaFFxSWhUa0lzKSB7CiAgICAgICAgICAgIGlRaElFRmogKCRxaFFxSWhUa0lzIEVzICRxaFFxSWhUdikgewogICAgICAgICAgICAgICAgJEY5UW1JLT57JHFoUXFJaFR2fSA9IG1wOTk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICArKioKICAgICAqIG85UW1JIFRqSSBScElodiB1a1RqUXBUIFRqSSBKa1VJbSBla21ma21Kcy4KICAgICAqCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkSVZGSXFUCiAgICAgKiBAaElUcGhtIHNURVRrRgogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gRjlRbUlia1RqUXBUcmttZmttSnMoRWhoRXYgJElWRklxVCkKICAgIHsKICAgICAgICBoSVRwaG0gVEVxKCRUamtzLT5GOVFtSSgpLCBpcG1GVGtRbSAoJEY5UW1JKSBwc0kgKCRJVkZJcVQpIHsKICAgICAgICAgICAgaVFoSUVGaiAoJElWRklxVCBFcyAkVHZxSSkgewogICAgICAgICAgICAgICAgJEY5UW1JLT5la21ma21Kc1skVHZxSV0gPSBbXTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgICsqKgogICAgICogbnBscSBUakkgRnBoaEltVCBPRzYgRW1mIGVrbWZrbUpzLgogICAgICoKICAgICAqIEBxRWhFbCAgbGtWSWYgIC4uLiRFaEpzCiAgICAgKiBAaElUcGhtICRUamtzCiAgICAgKisKICAgIHFwZTlrRiBpcG1GVGtRbSBmcGxxKC4uLiRFaEpzKQogICAgewogICAgICAgIGZwbHEoCiAgICAgICAgICAgICRUamtzLT5UUU9SOSgpLAogICAgICAgICAgICAkVGprcy0+SklUcmttZmttSnMoKSwKICAgICAgICAgICAgLi4uJEVoSnMsCiAgICAgICAgKTsKCiAgICAgICAgaElUcGhtICRUamtzOwogICAgfQoKICAgICsqKgogICAgICogbnBscSBUakkgaEV1IEZwaGhJbVQgT0c2IHVrVGogSWxlSWZmSWYgZWttZmttSnMuCiAgICAgKgogICAgICogQGhJVHBobSAkVGprcwogICAgICorCiAgICBxcGU5a0YgaXBtRlRrUW0gZnBscU5FdU9SOSgpCiAgICB7CiAgICAgICAgZnBscSgkVGprcy0+VFFORXVPUjkoKSk7CgogICAgICAgIGhJVHBobSAkVGprczsKICAgIH0KCiAgICArKioKICAgICAqIG5rSSBFbWYgZnBscSBUakkgRnBoaEltVCBPRzYgRW1mIGVrbWZrbUpzLgogICAgICoKICAgICAqIEBoSVRwaG0gbUlVSWgKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGZmKCkKICAgIHsKICAgICAgICBmZigkVGprcy0+VFFPUjkoKSwgJFRqa3MtPkpJVHJrbWZrbUpzKCkpOwogICAgfQoKICAgICsqKgogICAgICogbmtJIEVtZiBmcGxxIFRqSSBGcGhoSW1UIE9HNiB1a1RqIElsZUlmZklmIGVrbWZrbUpzLgogICAgICoKICAgICAqIEBoSVRwaG0gbUlVSWgKICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIGZmTkV1T1I5KCkKICAgIHsKICAgICAgICBmZigkVGprcy0+VFFORXVPUjkoKSk7CiAgICB9CgogICAgKyoqCiAgICAgKiBTRW1mOUkgZnZtRWxrRiBsSVRqUWYgRkU5OXMga21UUSBUakkgbElUalFmLgogICAgICoKICAgICAqIEBxRWhFbCAgc1Roa21KICAkbElUalFmCiAgICAgKiBAcUVoRWwgIEVoaEV2ICAkcUVoRWxJVElocwogICAgICogQGhJVHBobSBsa1ZJZgogICAgICoKICAgICAqIEBUamhRdXMgXHJFZjNJVGpRZm9FOTlnVkZJcVRrUW0KICAgICAqKwogICAgcXBlOWtGIGlwbUZUa1FtIF9fRkU5OSgkbElUalFmLCAkcUVoRWxJVElocykKICAgIHsKICAgICAgICBraSAoc1RFVGtGOjpqRXMzRUZoUSgkbElUalFmKSkgewogICAgICAgICAgICBoSVRwaG0gJFRqa3MtPmxFRmhRb0U5OSgkbElUalFmLCAkcUVoRWxJVElocyk7CiAgICAgICAgfQoKICAgICAgICBraSAoc1RoX3NURWhUc191a1RqKCRsSVRqUWYsICd1akloSScpKSB7CiAgICAgICAgICAgIGhJVHBobSAkVGprcy0+ZnZtRWxrRmJqSWhJKCRsSVRqUWYsICRxRWhFbElUSWhzKTsKICAgICAgICB9CgogICAgICAgIHNURVRrRjo6VGpoUXVyRWYzSVRqUWZvRTk5Z1ZGSXFUa1FtKCRsSVRqUWYpOwogICAgfQp9Cg==